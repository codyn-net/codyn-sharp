		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expression_new(IntPtr expression);

		[DllImport ("libgobject-2.0")]
		private static extern void g_object_ref_sink (IntPtr raw);

		public Expression (string expression) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Expression))
			{
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();

				names.Add ("expression");
				vals.Add (new GLib.Value (expression));

				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
			}
			else
			{
				IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
				Raw = cdn_expression_new(native_expression);
				GLib.Marshaller.Free (native_expression);
			}

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expression_copy(IntPtr raw);

		public Cdn.Expression Copy() {
			IntPtr raw_ret = cdn_expression_copy(Handle);

			if (raw_ret != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}

			Cdn.Expression ret = GLib.Object.GetObject(raw_ret, true) as Cdn.Expression;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expression_get_instructions(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_expression_set_instructions(IntPtr raw, IntPtr instructions);

		public Cdn.Instruction[] Instructions
		{
			get
			{
				IntPtr raw_ret = cdn_expression_get_instructions(Handle);
				IntPtr[] ptrs = (IntPtr[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(IntPtr));

				Cdn.Instruction[] ret = new Cdn.Instruction[ptrs.Length];

				for (int i = 0; i < ret.Length; ++i)
				{
					ret[i] = (Cdn.Instruction)MiniObject.GetObject(ptrs[i]);
				}

				return ret;
			}
			set
			{
				GLib.SList ptr = new GLib.SList(typeof(IntPtr));

				for (int i = 0; i < value.Length; ++i)
				{
					ptr.Append(value[i].Handle);
				}

				cdn_expression_set_instructions(Handle, ptr.Handle);
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expression_set_instructions_take(IntPtr raw, IntPtr instructions);

		public void SetInstructionsTake(Cdn.Instruction[] instructions)
		{
			GLib.SList ptr = new GLib.SList(typeof(IntPtr));

			for (int i = 0; i < instructions.Length; ++i)
			{
				ptr.Append(instructions[i].Handle);
			}

			cdn_expression_set_instructions_take(Handle, ptr.Handle);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expression_evaluate_values(IntPtr raw, out int numr, out int numc);

		public double[,] EvaluateValues()
		{
			int numr;
			int numc;
			double[] data;

			IntPtr raw_ret = cdn_expression_evaluate_values(Handle, out numr, out numc);

			data = new double[numr * numc];
			Marshal.Copy(raw_ret, data, 0, numr * numc);

			double[,] ret = new double[numr, numc];
			int idx = 0;

			for (int r = 0; r < numr; ++r)
			{
				for (int c = 0; c < numc; ++c)
				{
					ret[r, c] = data[idx++];
				}
			}

			return ret;
		}

