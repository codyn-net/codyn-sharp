		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_operator_all_expressions(IntPtr raw);

		public Cdn.Expression[][] AllExpressions() {
			int num = cdn_operator_num_expressions(Handle);

			if (num == 0)
			{
				return new Cdn.Expression[0][];
			}

			IntPtr rawret = cdn_operator_all_expressions(Handle);
			Cdn.Expression[][] ret;

			IntPtr[] data = new IntPtr[num];
			Marshal.Copy(rawret, data, 0, (int)num);

			ret = new Cdn.Expression[num][];

			for (int i = 0; i < num; ++i)
			{
				ret[i] = (Cdn.Expression[]) GLib.Marshaller.ListPtrToArray (data[i],
				                                                           typeof(GLib.SList),
				                                                           false,
				                                                           false,
				                                                           typeof(Cdn.Expression));
			}

			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_operator_all_indices(IntPtr raw);

		public Cdn.Expression[][] AllIndices() {
			int num = cdn_operator_num_indices(Handle);

			if (num == 0)
			{
				return new Cdn.Expression[0][];
			}

			IntPtr rawret = cdn_operator_all_indices(Handle);
			Cdn.Expression[][] ret;

			IntPtr[] data = new IntPtr[num];
			Marshal.Copy(rawret, data, 0, (int)num);

			ret = new Cdn.Expression[num][];

			for (int i = 0; i < num; ++i)
			{
				ret[i] = (Cdn.Expression[]) GLib.Marshaller.ListPtrToArray (data[i],
				                                                           typeof(GLib.SList),
				                                                           false,
				                                                           false,
				                                                           typeof(Cdn.Expression));
			}

			return ret;
		}
