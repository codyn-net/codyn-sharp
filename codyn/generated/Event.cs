// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Event : Cdn.Node, Cdn.Phaseable {

		[Obsolete]
		protected Event(GLib.GType gtype) : base(gtype) {}
		public Event(IntPtr raw) : base(raw) {}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_event_new(IntPtr id, IntPtr condition, double approximation);

		public Event (string id, Cdn.Expression condition, double approximation) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Event)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				if (condition != null) {
					names.Add ("condition");
					vals.Add (new GLib.Value (condition));
				}
				names.Add ("approximation");
				vals.Add (new GLib.Value (approximation));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			Raw = cdn_event_new(native_id, condition == null ? IntPtr.Zero : condition.Handle, approximation);
			GLib.Marshaller.Free (native_id);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_event_get_condition(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_event_set_condition(IntPtr raw, IntPtr condition);

		[GLib.Property ("condition")]
		public Cdn.Expression Condition {
			get  {
				IntPtr raw_ret = cdn_event_get_condition(Handle);
				Cdn.Expression ret = GLib.Object.GetObject(raw_ret) as Cdn.Expression;
				return ret;
			}
			set  {
				cdn_event_set_condition(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_event_get_goto_state(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_event_set_goto_state(IntPtr raw, IntPtr state);

		[GLib.Property ("goto-state")]
		public string GotoState {
			get  {
				IntPtr raw_ret = cdn_event_get_goto_state(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cdn_event_set_goto_state(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern double cdn_event_get_approximation(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_event_set_approximation(IntPtr raw, double approximation);

		[GLib.Property ("approximation")]
		public double Approximation {
			get  {
				double raw_ret = cdn_event_get_approximation(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				cdn_event_set_approximation(Handle, value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_event_get_terminal(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_event_set_terminal(IntPtr raw, bool terminal);

		[GLib.Property ("terminal")]
		public bool Terminal {
			get  {
				bool raw_ret = cdn_event_get_terminal(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				cdn_event_set_terminal(Handle, value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_event_update(IntPtr raw);

		public void Update() {
			cdn_event_update(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_event_add_set_variable(IntPtr raw, IntPtr property, IntPtr value);

		public void AddSetVariable(Cdn.Variable property, Cdn.Expression value) {
			cdn_event_add_set_variable(Handle, property == null ? IntPtr.Zero : property.Handle, value == null ? IntPtr.Zero : value.Handle);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_event_execute(IntPtr raw);

		public void Execute() {
			cdn_event_execute(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_event_happened(IntPtr raw, out double dist);

		public bool Happened(out double dist) {
			bool raw_ret = cdn_event_happened(Handle, out dist);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern double cdn_event_last_distance(IntPtr raw);

		public double LastDistance() {
			double raw_ret = cdn_event_last_distance(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_event_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_event_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_phaseable_remove_phase(IntPtr raw, IntPtr tag);

		public void RemovePhase(string tag) {
			IntPtr native_tag = GLib.Marshaller.StringToPtrGStrdup (tag);
			cdn_phaseable_remove_phase(Handle, native_tag);
			GLib.Marshaller.Free (native_tag);
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_phaseable_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cdn.Phaseable other) {
			bool raw_ret = cdn_phaseable_equal(Handle, other == null ? IntPtr.Zero : other.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_phaseable_copy_to(IntPtr raw, IntPtr dest);

		public void CopyTo(Cdn.Phaseable dest) {
			cdn_phaseable_copy_to(Handle, dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport("codyn-3.0")]
		static extern System.IntPtr cdn_phaseable_get_phase_table(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_phaseable_set_phase_table(IntPtr raw, System.IntPtr table);

		public System.IntPtr PhaseTable { 
			get {
				System.IntPtr raw_ret = cdn_phaseable_get_phase_table(Handle);
				System.IntPtr ret = raw_ret;
				return ret;
			}
			set {
				cdn_phaseable_set_phase_table(Handle, value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_phaseable_add_phase(IntPtr raw, IntPtr phase);

		public void AddPhase(string phase) {
			IntPtr native_phase = GLib.Marshaller.StringToPtrGStrdup (phase);
			cdn_phaseable_add_phase(Handle, native_phase);
			GLib.Marshaller.Free (native_phase);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_phaseable_foreach(IntPtr raw, CdnSharp.PhaseableForeachFuncNative func, IntPtr userdata);

		public void Foreach(Cdn.PhaseableForeachFunc func) {
			CdnSharp.PhaseableForeachFuncWrapper func_wrapper = new CdnSharp.PhaseableForeachFuncWrapper (func);
			cdn_phaseable_foreach(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_phaseable_is_active(IntPtr raw, IntPtr phase);

		public bool IsActive(string phase) {
			IntPtr native_phase = GLib.Marshaller.StringToPtrGStrdup (phase);
			bool raw_ret = cdn_phaseable_is_active(Handle, native_phase);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_phase);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Event.custom"
		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_phaseable_get_phases(IntPtr raw);

		public string[] Phases
		{
			get
			{
				IntPtr ret = cdn_phaseable_get_phases(Handle);
				return GLib.Marshaller.NullTermPtrToStringArray(ret, true);
			}
		}

#endregion
	}
}
