// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class InstructionVariable : GLib.Opaque {

		[DllImport("codyn-3.0")]
		static extern int cdn_instruction_variable_get_binding(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_instruction_variable_set_binding(IntPtr raw, int binding);

		public Cdn.InstructionVariableBinding Binding { 
			get {
				int raw_ret = cdn_instruction_variable_get_binding(Handle);
				Cdn.InstructionVariableBinding ret = (Cdn.InstructionVariableBinding) raw_ret;
				return ret;
			}
			set {
				cdn_instruction_variable_set_binding(Handle, (int) value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_instruction_variable_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_instruction_variable_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_instruction_variable_get_variable(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_instruction_variable_set_variable(IntPtr raw, IntPtr property);

		public Cdn.Variable Variable { 
			get {
				IntPtr raw_ret = cdn_instruction_variable_get_variable(Handle);
				Cdn.Variable ret = raw_ret == IntPtr.Zero ? null : (Cdn.Variable) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Variable), false);
				return ret;
			}
			set {
				cdn_instruction_variable_set_variable(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		public InstructionVariable(IntPtr raw) : base(raw) {}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_instruction_variable_new(IntPtr property);

		public InstructionVariable (Cdn.Variable property) 
		{
			Raw = cdn_instruction_variable_new(property == null ? IntPtr.Zero : property.Handle);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_instruction_variable_new_with_binding(IntPtr property, int binding);

		public InstructionVariable (Cdn.Variable property, Cdn.InstructionVariableBinding binding) 
		{
			Raw = cdn_instruction_variable_new_with_binding(property == null ? IntPtr.Zero : property.Handle, (int) binding);
		}

#endregion
	}
}
