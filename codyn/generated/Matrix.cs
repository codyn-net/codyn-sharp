// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Matrix : GLib.Opaque {

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = cdn_matrix_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_matrix_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_matrix_clear(IntPtr raw);

		public void Clear() {
			cdn_matrix_clear(Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_init(out double values, IntPtr dimension);

		public static Cdn.Matrix Init(out double values, Cdn.Dimension dimension) {
			IntPtr native_dimension = GLib.Marshaller.StructureToPtrAlloc (dimension);
			IntPtr raw_ret = cdn_matrix_init(out values, native_dimension);
			Cdn.Matrix ret = raw_ret == IntPtr.Zero ? null : (Cdn.Matrix) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Matrix), false);
			dimension = Cdn.Dimension.New (native_dimension);
			Marshal.FreeHGlobal (native_dimension);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_matrix_set_one(IntPtr raw, double value);

		public double One { 
			set {
				cdn_matrix_set_one(Handle, value);
			}
		}

		public Matrix(IntPtr raw) : base(raw) {}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_new(out double values, IntPtr dimension);

		public Matrix (out double values, Cdn.Dimension dimension) 
		{
			IntPtr native_dimension = GLib.Marshaller.StructureToPtrAlloc (dimension);
			Raw = cdn_matrix_new(out values, native_dimension);
			dimension = Cdn.Dimension.New (native_dimension);
			Marshal.FreeHGlobal (native_dimension);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_new_flat(out double values, int length, IntPtr dimension);

		public Matrix (out double values, int length, Cdn.Dimension dimension) 
		{
			IntPtr native_dimension = GLib.Marshaller.StructureToPtrAlloc (dimension);
			Raw = cdn_matrix_new_flat(out values, length, native_dimension);
			dimension = Cdn.Dimension.New (native_dimension);
			Marshal.FreeHGlobal (native_dimension);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_new_one(double value);

		public Matrix (double value) 
		{
			Raw = cdn_matrix_new_one(value);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_matrix_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			cdn_matrix_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				cdn_matrix_free (handle);
				return false;
			}
		}

		~Matrix ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
#region Customized extensions
#line 1 "Matrix.custom"
		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_matrix_get_at(IntPtr raw, int r, int c);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_matrix_set_at(IntPtr raw, int r, int c, double value);

		public double this[int r, int c]
		{
			get { return cdn_matrix_get_at(Handle, r, c); }
			set { cdn_matrix_set_at(Handle, r, c, value); }
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_matrix_dimension(IntPtr raw);

		public Cdn.Dimension Dimension
		{
			get
			{
				IntPtr raw_ret = cdn_matrix_dimension(Handle);
				Cdn.Dimension ret = Cdn.Dimension.New (raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_matrix_size(IntPtr raw);

		public int Length
		{
			get { return cdn_matrix_size(Handle); }
		}


#endregion
	}
}
