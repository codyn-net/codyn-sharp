// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class EventLogicalNode : GLib.Opaque {

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_event_logical_node_get_left(IntPtr raw);

		public Cdn.EventLogicalNode Left { 
			get {
				IntPtr raw_ret = cdn_event_logical_node_get_left(Handle);
				Cdn.EventLogicalNode ret = raw_ret == IntPtr.Zero ? null : (Cdn.EventLogicalNode) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.EventLogicalNode), false);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_event_logical_node_get_expression(IntPtr raw);

		public Cdn.Expression Expression { 
			get {
				IntPtr raw_ret = cdn_event_logical_node_get_expression(Handle);
				Cdn.Expression ret = GLib.Object.GetObject(raw_ret) as Cdn.Expression;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_event_logical_node_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_event_logical_node_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_event_logical_node_get_compare_type(IntPtr raw);

		public Cdn.MathFunctionType CompareType { 
			get {
				int raw_ret = cdn_event_logical_node_get_compare_type(Handle);
				Cdn.MathFunctionType ret = (Cdn.MathFunctionType) raw_ret;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_event_logical_node_get_right(IntPtr raw);

		public Cdn.EventLogicalNode Right { 
			get {
				IntPtr raw_ret = cdn_event_logical_node_get_right(Handle);
				Cdn.EventLogicalNode ret = raw_ret == IntPtr.Zero ? null : (Cdn.EventLogicalNode) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.EventLogicalNode), false);
				return ret;
			}
		}

		public EventLogicalNode(IntPtr raw) : base(raw) {}

#endregion
	}
}
