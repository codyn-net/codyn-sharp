// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Variable : GLib.InitiallyUnowned, Cdn.Usable, Cdn.Modifiable, Cdn.Annotatable {

		[Obsolete]
		protected Variable(GLib.GType gtype) : base(gtype) {}
		public Variable(IntPtr raw) : base(raw) {}

		protected Variable() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_variable_get_flags(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_flags(IntPtr raw, int flags);

		[GLib.Property ("flags")]
		public Cdn.VariableFlags Flags {
			get  {
				int raw_ret = cdn_variable_get_flags(Handle);
				Cdn.VariableFlags ret = (Cdn.VariableFlags) raw_ret;
				return ret;
			}
			set  {
				cdn_variable_set_flags(Handle, (int) value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_expression(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_expression(IntPtr raw, IntPtr expression);

		[GLib.Property ("expression")]
		public Cdn.Expression Expression {
			get  {
				IntPtr raw_ret = cdn_variable_get_expression(Handle);
				Cdn.Expression ret = GLib.Object.GetObject(raw_ret) as Cdn.Expression;
				return ret;
			}
			set  {
				cdn_variable_set_expression(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_constraint(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_constraint(IntPtr raw, IntPtr expression);

		[GLib.Property ("constraint")]
		public Cdn.Expression Constraint {
			get  {
				IntPtr raw_ret = cdn_variable_get_constraint(Handle);
				Cdn.Expression ret = GLib.Object.GetObject(raw_ret) as Cdn.Expression;
				return ret;
			}
			set  {
				cdn_variable_set_constraint(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_object(IntPtr raw);

		[GLib.Property ("object")]
		public Cdn.Object Object {
			get  {
				IntPtr raw_ret = cdn_variable_get_object(Handle);
				Cdn.Object ret = GLib.Object.GetObject(raw_ret) as Cdn.Object;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("object", val);
				val.Dispose ();
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = cdn_variable_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("name", val);
				val.Dispose ();
			}
		}

		[GLib.CDeclCallback]
		delegate void ExpressionChangedVMDelegate (IntPtr variable, IntPtr expression);

		static ExpressionChangedVMDelegate ExpressionChangedVMCallback;

		static void expressionchanged_cb (IntPtr variable, IntPtr expression)
		{
			try {
				Variable variable_managed = GLib.Object.GetObject (variable, false) as Variable;
				variable_managed.OnExpressionChanged (GLib.Object.GetObject(expression) as Cdn.Expression);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideExpressionChanged (GLib.GType gtype)
		{
			if (ExpressionChangedVMCallback == null)
				ExpressionChangedVMCallback = new ExpressionChangedVMDelegate (expressionchanged_cb);
			OverrideVirtualMethod (gtype, "expression-changed", ExpressionChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Variable), ConnectionMethod="OverrideExpressionChanged")]
		protected virtual void OnExpressionChanged (Cdn.Expression expression)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (expression);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("expression-changed")]
		public event Cdn.ExpressionChangedHandler ExpressionChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "expression-changed", typeof (Cdn.ExpressionChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "expression-changed", typeof (Cdn.ExpressionChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate bool InvalidateNameVMDelegate (IntPtr variable, IntPtr name);

		static InvalidateNameVMDelegate InvalidateNameVMCallback;

		static bool invalidatename_cb (IntPtr variable, IntPtr name)
		{
			try {
				Variable variable_managed = GLib.Object.GetObject (variable, false) as Variable;
				return variable_managed.OnInvalidateName (GLib.Marshaller.Utf8PtrToString (name));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideInvalidateName (GLib.GType gtype)
		{
			if (InvalidateNameVMCallback == null)
				InvalidateNameVMCallback = new InvalidateNameVMDelegate (invalidatename_cb);
			OverrideVirtualMethod (gtype, "invalidate-name", InvalidateNameVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Variable), ConnectionMethod="OverrideInvalidateName")]
		protected virtual bool OnInvalidateName (string name)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.Boolean);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (name);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			bool result = (bool) ret;
			ret.Dispose ();
			return result;
		}

		[GLib.Signal("invalidate-name")]
		public event Cdn.InvalidateNameHandler InvalidateName {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "invalidate-name", typeof (Cdn.InvalidateNameArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "invalidate-name", typeof (Cdn.InvalidateNameArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void FlagsChangedVMDelegate (IntPtr variable, int flags);

		static FlagsChangedVMDelegate FlagsChangedVMCallback;

		static void flagschanged_cb (IntPtr variable, int flags)
		{
			try {
				Variable variable_managed = GLib.Object.GetObject (variable, false) as Variable;
				variable_managed.OnFlagsChanged ((Cdn.VariableFlags) flags);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFlagsChanged (GLib.GType gtype)
		{
			if (FlagsChangedVMCallback == null)
				FlagsChangedVMCallback = new FlagsChangedVMDelegate (flagschanged_cb);
			OverrideVirtualMethod (gtype, "flags-changed", FlagsChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Variable), ConnectionMethod="OverrideFlagsChanged")]
		protected virtual void OnFlagsChanged (Cdn.VariableFlags flags)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (flags);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("flags-changed")]
		public event Cdn.FlagsChangedHandler FlagsChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "flags-changed", typeof (Cdn.FlagsChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "flags-changed", typeof (Cdn.FlagsChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_values(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_values(IntPtr raw, IntPtr values);

		public Cdn.Matrix Values { 
			get {
				IntPtr raw_ret = cdn_variable_get_values(Handle);
				Cdn.Matrix ret = raw_ret == IntPtr.Zero ? null : (Cdn.Matrix) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Matrix), false);
				return ret;
			}
			set {
				cdn_variable_set_values(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_variable_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_clear_update(IntPtr raw);

		public void ClearUpdate() {
			cdn_variable_clear_update(Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_variable_has_actions(IntPtr raw);

		public bool HasActions { 
			get {
				bool raw_ret = cdn_variable_has_actions(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_get_dimension(IntPtr raw, IntPtr dim);

		public Cdn.Dimension Dimension { 
			get {
				Cdn.Dimension dim;
				IntPtr native_dim = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Cdn.Dimension)));
				cdn_variable_get_dimension(Handle, native_dim);
				dim = Cdn.Dimension.New (native_dim);
				Marshal.FreeHGlobal (native_dim);
				return dim;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_flags_from_string(IntPtr flags, out int add_flags, out int remove_flags);

		public static void FlagsFromString(string flags, out Cdn.VariableFlags add_flags, out Cdn.VariableFlags remove_flags) {
			IntPtr native_flags = GLib.Marshaller.StringToPtrGStrdup (flags);
			int native_add_flags;
			int native_remove_flags;
			cdn_variable_flags_from_string(native_flags, out native_add_flags, out native_remove_flags);
			GLib.Marshaller.Free (native_flags);
			add_flags = (Cdn.VariableFlags) native_add_flags;
			remove_flags = (Cdn.VariableFlags) native_remove_flags;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_remove_flags(IntPtr raw, int flags);

		public void RemoveFlags(Cdn.VariableFlags flags) {
			cdn_variable_remove_flags(Handle, (int) flags);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_add_flags(IntPtr raw, int flags);

		public void AddFlags(Cdn.VariableFlags flags) {
			cdn_variable_add_flags(Handle, (int) flags);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_derivative(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_derivative(IntPtr raw, IntPtr diffprop);

		public Cdn.Variable Derivative { 
			get {
				IntPtr raw_ret = cdn_variable_get_derivative(Handle);
				Cdn.Variable ret = GLib.Object.GetObject(raw_ret) as Cdn.Variable;
				return ret;
			}
			set {
				cdn_variable_set_derivative(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_flags_to_string(int add_flags, int remove_flags);

		public static string FlagsToString(Cdn.VariableFlags add_flags, Cdn.VariableFlags remove_flags) {
			IntPtr raw_ret = cdn_variable_flags_to_string((int) add_flags, (int) remove_flags);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_variable_get_integrated(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_integrated(IntPtr raw, bool integrated);

		public bool Integrated { 
			get {
				bool raw_ret = cdn_variable_get_integrated(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cdn_variable_set_integrated(Handle, value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_full_name(IntPtr raw);

		public string FullName { 
			get {
				IntPtr raw_ret = cdn_variable_get_full_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_variable_equal(IntPtr raw, IntPtr other, bool asstring);

		public bool Equal(Cdn.Variable other, bool asstring) {
			bool raw_ret = cdn_variable_equal(Handle, other == null ? IntPtr.Zero : other.Handle, asstring);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_update(IntPtr raw);

		public Cdn.Matrix Update { 
			get {
				IntPtr raw_ret = cdn_variable_get_update(Handle);
				Cdn.Matrix ret = raw_ret == IntPtr.Zero ? null : (Cdn.Matrix) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Matrix), false);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_full_name_for_display(IntPtr raw);

		public string FullNameForDisplay { 
			get {
				IntPtr raw_ret = cdn_variable_get_full_name_for_display(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_variable_set_name(IntPtr raw, IntPtr name);

		public bool SetName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = cdn_variable_set_name(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_reset(IntPtr raw);

		public void Reset() {
			cdn_variable_reset(Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_variable_get_value(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_variable_set_value(IntPtr raw, double value);

		public double Value { 
			get {
				double raw_ret = cdn_variable_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				cdn_variable_set_value(Handle, value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_variable_compile(IntPtr raw, IntPtr error);

		public bool Compile(Cdn.CompileError error) {
			bool raw_ret = cdn_variable_compile(Handle, error == null ? IntPtr.Zero : error.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_actions(IntPtr raw);

		public Cdn.EdgeAction[] Actions { 
			get {
				IntPtr raw_ret = cdn_variable_get_actions(Handle);
				Cdn.EdgeAction[] ret = (Cdn.EdgeAction[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.EdgeAction));
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_get_integral(IntPtr raw);

		public Cdn.Variable Integral { 
			get {
				IntPtr raw_ret = cdn_variable_get_integral(Handle);
				Cdn.Variable ret = GLib.Object.GetObject(raw_ret) as Cdn.Variable;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_usable_use(IntPtr raw);

		public void Use() {
			cdn_usable_use(Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern uint cdn_usable_use_count(IntPtr raw);

		public uint UseCount() {
			uint raw_ret = cdn_usable_use_count(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_usable_unuse(IntPtr raw);

		public bool Unuse() {
			bool raw_ret = cdn_usable_unuse(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_modifiable_get_modified(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_modifiable_set_modified(IntPtr raw, bool modified);

		public bool Modified { 
			get {
				bool raw_ret = cdn_modifiable_get_modified(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cdn_modifiable_set_modified(Handle, value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_annotatable_get_annotation(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_annotatable_set_annotation(IntPtr raw, IntPtr annotation);

		public string Annotation { 
			get {
				IntPtr raw_ret = cdn_annotatable_get_annotation(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cdn_annotatable_set_annotation(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_annotatable_parse_annotation(IntPtr raw);

		public Cdn.AnnotationInfo ParseAnnotation() {
			IntPtr raw_ret = cdn_annotatable_parse_annotation(Handle);
			Cdn.AnnotationInfo ret = raw_ret == IntPtr.Zero ? null : (Cdn.AnnotationInfo) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.AnnotationInfo), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_annotatable_get_title(IntPtr raw);

		public string Title { 
			get {
				IntPtr raw_ret = cdn_annotatable_get_title(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "Variable.custom"
		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_new(IntPtr name, IntPtr expression, int flags);

		[DllImport ("libgobject-2.0-0.dll")]
		private static extern void g_object_ref_sink (IntPtr raw);

		public Variable (string name, Cdn.Expression expression, Cdn.VariableFlags flags) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Variable)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				if (expression != null) {
					names.Add ("expression");
					vals.Add (new GLib.Value (expression));
				}
				names.Add ("flags");
				vals.Add (new GLib.Value (flags));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = cdn_variable_new(native_name, expression == null ? IntPtr.Zero : expression.Handle, (int) flags);
			GLib.Marshaller.Free (native_name);

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_variable_copy(IntPtr raw);

		public Cdn.Variable Copy() {
			IntPtr raw_ret = cdn_variable_copy(Handle);

			if (raw_ret != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}

			Cdn.Variable ret = GLib.Object.GetObject(raw_ret, true) as Cdn.Variable;
			return ret;
		}

#endregion
	}
}
