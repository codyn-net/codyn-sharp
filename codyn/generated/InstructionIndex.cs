// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class InstructionIndex : Cdn.Instruction {

		[Obsolete]
		protected InstructionIndex(GLib.GType gtype) : base(gtype) {}
		public InstructionIndex(IntPtr raw) : base(raw) {}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_new(out int indices, IntPtr retdim, IntPtr arg);

		public InstructionIndex (out int indices, Cdn.Dimension retdim, Cdn.StackArg arg) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InstructionIndex)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_retdim = GLib.Marshaller.StructureToPtrAlloc (retdim);
			Raw = cdn_instruction_index_new(out indices, native_retdim, arg == null ? IntPtr.Zero : arg.Handle);
			retdim = Cdn.Dimension.New (native_retdim);
			Marshal.FreeHGlobal (native_retdim);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_new_offset(int start, IntPtr retdim, IntPtr arg);

		public static InstructionIndex NewOffset(int start, Cdn.Dimension retdim, Cdn.StackArg arg)
		{
			IntPtr native_retdim = GLib.Marshaller.StructureToPtrAlloc (retdim);
			InstructionIndex result = new InstructionIndex (cdn_instruction_index_new_offset(start, native_retdim, arg == null ? IntPtr.Zero : arg.Handle));
			retdim = Cdn.Dimension.New (native_retdim);
			Marshal.FreeHGlobal (native_retdim);
			return result;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_new_range(IntPtr range, IntPtr arg);

		public InstructionIndex (Cdn.IndexRange range, Cdn.StackArg arg) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InstructionIndex)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_range = GLib.Marshaller.StructureToPtrAlloc (range);
			Raw = cdn_instruction_index_new_range(native_range, arg == null ? IntPtr.Zero : arg.Handle);
			range = Cdn.IndexRange.New (native_range);
			Marshal.FreeHGlobal (native_range);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_new_range_block(IntPtr rows, IntPtr columns, IntPtr arg);

		public InstructionIndex (Cdn.IndexRange rows, Cdn.IndexRange columns, Cdn.StackArg arg) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InstructionIndex)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_rows = GLib.Marshaller.StructureToPtrAlloc (rows);
			IntPtr native_columns = GLib.Marshaller.StructureToPtrAlloc (columns);
			Raw = cdn_instruction_index_new_range_block(native_rows, native_columns, arg == null ? IntPtr.Zero : arg.Handle);
			rows = Cdn.IndexRange.New (native_rows);
			Marshal.FreeHGlobal (native_rows);
			columns = Cdn.IndexRange.New (native_columns);
			Marshal.FreeHGlobal (native_columns);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_new_rows_x_columns(out int rows, int n_rows, out int columns, int n_columns, IntPtr arg);

		public InstructionIndex (out int rows, int n_rows, out int columns, int n_columns, Cdn.StackArg arg) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InstructionIndex)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = cdn_instruction_index_new_rows_x_columns(out rows, n_rows, out columns, n_columns, arg == null ? IntPtr.Zero : arg.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_get_range(IntPtr raw);

		public Cdn.IndexRange Range { 
			get {
				IntPtr raw_ret = cdn_instruction_index_get_range(Handle);
				Cdn.IndexRange ret = Cdn.IndexRange.New (raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_instruction_index_get_index_type(IntPtr raw);

		public Cdn.InstructionIndexType IndexType { 
			get {
				int raw_ret = cdn_instruction_index_get_index_type(Handle);
				Cdn.InstructionIndexType ret = (Cdn.InstructionIndexType) raw_ret;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_instruction_index_get_offset(IntPtr raw);

		public int Offset { 
			get {
				int raw_ret = cdn_instruction_index_get_offset(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_instruction_index_get_range_block(IntPtr raw, IntPtr rows, IntPtr columns);

		public void GetRangeBlock(out Cdn.IndexRange rows, out Cdn.IndexRange columns) {
			IntPtr native_rows = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Cdn.IndexRange)));
			IntPtr native_columns = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Cdn.IndexRange)));
			cdn_instruction_index_get_range_block(Handle, native_rows, native_columns);
			rows = Cdn.IndexRange.New (native_rows);
			Marshal.FreeHGlobal (native_rows);
			columns = Cdn.IndexRange.New (native_columns);
			Marshal.FreeHGlobal (native_columns);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_instruction_index_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_instruction_index_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_instruction_index_set_range_end(IntPtr raw, int end);

		public int RangeEnd { 
			set {
				cdn_instruction_index_set_range_end(Handle, value);
			}
		}

#endregion
#region Customized extensions
#line 1 "InstructionIndex.custom"
		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_instruction_index_write_indices(IntPtr raw, int[] ret, int length);

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_instruction_index_num_indices(IntPtr raw);

		public int[] Indices
		{
			get
			{
				int length = cdn_instruction_index_num_indices(Handle);
				int[] ret = new int[length];

				if (cdn_instruction_index_write_indices(Handle, ret, length))
				{
					return ret;
				}
				else
				{
					return null;
				}
			}
		}

#endregion
	}
}
