// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PhaseableAdapter : GLib.GInterfaceAdapter, Cdn.Phaseable {

		static PhaseableIface iface;

		struct PhaseableIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetPhaseTableDelegate get_phase_table;
			public SetPhaseTableDelegate set_phase_table;
		}

		static PhaseableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(PhaseableAdapter));
			iface.get_phase_table = new GetPhaseTableDelegate (GetPhaseTableCallback);
			iface.set_phase_table = new SetPhaseTableDelegate (SetPhaseTableCallback);
		}


		[GLib.CDeclCallback]
		delegate System.IntPtr GetPhaseTableDelegate (IntPtr phaseable);

		static System.IntPtr GetPhaseTableCallback (IntPtr phaseable)
		{
			try {
				Cdn.PhaseableImplementor __obj = GLib.Object.GetObject (phaseable, false) as Cdn.PhaseableImplementor;
				System.IntPtr __result = __obj.PhaseTable;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void SetPhaseTableDelegate (IntPtr phaseable, System.IntPtr table);

		static void SetPhaseTableCallback (IntPtr phaseable, System.IntPtr table)
		{
			try {
				Cdn.PhaseableImplementor __obj = GLib.Object.GetObject (phaseable, false) as Cdn.PhaseableImplementor;
				__obj.PhaseTable = table;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			PhaseableIface native_iface = (PhaseableIface) Marshal.PtrToStructure (ifaceptr, typeof (PhaseableIface));
			native_iface.get_phase_table = iface.get_phase_table;
			native_iface.set_phase_table = iface.set_phase_table;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public PhaseableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		PhaseableImplementor implementor;

		public PhaseableAdapter (PhaseableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public PhaseableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_phaseable_get_type();

		private static GLib.GType _gtype = new GLib.GType (cdn_phaseable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Phaseable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Phaseable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is PhaseableImplementor)
				return new PhaseableAdapter (obj as PhaseableImplementor);
			else if (obj as Phaseable == null)
				return new PhaseableAdapter (obj.Handle);
			else
				return obj as Phaseable;
		}

		public PhaseableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_phaseable_remove_phase(IntPtr raw, IntPtr phase);

		public void RemovePhase(string phase) {
			IntPtr native_phase = GLib.Marshaller.StringToPtrGStrdup (phase);
			cdn_phaseable_remove_phase(Handle, native_phase);
			GLib.Marshaller.Free (native_phase);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_phaseable_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cdn.Phaseable other) {
			bool raw_ret = cdn_phaseable_equal(Handle, other == null ? IntPtr.Zero : other.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_phaseable_copy_to(IntPtr raw, IntPtr dest);

		public void CopyTo(Cdn.Phaseable dest) {
			cdn_phaseable_copy_to(Handle, dest == null ? IntPtr.Zero : dest.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern System.IntPtr cdn_phaseable_get_phase_table(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_phaseable_set_phase_table(IntPtr raw, System.IntPtr table);

		public System.IntPtr PhaseTable { 
			get {
				System.IntPtr raw_ret = cdn_phaseable_get_phase_table(Handle);
				System.IntPtr ret = raw_ret;
				return ret;
			}
			set {
				cdn_phaseable_set_phase_table(Handle, value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_phaseable_add_phase(IntPtr raw, IntPtr phase);

		public void AddPhase(string phase) {
			IntPtr native_phase = GLib.Marshaller.StringToPtrGStrdup (phase);
			cdn_phaseable_add_phase(Handle, native_phase);
			GLib.Marshaller.Free (native_phase);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_phaseable_foreach(IntPtr raw, CdnSharp.PhaseableForeachFuncNative func, IntPtr userdata);

		public void Foreach(Cdn.PhaseableForeachFunc func) {
			CdnSharp.PhaseableForeachFuncWrapper func_wrapper = new CdnSharp.PhaseableForeachFuncWrapper (func);
			cdn_phaseable_foreach(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_phaseable_is_active(IntPtr raw, IntPtr phase);

		public bool IsActive(string phase) {
			IntPtr native_phase = GLib.Marshaller.StringToPtrGStrdup (phase);
			bool raw_ret = cdn_phaseable_is_active(Handle, native_phase);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_phase);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "PhaseableAdapter.custom"
		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_phaseable_get_phases(IntPtr raw);

		public string[] Phases
		{
			get
			{
				IntPtr ret = cdn_phaseable_get_phases(Handle);
				return GLib.Marshaller.NullTermPtrToStringArray(ret, true);
			}
		}

#endregion
	}
}
