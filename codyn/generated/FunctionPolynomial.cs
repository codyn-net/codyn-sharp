// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FunctionPolynomial : Cdn.Function {

		[Obsolete]
		protected FunctionPolynomial(GLib.GType gtype) : base(gtype) {}
		public FunctionPolynomial(IntPtr raw) : base(raw) {}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_new(IntPtr name);

		public FunctionPolynomial (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FunctionPolynomial)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = cdn_function_polynomial_new(native_name);
			GLib.Marshaller.Free (native_name);
		}

		[GLib.CDeclCallback]
		delegate void PieceAddedVMDelegate (IntPtr polynomial, IntPtr piece);

		static PieceAddedVMDelegate PieceAddedVMCallback;

		static void pieceadded_cb (IntPtr polynomial, IntPtr piece)
		{
			try {
				FunctionPolynomial polynomial_managed = GLib.Object.GetObject (polynomial, false) as FunctionPolynomial;
				polynomial_managed.OnPieceAdded (GLib.Object.GetObject(piece) as Cdn.FunctionPolynomialPiece);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePieceAdded (GLib.GType gtype)
		{
			if (PieceAddedVMCallback == null)
				PieceAddedVMCallback = new PieceAddedVMDelegate (pieceadded_cb);
			OverrideVirtualMethod (gtype, "piece-added", PieceAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.FunctionPolynomial), ConnectionMethod="OverridePieceAdded")]
		protected virtual void OnPieceAdded (Cdn.FunctionPolynomialPiece piece)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (piece);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("piece-added")]
		public event Cdn.PieceAddedHandler PieceAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "piece-added", typeof (Cdn.PieceAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "piece-added", typeof (Cdn.PieceAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void PieceRemovedVMDelegate (IntPtr polynomial, IntPtr piece);

		static PieceRemovedVMDelegate PieceRemovedVMCallback;

		static void pieceremoved_cb (IntPtr polynomial, IntPtr piece)
		{
			try {
				FunctionPolynomial polynomial_managed = GLib.Object.GetObject (polynomial, false) as FunctionPolynomial;
				polynomial_managed.OnPieceRemoved (GLib.Object.GetObject(piece) as Cdn.FunctionPolynomialPiece);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePieceRemoved (GLib.GType gtype)
		{
			if (PieceRemovedVMCallback == null)
				PieceRemovedVMCallback = new PieceRemovedVMDelegate (pieceremoved_cb);
			OverrideVirtualMethod (gtype, "piece-removed", PieceRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.FunctionPolynomial), ConnectionMethod="OverridePieceRemoved")]
		protected virtual void OnPieceRemoved (Cdn.FunctionPolynomialPiece piece)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (piece);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("piece-removed")]
		public event Cdn.PieceRemovedHandler PieceRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "piece-removed", typeof (Cdn.PieceRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "piece-removed", typeof (Cdn.PieceRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_function_polynomial_remove(IntPtr raw, IntPtr piece);

		public bool Remove(Cdn.FunctionPolynomialPiece piece) {
			bool raw_ret = cdn_function_polynomial_remove(Handle, piece == null ? IntPtr.Zero : piece.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_function_polynomial_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_function_polynomial_add(IntPtr raw, IntPtr piece);

		public bool Add(Cdn.FunctionPolynomialPiece piece) {
			bool raw_ret = cdn_function_polynomial_add(Handle, piece == null ? IntPtr.Zero : piece.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_function_polynomial_clear_pieces(IntPtr raw);

		public void ClearPieces() {
			cdn_function_polynomial_clear_pieces(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_get_pieces(IntPtr raw);

		public Cdn.FunctionPolynomialPiece[] Pieces { 
			get {
				IntPtr raw_ret = cdn_function_polynomial_get_pieces(Handle);
				Cdn.FunctionPolynomialPiece[] ret = (Cdn.FunctionPolynomialPiece[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.FunctionPolynomialPiece));
				return ret;
			}
		}

#endregion
	}
}
