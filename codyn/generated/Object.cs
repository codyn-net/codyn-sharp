// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Object : GLib.Object {

		[Obsolete]
		protected Object(GLib.GType gtype) : base(gtype) {}
		public Object(IntPtr raw) : base(raw) {}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_new(IntPtr id);

		public Object (string id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Object)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			Raw = cdn_object_new(native_id);
			GLib.Marshaller.Free (native_id);
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_object_get_auto_imported(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_object_set_auto_imported(IntPtr raw, bool auto_imported);

		[GLib.Property ("auto-imported")]
		public bool AutoImported {
			get  {
				bool raw_ret = cdn_object_get_auto_imported(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				cdn_object_set_auto_imported(Handle, value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_parent(IntPtr raw);

		[GLib.Property ("parent")]
		public Cdn.Node Parent {
			get  {
				IntPtr raw_ret = cdn_object_get_parent(Handle);
				Cdn.Node ret = GLib.Object.GetObject(raw_ret) as Cdn.Node;
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_id(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_object_set_id(IntPtr raw, IntPtr id);

		[GLib.Property ("id")]
		public string Id {
			get  {
				IntPtr raw_ret = cdn_object_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cdn_object_set_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ResettedVMDelegate (IntPtr objekt);

		static ResettedVMDelegate ResettedVMCallback;

		static void resetted_cb (IntPtr objekt)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnResetted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideResetted (GLib.GType gtype)
		{
			if (ResettedVMCallback == null)
				ResettedVMCallback = new ResettedVMDelegate (resetted_cb);
			OverrideVirtualMethod (gtype, "resetted", ResettedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideResetted")]
		protected virtual void OnResetted ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("resetted")]
		public event System.EventHandler Resetted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "resetted");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "resetted");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void CompiledVMDelegate (IntPtr objekt);

		static CompiledVMDelegate CompiledVMCallback;

		static void compiled_cb (IntPtr objekt)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnCompiled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCompiled (GLib.GType gtype)
		{
			if (CompiledVMCallback == null)
				CompiledVMCallback = new CompiledVMDelegate (compiled_cb);
			OverrideVirtualMethod (gtype, "compiled", CompiledVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideCompiled")]
		protected virtual void OnCompiled ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("compiled")]
		public event System.EventHandler Compiled {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "compiled");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "compiled");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void VariableRemovedVMDelegate (IntPtr objekt, IntPtr variable);

		static VariableRemovedVMDelegate VariableRemovedVMCallback;

		static void variableremoved_cb (IntPtr objekt, IntPtr variable)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnVariableRemoved (GLib.Object.GetObject(variable) as Cdn.Variable);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVariableRemoved (GLib.GType gtype)
		{
			if (VariableRemovedVMCallback == null)
				VariableRemovedVMCallback = new VariableRemovedVMDelegate (variableremoved_cb);
			OverrideVirtualMethod (gtype, "variable-removed", VariableRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideVariableRemoved")]
		protected virtual void OnVariableRemoved (Cdn.Variable variable)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (variable);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("variable-removed")]
		public event Cdn.VariableRemovedHandler VariableRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "variable-removed", typeof (Cdn.VariableRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "variable-removed", typeof (Cdn.VariableRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void CopiedVMDelegate (IntPtr objekt, IntPtr copy);

		static CopiedVMDelegate CopiedVMCallback;

		static void copied_cb (IntPtr objekt, IntPtr copy)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnCopied (GLib.Object.GetObject(copy) as Cdn.Object);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCopied (GLib.GType gtype)
		{
			if (CopiedVMCallback == null)
				CopiedVMCallback = new CopiedVMDelegate (copied_cb);
			OverrideVirtualMethod (gtype, "copied", CopiedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideCopied")]
		protected virtual void OnCopied (Cdn.Object copy)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (copy);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("copied")]
		public event Cdn.CopiedHandler Copied {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "copied", typeof (Cdn.CopiedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "copied", typeof (Cdn.CopiedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void TemplateUnappliedVMDelegate (IntPtr objekt, IntPtr templ);

		static TemplateUnappliedVMDelegate TemplateUnappliedVMCallback;

		static void templateunapplied_cb (IntPtr objekt, IntPtr templ)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnTemplateUnapplied (GLib.Object.GetObject(templ) as Cdn.Object);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTemplateUnapplied (GLib.GType gtype)
		{
			if (TemplateUnappliedVMCallback == null)
				TemplateUnappliedVMCallback = new TemplateUnappliedVMDelegate (templateunapplied_cb);
			OverrideVirtualMethod (gtype, "template-unapplied", TemplateUnappliedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideTemplateUnapplied")]
		protected virtual void OnTemplateUnapplied (Cdn.Object templ)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (templ);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("template-unapplied")]
		public event Cdn.TemplateUnappliedHandler TemplateUnapplied {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "template-unapplied", typeof (Cdn.TemplateUnappliedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "template-unapplied", typeof (Cdn.TemplateUnappliedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void VariableAddedVMDelegate (IntPtr objekt, IntPtr variable);

		static VariableAddedVMDelegate VariableAddedVMCallback;

		static void variableadded_cb (IntPtr objekt, IntPtr variable)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnVariableAdded (GLib.Object.GetObject(variable) as Cdn.Variable);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVariableAdded (GLib.GType gtype)
		{
			if (VariableAddedVMCallback == null)
				VariableAddedVMCallback = new VariableAddedVMDelegate (variableadded_cb);
			OverrideVirtualMethod (gtype, "variable-added", VariableAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideVariableAdded")]
		protected virtual void OnVariableAdded (Cdn.Variable variable)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (variable);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("variable-added")]
		public event Cdn.VariableAddedHandler VariableAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "variable-added", typeof (Cdn.VariableAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "variable-added", typeof (Cdn.VariableAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void TemplateAppliedVMDelegate (IntPtr objekt, IntPtr templ);

		static TemplateAppliedVMDelegate TemplateAppliedVMCallback;

		static void templateapplied_cb (IntPtr objekt, IntPtr templ)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnTemplateApplied (GLib.Object.GetObject(templ) as Cdn.Object);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTemplateApplied (GLib.GType gtype)
		{
			if (TemplateAppliedVMCallback == null)
				TemplateAppliedVMCallback = new TemplateAppliedVMDelegate (templateapplied_cb);
			OverrideVirtualMethod (gtype, "template-applied", TemplateAppliedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideTemplateApplied")]
		protected virtual void OnTemplateApplied (Cdn.Object templ)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (templ);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("template-applied")]
		public event Cdn.TemplateAppliedHandler TemplateApplied {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "template-applied", typeof (Cdn.TemplateAppliedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "template-applied", typeof (Cdn.TemplateAppliedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void TaintedVMDelegate (IntPtr objekt);

		static TaintedVMDelegate TaintedVMCallback;

		static void tainted_cb (IntPtr objekt)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnTainted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTainted (GLib.GType gtype)
		{
			if (TaintedVMCallback == null)
				TaintedVMCallback = new TaintedVMDelegate (tainted_cb);
			OverrideVirtualMethod (gtype, "tainted", TaintedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cdn.Object), ConnectionMethod="OverrideTainted")]
		protected virtual void OnTainted ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("tainted")]
		public event System.EventHandler Tainted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tainted");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tainted");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_template_applies_to(IntPtr raw);

		public Cdn.Object[] TemplateAppliesTo { 
			get {
				IntPtr raw_ret = cdn_object_get_template_applies_to(Handle);
				Cdn.Object[] ret = (Cdn.Object[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.Object));
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_relative_id(IntPtr raw, IntPtr parent);

		public string GetRelativeId(Cdn.Node parent) {
			IntPtr raw_ret = cdn_object_get_relative_id(Handle, parent == null ? IntPtr.Zero : parent.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_variables(IntPtr raw);

		public Cdn.Variable[] Variables { 
			get {
				IntPtr raw_ret = cdn_object_get_variables(Handle);
				Cdn.Variable[] ret = (Cdn.Variable[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.Variable));
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_object_reset(IntPtr raw);

		public void Reset() {
			cdn_object_reset(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_object_apply_template(IntPtr raw, IntPtr templ, out IntPtr error);

		public unsafe bool ApplyTemplate(Cdn.Object templ) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_object_apply_template(Handle, templ == null ? IntPtr.Zero : templ.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_variable_template(IntPtr raw, IntPtr variable, bool match_full);

		public Cdn.Object GetVariableTemplate(Cdn.Variable variable, bool match_full) {
			IntPtr raw_ret = cdn_object_get_variable_template(Handle, variable == null ? IntPtr.Zero : variable.Handle, match_full);
			Cdn.Object ret = GLib.Object.GetObject(raw_ret) as Cdn.Object;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_object_is_compiled(IntPtr raw);

		public bool IsCompiled { 
			get {
				bool raw_ret = cdn_object_is_compiled(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_variable(IntPtr raw, IntPtr name);

		public Cdn.Variable Variable(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cdn_object_get_variable(Handle, native_name);
			Cdn.Variable ret = GLib.Object.GetObject(raw_ret) as Cdn.Variable;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_object_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_full_id_for_display(IntPtr raw);

		public string FullIdForDisplay { 
			get {
				IntPtr raw_ret = cdn_object_get_full_id_for_display(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_copy(IntPtr raw);

		public Cdn.Object Copy() {
			IntPtr raw_ret = cdn_object_copy(Handle);
			Cdn.Object ret = GLib.Object.GetObject(raw_ret, true) as Cdn.Object;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_new_from_template(IntPtr raw);

		public Cdn.Object CopyAsTemplate() {
			IntPtr raw_ret = cdn_object_new_from_template(Handle);
			Cdn.Object ret = GLib.Object.GetObject(raw_ret, true) as Cdn.Object;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_object_remove_variable(IntPtr raw, IntPtr name, out IntPtr error);

		public unsafe bool RemoveVariable(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_object_remove_variable(Handle, native_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_object_foreach_expression(IntPtr raw, CdnSharp.ForeachExpressionFuncNative func, IntPtr userdata);

		public void ForeachExpression(Cdn.ForeachExpressionFunc func) {
			CdnSharp.ForeachExpressionFuncWrapper func_wrapper = new CdnSharp.ForeachExpressionFuncWrapper (func);
			cdn_object_foreach_expression(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_object_equal(IntPtr raw, IntPtr second);

		public bool Equal(Cdn.Object second) {
			bool raw_ret = cdn_object_equal(Handle, second == null ? IntPtr.Zero : second.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_object_taint(IntPtr raw);

		public void Taint() {
			cdn_object_taint(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_relative_id_for_display(IntPtr raw, IntPtr parent);

		public string GetRelativeIdForDisplay(Cdn.Node parent) {
			IntPtr raw_ret = cdn_object_get_relative_id_for_display(Handle, parent == null ? IntPtr.Zero : parent.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_object_clear(IntPtr raw);

		public void Clear() {
			cdn_object_clear(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_object_unapply_template(IntPtr raw, IntPtr templ, out IntPtr error);

		public unsafe bool UnapplyTemplate(Cdn.Object templ) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_object_unapply_template(Handle, templ == null ? IntPtr.Zero : templ.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_object_verify_remove_variable(IntPtr raw, IntPtr name, out IntPtr error);

		public unsafe bool VerifyRemoveVariable(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_object_verify_remove_variable(Handle, native_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_full_id(IntPtr raw);

		public string FullId { 
			get {
				IntPtr raw_ret = cdn_object_get_full_id(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_applied_templates(IntPtr raw);

		public Cdn.Object[] AppliedTemplates { 
			get {
				IntPtr raw_ret = cdn_object_get_applied_templates(Handle);
				Cdn.Object[] ret = (Cdn.Object[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.Object));
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_object_add_variable(IntPtr raw, IntPtr variable, out IntPtr error);

		public unsafe bool AddVariable(Cdn.Variable variable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_object_add_variable(Handle, variable == null ? IntPtr.Zero : variable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern int cdn_object_error_quark();

		public static int ErrorQuark() {
			int raw_ret = cdn_object_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_object_has_variable(IntPtr raw, IntPtr name);

		public bool HasVariable(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = cdn_object_has_variable(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_object_compile(IntPtr raw, IntPtr context, IntPtr error);

		public bool Compile(Cdn.CompileContext context, Cdn.CompileError error) {
			bool raw_ret = cdn_object_compile(Handle, context == null ? IntPtr.Zero : context.Handle, error == null ? IntPtr.Zero : error.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_object_get_compile_context(IntPtr raw, IntPtr context);

		public Cdn.CompileContext GetCompileContext(Cdn.CompileContext context) {
			IntPtr raw_ret = cdn_object_get_compile_context(Handle, context == null ? IntPtr.Zero : context.Handle);
			Cdn.CompileContext ret = GLib.Object.GetObject(raw_ret) as Cdn.CompileContext;
			return ret;
		}

#endregion
	}
}
