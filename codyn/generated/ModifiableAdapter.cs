// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ModifiableAdapter : GLib.GInterfaceAdapter, Cdn.Modifiable {

		static ModifiableIface iface;

		struct ModifiableIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetModifiedDelegate get_modified;
			public SetModifiedDelegate set_modified;
		}

		static ModifiableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(ModifiableAdapter));
			iface.get_modified = new GetModifiedDelegate (GetModifiedCallback);
			iface.set_modified = new SetModifiedDelegate (SetModifiedCallback);
		}


		[GLib.CDeclCallback]
		delegate bool GetModifiedDelegate (IntPtr modifiable);

		static bool GetModifiedCallback (IntPtr modifiable)
		{
			try {
				Cdn.ModifiableImplementor __obj = GLib.Object.GetObject (modifiable, false) as Cdn.ModifiableImplementor;
				bool __result = __obj.Modified;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void SetModifiedDelegate (IntPtr modifiable, bool modified);

		static void SetModifiedCallback (IntPtr modifiable, bool modified)
		{
			try {
				Cdn.ModifiableImplementor __obj = GLib.Object.GetObject (modifiable, false) as Cdn.ModifiableImplementor;
				__obj.Modified = modified;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ModifiableIface native_iface = (ModifiableIface) Marshal.PtrToStructure (ifaceptr, typeof (ModifiableIface));
			native_iface.get_modified = iface.get_modified;
			native_iface.set_modified = iface.set_modified;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ModifiableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ModifiableImplementor implementor;

		public ModifiableAdapter (ModifiableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public ModifiableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_modifiable_get_type();

		private static GLib.GType _gtype = new GLib.GType (cdn_modifiable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Modifiable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Modifiable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ModifiableImplementor)
				return new ModifiableAdapter (obj as ModifiableImplementor);
			else if (obj as Modifiable == null)
				return new ModifiableAdapter (obj.Handle);
			else
				return obj as Modifiable;
		}

		public ModifiableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_modifiable_get_modified(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_modifiable_set_modified(IntPtr raw, bool modified);

		public bool Modified { 
			get {
				bool raw_ret = cdn_modifiable_get_modified(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cdn_modifiable_set_modified(Handle, value);
			}
		}

#endregion
	}
}
