// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace CdnSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void TaggableForeachFuncNative(IntPtr taggable, IntPtr key, IntPtr value, IntPtr userdata);

	internal class TaggableForeachFuncInvoker {

		TaggableForeachFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TaggableForeachFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TaggableForeachFuncInvoker (TaggableForeachFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TaggableForeachFuncInvoker (TaggableForeachFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TaggableForeachFuncInvoker (TaggableForeachFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Cdn.TaggableForeachFunc Handler {
			get {
				return new Cdn.TaggableForeachFunc(InvokeNative);
			}
		}

		void InvokeNative (Cdn.Taggable taggable, string key, string value)
		{
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
			native_cb (taggable == null ? IntPtr.Zero : taggable.Handle, native_key, native_value, __data);
			GLib.Marshaller.Free (native_key);
			GLib.Marshaller.Free (native_value);
		}
	}

	internal class TaggableForeachFuncWrapper {

		public void NativeCallback (IntPtr taggable, IntPtr key, IntPtr value, IntPtr userdata)
		{
			try {
				managed (Cdn.TaggableAdapter.GetObject (taggable, false), GLib.Marshaller.Utf8PtrToString (key), GLib.Marshaller.Utf8PtrToString (value));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TaggableForeachFuncNative NativeDelegate;
		Cdn.TaggableForeachFunc managed;

		public TaggableForeachFuncWrapper (Cdn.TaggableForeachFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TaggableForeachFuncNative (NativeCallback);
		}

		public static Cdn.TaggableForeachFunc GetManagedDelegate (TaggableForeachFuncNative native)
		{
			if (native == null)
				return null;
			TaggableForeachFuncWrapper wrapper = (TaggableForeachFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
