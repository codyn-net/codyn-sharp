// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class StatementAdapter : GLib.GInterfaceAdapter, Cdn.Statement {

		static StatementIface iface;

		struct StatementIface {
			public IntPtr gtype;
			public IntPtr itype;

		}

		static StatementAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(StatementAdapter));
		}

		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			StatementIface native_iface = (StatementIface) Marshal.PtrToStructure (ifaceptr, typeof (StatementIface));
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public StatementAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		StatementImplementor implementor;

		public StatementAdapter (StatementImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public StatementAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_statement_get_type();

		private static GLib.GType _gtype = new GLib.GType (cdn_statement_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Statement GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Statement GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is StatementImplementor)
				return new StatementAdapter (obj as StatementImplementor);
			else if (obj as Statement == null)
				return new StatementAdapter (obj.Handle);
			else
				return obj as Statement;
		}

		public StatementImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_statement_set_column(IntPtr raw, int start, int end);

		public void SetColumn(int start, int end) {
			cdn_statement_set_column(Handle, start, end);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_statement_get_column(IntPtr raw, out int start, out int end);

		public void GetColumn(out int start, out int end) {
			cdn_statement_get_column(Handle, out start, out end);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_statement_set_line(IntPtr raw, int start, int end);

		public void SetLine(int start, int end) {
			cdn_statement_set_line(Handle, start, end);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_statement_get_line(IntPtr raw, out int start, out int end);

		public void GetLine(out int start, out int end) {
			cdn_statement_get_line(Handle, out start, out end);
		}

#endregion
	}
}
