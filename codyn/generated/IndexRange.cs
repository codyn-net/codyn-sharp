// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct IndexRange {

		public int Start;
		public int Step;
		public int End;

		public static Cdn.IndexRange Zero = new Cdn.IndexRange ();

		public static Cdn.IndexRange New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Cdn.IndexRange.Zero;
			return (Cdn.IndexRange) Marshal.PtrToStructure (raw, typeof (Cdn.IndexRange));
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_index_range_n(IntPtr raw);

		public int N() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			int raw_ret = cdn_index_range_n(this_as_native);
			int ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_index_range_equal(IntPtr raw, IntPtr b);

		public bool Equal(Cdn.IndexRange b) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_b = GLib.Marshaller.StructureToPtrAlloc (b);
			bool raw_ret = cdn_index_range_equal(this_as_native, native_b);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			b = Cdn.IndexRange.New (native_b);
			Marshal.FreeHGlobal (native_b);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Cdn.IndexRange target)
		{
			target = New (native);
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
