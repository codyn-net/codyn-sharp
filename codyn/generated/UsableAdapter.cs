// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class UsableAdapter : GLib.GInterfaceAdapter, Cdn.Usable {

		static UsableIface iface;

		struct UsableIface {
			public IntPtr gtype;
			public IntPtr itype;

			public UseCountDelegate use_count;
			public UseDelegate use;
			public UnuseDelegate unuse;
		}

		static UsableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(UsableAdapter));
			iface.use_count = new UseCountDelegate (UseCountCallback);
			iface.use = new UseDelegate (UseCallback);
			iface.unuse = new UnuseDelegate (UnuseCallback);
		}


		[GLib.CDeclCallback]
		delegate uint UseCountDelegate (IntPtr self);

		static uint UseCountCallback (IntPtr self)
		{
			try {
				Cdn.UsableImplementor __obj = GLib.Object.GetObject (self, false) as Cdn.UsableImplementor;
				uint __result = __obj.UseCount ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void UseDelegate (IntPtr self);

		static void UseCallback (IntPtr self)
		{
			try {
				Cdn.UsableImplementor __obj = GLib.Object.GetObject (self, false) as Cdn.UsableImplementor;
				__obj.Use ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate bool UnuseDelegate (IntPtr self);

		static bool UnuseCallback (IntPtr self)
		{
			try {
				Cdn.UsableImplementor __obj = GLib.Object.GetObject (self, false) as Cdn.UsableImplementor;
				bool __result = __obj.Unuse ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			UsableIface native_iface = (UsableIface) Marshal.PtrToStructure (ifaceptr, typeof (UsableIface));
			native_iface.use_count = iface.use_count;
			native_iface.use = iface.use;
			native_iface.unuse = iface.unuse;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public UsableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		UsableImplementor implementor;

		public UsableAdapter (UsableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public UsableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_usable_get_type();

		private static GLib.GType _gtype = new GLib.GType (cdn_usable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Usable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Usable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is UsableImplementor)
				return new UsableAdapter (obj as UsableImplementor);
			else if (obj as Usable == null)
				return new UsableAdapter (obj.Handle);
			else
				return obj as Usable;
		}

		public UsableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_usable_use(IntPtr raw);

		public void Use() {
			cdn_usable_use(Handle);
		}

		[DllImport("codyn-3.0")]
		static extern uint cdn_usable_use_count(IntPtr raw);

		public uint UseCount() {
			uint raw_ret = cdn_usable_use_count(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_usable_unuse(IntPtr raw);

		public bool Unuse() {
			bool raw_ret = cdn_usable_unuse(Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
