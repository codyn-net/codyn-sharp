// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class VariableInterface : GLib.Opaque {

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_variable_interface_remove(IntPtr raw, IntPtr name, out IntPtr error);

		public unsafe bool Remove(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_variable_interface_remove(Handle, native_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_interface_lookup_variable_name(IntPtr raw, IntPtr name);

		public string LookupVariableName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cdn_variable_interface_lookup_variable_name(Handle, native_name);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_interface_lookup(IntPtr raw, IntPtr name);

		public Cdn.Variable Lookup(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cdn_variable_interface_lookup(Handle, native_name);
			Cdn.Variable ret = raw_ret == IntPtr.Zero ? null : (Cdn.Variable) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Variable), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_interface_get_names(IntPtr raw);

		public string Names { 
			get {
				IntPtr raw_ret = cdn_variable_interface_get_names(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_interface_lookup_child_name(IntPtr raw, IntPtr name);

		public string LookupChildName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cdn_variable_interface_lookup_child_name(Handle, native_name);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern int cdn_variable_interface_error_quark();

		public static int ErrorQuark() {
			int raw_ret = cdn_variable_interface_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern unsafe bool cdn_variable_interface_add(IntPtr raw, IntPtr name, IntPtr child_name, IntPtr property_name, out IntPtr error);

		public unsafe bool Add(string name, string child_name, string property_name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_child_name = GLib.Marshaller.StringToPtrGStrdup (child_name);
			IntPtr native_property_name = GLib.Marshaller.StringToPtrGStrdup (property_name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cdn_variable_interface_add(Handle, native_name, native_child_name, native_property_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_child_name);
			GLib.Marshaller.Free (native_property_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_variable_interface_implements(IntPtr raw, IntPtr name);

		public bool Implements(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = cdn_variable_interface_implements(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_interface_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_variable_interface_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public VariableInterface(IntPtr raw) : base(raw) {}

#endregion
	}
}
