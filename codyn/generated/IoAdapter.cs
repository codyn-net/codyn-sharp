// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class IoAdapter : GLib.GInterfaceAdapter, Cdn.Io {

		static IoIface iface;

		struct IoIface {
			public IntPtr gtype;
			public IntPtr itype;

			public UpdateDelegate update;
		}

		static IoAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(IoAdapter));
			iface.update = new UpdateDelegate (UpdateCallback);
		}


		[GLib.CDeclCallback]
		delegate void UpdateDelegate (IntPtr io, IntPtr integrator);

		static void UpdateCallback (IntPtr io, IntPtr integrator)
		{
			try {
				Cdn.IoImplementor __obj = GLib.Object.GetObject (io, false) as Cdn.IoImplementor;
				__obj.Update (GLib.Object.GetObject(integrator) as Cdn.Integrator);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			IoIface native_iface = (IoIface) Marshal.PtrToStructure (ifaceptr, typeof (IoIface));
			native_iface.update = iface.update;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public IoAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		IoImplementor implementor;

		public IoAdapter (IoImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public IoAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_io_get_type();

		private static GLib.GType _gtype = new GLib.GType (cdn_io_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Io GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Io GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is IoImplementor)
				return new IoAdapter (obj as IoImplementor);
			else if (obj as Io == null)
				return new IoAdapter (obj.Handle);
			else
				return obj as Io;
		}

		public IoImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_io_update(IntPtr raw, IntPtr integrator);

		public void Update(Cdn.Integrator integrator) {
			cdn_io_update(Handle, integrator == null ? IntPtr.Zero : integrator.Handle);
		}

		[DllImport("codyn-3.0")]
		static extern int cdn_io_get_mode(IntPtr raw);

		public Cdn.IoMode Mode { 
			get {
				int raw_ret = cdn_io_get_mode(Handle);
				Cdn.IoMode ret = (Cdn.IoMode) raw_ret;
				return ret;
			}
		}

#endregion
	}
}
