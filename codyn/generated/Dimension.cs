// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Dimension {

		public int Rows;
		public int Columns;

		public static Cdn.Dimension Zero = new Cdn.Dimension ();

		public static Cdn.Dimension New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Cdn.Dimension.Zero;
			return (Cdn.Dimension) Marshal.PtrToStructure (raw, typeof (Cdn.Dimension));
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_dimension_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_dimension_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_dimension_is_one(IntPtr raw);

		public bool IsOne { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool raw_ret = cdn_dimension_is_one(this_as_native);
				bool ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_dimension_size(IntPtr raw);

		public int Size() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			int raw_ret = cdn_dimension_size(this_as_native);
			int ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_dimension_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cdn.Dimension other) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_other = GLib.Marshaller.StructureToPtrAlloc (other);
			bool raw_ret = cdn_dimension_equal(this_as_native, native_other);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			other = Cdn.Dimension.New (native_other);
			Marshal.FreeHGlobal (native_other);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Cdn.Dimension target)
		{
			target = New (native);
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Cdn.Dimension boxed);

		public static explicit operator GLib.Value (Cdn.Dimension boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Cdn.Dimension.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Cdn.Dimension (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}
}
