// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct StackManipulation {

		public int NumPop;
		private IntPtr _pop_dims;
		public int NumPush;
		private IntPtr _push_dims;
		public int ExtraSpace;

		public static Cdn.StackManipulation Zero = new Cdn.StackManipulation ();

		public static Cdn.StackManipulation New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Cdn.StackManipulation.Zero;
			return (Cdn.StackManipulation) Marshal.PtrToStructure (raw, typeof (Cdn.StackManipulation));
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_stack_manipulation_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_stack_manipulation_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Cdn.StackManipulation boxed);

		public static explicit operator GLib.Value (Cdn.StackManipulation boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Cdn.StackManipulation.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Cdn.StackManipulation (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}
}
