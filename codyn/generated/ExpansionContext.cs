// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ExpansionContext : GLib.Opaque {

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_shared_defines(IntPtr raw, IntPtr from);

		public void SharedDefines(Cdn.ExpansionContext from) {
			cdn_expansion_context_shared_defines(Handle, from == null ? IntPtr.Zero : from.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_get_expansions(IntPtr raw);

		public Cdn.Expansion[] Expansions { 
			get {
				IntPtr raw_ret = cdn_expansion_context_get_expansions(Handle);
				Cdn.Expansion[] ret = (Cdn.Expansion[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.Expansion));
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern unsafe IntPtr cdn_expansion_context_calculate(IntPtr raw, IntPtr equation, out IntPtr error);

		public unsafe string Calculate(string equation) {
			IntPtr native_equation = GLib.Marshaller.StringToPtrGStrdup (equation);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = cdn_expansion_context_calculate(Handle, native_equation, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_equation);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_add_expansions(IntPtr raw, IntPtr expansions);

		public void AddExpansions(GLib.SList expansions) {
			cdn_expansion_context_add_expansions(Handle, expansions == null ? IntPtr.Zero : expansions.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_add_defines(IntPtr raw, System.IntPtr defines);

		public void AddDefines(System.IntPtr defines) {
			cdn_expansion_context_add_defines(Handle, defines);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_get_local_expansions(IntPtr raw);

		public Cdn.Expansion[] LocalExpansions { 
			get {
				IntPtr raw_ret = cdn_expansion_context_get_local_expansions(Handle);
				Cdn.Expansion[] ret = (Cdn.Expansion[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cdn.Expansion));
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_truncate(IntPtr raw, IntPtr parent);

		public void Truncate(Cdn.ExpansionContext parent) {
			cdn_expansion_context_truncate(Handle, parent == null ? IntPtr.Zero : parent.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_merge(IntPtr raw, IntPtr other);

		public void Merge(Cdn.ExpansionContext other) {
			cdn_expansion_context_merge(Handle, other == null ? IntPtr.Zero : other.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_add_define(IntPtr raw, IntPtr name, IntPtr expansion);

		public void AddDefine(string name, Cdn.Expansion expansion) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			cdn_expansion_context_add_define(Handle, native_name, expansion == null ? IntPtr.Zero : expansion.Handle);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_get_define(IntPtr raw, IntPtr name);

		public Cdn.Expansion GetDefine(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cdn_expansion_context_get_define(Handle, native_name);
			Cdn.Expansion ret = raw_ret == IntPtr.Zero ? null : (Cdn.Expansion) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Expansion), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_expansion_context_increment_define(IntPtr raw, IntPtr name, int exidx, int num);

		public int IncrementDefine(string name, int exidx, int num) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = cdn_expansion_context_increment_define(Handle, native_name, exidx, num);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern System.IntPtr cdn_expansion_context_get_local_defines(IntPtr raw);

		public System.IntPtr LocalDefines { 
			get {
				System.IntPtr raw_ret = cdn_expansion_context_get_local_defines(Handle);
				System.IntPtr ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_add_expansion(IntPtr raw, IntPtr expansion);

		public void AddExpansion(Cdn.Expansion expansion) {
			cdn_expansion_context_add_expansion(Handle, expansion == null ? IntPtr.Zero : expansion.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern UIntPtr cdn_expansion_context_get_marker(IntPtr raw);

		public ulong Marker { 
			get {
				UIntPtr raw_ret = cdn_expansion_context_get_marker(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_remove_expansion(IntPtr raw, IntPtr expansion);

		public void RemoveExpansion(Cdn.Expansion expansion) {
			cdn_expansion_context_remove_expansion(Handle, expansion == null ? IntPtr.Zero : expansion.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_get_expansion(IntPtr raw, int depth);

		public Cdn.Expansion GetExpansion(int depth) {
			IntPtr raw_ret = cdn_expansion_context_get_expansion(Handle, depth);
			Cdn.Expansion ret = raw_ret == IntPtr.Zero ? null : (Cdn.Expansion) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Expansion), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_expansion_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_get_parent(IntPtr raw);

		public Cdn.ExpansionContext Parent { 
			get {
				IntPtr raw_ret = cdn_expansion_context_get_parent(Handle);
				Cdn.ExpansionContext ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpansionContext) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpansionContext), false);
				return ret;
			}
		}

		public ExpansionContext(IntPtr raw) : base(raw) {}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_new(IntPtr context);

		public ExpansionContext (Cdn.ExpansionContext context) 
		{
			Raw = cdn_expansion_context_new(context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_new_unreffed(IntPtr context);

		public static ExpansionContext NewUnreffed(Cdn.ExpansionContext context)
		{
			ExpansionContext result = new ExpansionContext (cdn_expansion_context_new_unreffed(context == null ? IntPtr.Zero : context.Handle));
			return result;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expansion_context_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				cdn_expansion_context_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expansion_context_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				cdn_expansion_context_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				cdn_expansion_context_unref (handle);
				return false;
			}
		}

		~ExpansionContext ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
