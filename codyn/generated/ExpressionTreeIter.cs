// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ExpressionTreeIter : GLib.Opaque {

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_substitute(IntPtr raw, IntPtr property, IntPtr subst);

		public Cdn.ExpressionTreeIter Substitute(Cdn.Variable property, Cdn.ExpressionTreeIter subst) {
			IntPtr raw_ret = cdn_expression_tree_iter_substitute(Handle, property == null ? IntPtr.Zero : property.Handle, subst == null ? IntPtr.Zero : subst.Handle);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_expression_tree_iter_get_num_children(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_set_num_children(IntPtr raw, int i);

		public int NumChildren { 
			get {
				int raw_ret = cdn_expression_tree_iter_get_num_children(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				cdn_expression_tree_iter_set_num_children(Handle, value);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_to_expression(IntPtr raw);

		public Cdn.Expression ToExpression() {
			IntPtr raw_ret = cdn_expression_tree_iter_to_expression(Handle);
			Cdn.Expression ret = GLib.Object.GetObject(raw_ret) as Cdn.Expression;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern bool cdn_expression_tree_iter_equal(IntPtr raw, IntPtr other, bool asstring);

		public bool Equal(Cdn.ExpressionTreeIter other, bool asstring) {
			bool raw_ret = cdn_expression_tree_iter_equal(Handle, other == null ? IntPtr.Zero : other.Handle, asstring);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_to_string_dbg(IntPtr raw);

		public string ToStringDbg() {
			IntPtr raw_ret = cdn_expression_tree_iter_to_string_dbg(Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_set_child(IntPtr raw, int nth, IntPtr child);

		public void SetChild(int nth, Cdn.ExpressionTreeIter child) {
			cdn_expression_tree_iter_set_child(Handle, nth, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_to_instructions(IntPtr raw);

		public GLib.SList ToInstructions() {
			IntPtr raw_ret = cdn_expression_tree_iter_to_instructions(Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_canonicalize(IntPtr raw);

		public Cdn.ExpressionTreeIter Canonicalize() {
			IntPtr raw_ret = cdn_expression_tree_iter_canonicalize(Handle);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_get_child(IntPtr raw, int nth);

		public Cdn.ExpressionTreeIter GetChild(int nth) {
			IntPtr raw_ret = cdn_expression_tree_iter_get_child(Handle, nth);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern int cdn_expression_tree_iter_derive_error_quark();

		public static int DeriveErrorQuark() {
			int raw_ret = cdn_expression_tree_iter_derive_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_simplify(IntPtr raw);

		public Cdn.ExpressionTreeIter Simplify() {
			IntPtr raw_ret = cdn_expression_tree_iter_simplify(Handle);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_take_child(IntPtr raw, int nth, IntPtr child);

		public void TakeChild(int nth, Cdn.ExpressionTreeIter child) {
			cdn_expression_tree_iter_take_child(Handle, nth, child == null ? IntPtr.Zero : child.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern unsafe IntPtr cdn_expression_tree_iter_solve_for(IntPtr raw, IntPtr prop, out IntPtr error);

		public unsafe Cdn.ExpressionTreeIter SolveFor(Cdn.Variable prop) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = cdn_expression_tree_iter_solve_for(Handle, prop == null ? IntPtr.Zero : prop.Handle, out error);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_initialize_stack(IntPtr raw, IntPtr stack);

		public void InitializeStack(Cdn.Stack stack) {
			cdn_expression_tree_iter_initialize_stack(Handle, stack == null ? IntPtr.Zero : stack.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = cdn_expression_tree_iter_to_string(Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_substitute_hash(IntPtr raw, System.IntPtr table);

		public Cdn.ExpressionTreeIter SubstituteHash(System.IntPtr table) {
			IntPtr raw_ret = cdn_expression_tree_iter_substitute_hash(Handle, table);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_swap_children(IntPtr raw, int first, int second);

		public void SwapChildren(int first, int second) {
			cdn_expression_tree_iter_swap_children(Handle, first, second);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_expression_tree_iter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern unsafe IntPtr cdn_expression_tree_iter_derive(IntPtr raw, IntPtr symbols, System.IntPtr towards, int order, int flags, out IntPtr error);

		public unsafe Cdn.ExpressionTreeIter Derive(GLib.SList symbols, System.IntPtr towards, int order, Cdn.ExpressionTreeIterDeriveFlags flags) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = cdn_expression_tree_iter_derive(Handle, symbols == null ? IntPtr.Zero : symbols.Handle, towards, order, (int) flags, out error);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), false);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_copy(IntPtr raw);

		public Cdn.ExpressionTreeIter Copy() {
			IntPtr raw_ret = cdn_expression_tree_iter_copy(Handle);
			Cdn.ExpressionTreeIter ret = raw_ret == IntPtr.Zero ? null : (Cdn.ExpressionTreeIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.ExpressionTreeIter), true);
			return ret;
		}

		public ExpressionTreeIter(IntPtr raw) : base(raw) {}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_new(IntPtr expression);

		public ExpressionTreeIter (Cdn.Expression expression) 
		{
			Raw = cdn_expression_tree_iter_new(expression == null ? IntPtr.Zero : expression.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_new_from_instruction(IntPtr instruction);

		public ExpressionTreeIter (Cdn.Instruction instruction) 
		{
			Raw = cdn_expression_tree_iter_new_from_instruction(instruction == null ? IntPtr.Zero : instruction.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_new_from_instruction_take(IntPtr instruction);

		public static ExpressionTreeIter NewFromInstructionTake(Cdn.Instruction instruction)
		{
			ExpressionTreeIter result = new ExpressionTreeIter (cdn_expression_tree_iter_new_from_instruction_take(instruction == null ? IntPtr.Zero : instruction.Handle));
			return result;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_new_from_instructions(IntPtr instructions);

		public ExpressionTreeIter (GLib.SList instructions) 
		{
			Raw = cdn_expression_tree_iter_new_from_instructions(instructions == null ? IntPtr.Zero : instructions.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			cdn_expression_tree_iter_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				cdn_expression_tree_iter_free (handle);
				return false;
			}
		}

		~ExpressionTreeIter ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
#region Customized extensions
#line 1 "ExpressionTreeIter.custom"
		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_expression_tree_iter_get_instruction(IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_expression_tree_iter_set_instruction(IntPtr raw, IntPtr instruction);

		public Cdn.Instruction Instruction
		{
			get
			{
				IntPtr raw_ret = cdn_expression_tree_iter_get_instruction(Handle);

				return (Cdn.Instruction)MiniObject.GetObject(raw_ret);
			}
			set
			{
				cdn_expression_tree_iter_set_instruction(Handle, value.Handle);
			}
		}

#endregion
	}
}
