// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace CdnSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate bool MathStackManipulationFuncNative(int arguments, out int argdim, out int outargdim, out int extraspace, out IntPtr error);

	internal class MathStackManipulationFuncInvoker {

		MathStackManipulationFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~MathStackManipulationFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal MathStackManipulationFuncInvoker (MathStackManipulationFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal MathStackManipulationFuncInvoker (MathStackManipulationFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal MathStackManipulationFuncInvoker (MathStackManipulationFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Cdn.MathStackManipulationFunc Handler {
			get {
				return new Cdn.MathStackManipulationFunc(InvokeNative);
			}
		}

		bool InvokeNative (int arguments, out int argdim, out int outargdim, out int extraspace)
		{
			IntPtr error = IntPtr.Zero;
			bool result = native_cb (arguments, out argdim, out outargdim, out extraspace, out error);
			return result;
		}
	}

	internal class MathStackManipulationFuncWrapper {

		public bool NativeCallback (int arguments, out int argdim, out int outargdim, out int extraspace, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				bool __ret = managed (arguments, out argdim, out outargdim, out extraspace);
				if (release_on_call)
					gch.Free ();
				return __ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal MathStackManipulationFuncNative NativeDelegate;
		Cdn.MathStackManipulationFunc managed;

		public MathStackManipulationFuncWrapper (Cdn.MathStackManipulationFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new MathStackManipulationFuncNative (NativeCallback);
		}

		public static Cdn.MathStackManipulationFunc GetManagedDelegate (MathStackManipulationFuncNative native)
		{
			if (native == null)
				return null;
			MathStackManipulationFuncWrapper wrapper = (MathStackManipulationFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
