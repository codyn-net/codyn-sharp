// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct StackArg {

		public Cdn.Dimension Dimension;
		private IntPtr _sparsity;
		public uint NumSparse;

		public static Cdn.StackArg Zero = new Cdn.StackArg ();

		public static Cdn.StackArg New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Cdn.StackArg.Zero;
			return (Cdn.StackArg) Marshal.PtrToStructure (raw, typeof (Cdn.StackArg));
		}

		[DllImport("codyn-3.0")]
		static extern uint cdn_stack_arg_get_sparsity(IntPtr raw, out uint num_sparse);

		public uint GetSparsity(out uint num_sparse) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			uint raw_ret = cdn_stack_arg_get_sparsity(this_as_native, out num_sparse);
			uint ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_stack_arg_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_stack_arg_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern bool cdn_stack_arg_is_sparse(IntPtr raw, uint idx);

		public bool IsSparse(uint idx) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			bool raw_ret = cdn_stack_arg_is_sparse(this_as_native, idx);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_stack_arg_set_sparsity(IntPtr raw, out uint sparsity, uint num_sparse);

		public uint SetSparsity(uint num_sparse) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			uint sparsity;
			cdn_stack_arg_set_sparsity(this_as_native, out sparsity, num_sparse);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return sparsity;
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_stack_arg_set_sparsity_one(IntPtr raw, uint sparsity);

		public uint SparsityOne { 
			set {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				cdn_stack_arg_set_sparsity_one(this_as_native, value);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			}
		}

		[DllImport("codyn-3.0")]
		static extern uint cdn_stack_arg_size(IntPtr raw);

		public uint Size() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			uint raw_ret = cdn_stack_arg_size(this_as_native);
			uint ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Cdn.StackArg target)
		{
			target = New (native);
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Cdn.StackArg boxed);

		public static explicit operator GLib.Value (Cdn.StackArg boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Cdn.StackArg.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Cdn.StackArg (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}
}
