// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class StackArg : GLib.Opaque {

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_arg_copy(IntPtr raw, IntPtr src);

		public void Copy(Cdn.StackArg src) {
			cdn_stack_arg_copy(Handle, src == null ? IntPtr.Zero : src.Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_arg_get_dimension(IntPtr raw, IntPtr dim);

		public Cdn.Dimension Dimension { 
			get {
				Cdn.Dimension dim;
				IntPtr native_dim = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Cdn.Dimension)));
				cdn_stack_arg_get_dimension(Handle, native_dim);
				dim = Cdn.Dimension.New (native_dim);
				Marshal.FreeHGlobal (native_dim);
				return dim;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_stack_arg_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_stack_arg_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern uint cdn_stack_arg_size(IntPtr raw);

		public uint Size() {
			uint raw_ret = cdn_stack_arg_size(Handle);
			uint ret = raw_ret;
			return ret;
		}

		public StackArg(IntPtr raw) : base(raw) {}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_arg_destroy(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			cdn_stack_arg_destroy (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				cdn_stack_arg_destroy (handle);
				return false;
			}
		}

		~StackArg ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
