// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Expansion : GLib.Opaque {

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_insert(IntPtr raw, int idx, IntPtr item);

		public void Insert(int idx, string item) {
			IntPtr native_item = GLib.Marshaller.StringToPtrGStrdup (item);
			cdn_expansion_insert(Handle, idx, native_item);
			GLib.Marshaller.Free (native_item);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_prepend(IntPtr raw, IntPtr other, int idx);

		public void Prepend(Cdn.Expansion other, int idx) {
			cdn_expansion_prepend(Handle, other == null ? IntPtr.Zero : other.Handle, idx);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_set_index(IntPtr raw, int idx, int val);

		public void SetIndex(int idx, int val) {
			cdn_expansion_set_index(Handle, idx, val);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_set(IntPtr raw, int idx, IntPtr val);

		public void Set(int idx, string val) {
			IntPtr native_val = GLib.Marshaller.StringToPtrGStrdup (val);
			cdn_expansion_set(Handle, idx, native_val);
			GLib.Marshaller.Free (native_val);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_add(IntPtr raw, IntPtr item);

		public void Add(string item) {
			IntPtr native_item = GLib.Marshaller.StringToPtrGStrdup (item);
			cdn_expansion_add(Handle, native_item);
			GLib.Marshaller.Free (native_item);
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_append(IntPtr raw, IntPtr other, int idx);

		public void Append(Cdn.Expansion other, int idx) {
			cdn_expansion_append(Handle, other == null ? IntPtr.Zero : other.Handle, idx);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_get(IntPtr raw, int idx);

		public string Get(int idx) {
			IntPtr raw_ret = cdn_expansion_get(Handle, idx);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern int cdn_expansion_num(IntPtr raw);

		public int Num() {
			int raw_ret = cdn_expansion_num(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern int cdn_expansion_get_index(IntPtr raw, int idx);

		public int GetIndex(int idx) {
			int raw_ret = cdn_expansion_get_index(Handle, idx);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_expansion_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_copy(IntPtr raw);

		public Cdn.Expansion Copy() {
			IntPtr raw_ret = cdn_expansion_copy(Handle);
			Cdn.Expansion ret = raw_ret == IntPtr.Zero ? null : (Cdn.Expansion) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Expansion), true);
			return ret;
		}

		public Expansion(IntPtr raw) : base(raw) {}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_new(IntPtr items);

		public Expansion (string items) 
		{
			IntPtr native_items = GLib.Marshaller.StringToPtrGStrdup (items);
			Raw = cdn_expansion_new(native_items);
			GLib.Marshaller.Free (native_items);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_new_one(IntPtr item);

		public static Expansion NewOne(string item)
		{
			IntPtr native_item = GLib.Marshaller.StringToPtrGStrdup (item);
			Expansion result = new Expansion (cdn_expansion_new_one(native_item));
			GLib.Marshaller.Free (native_item);
			return result;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_new_sized(IntPtr items, int sized);

		public Expansion (string items, int sized) 
		{
			IntPtr native_items = GLib.Marshaller.StringToPtrGStrdup (items);
			Raw = cdn_expansion_new_sized(native_items, sized);
			GLib.Marshaller.Free (native_items);
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_expansion_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				cdn_expansion_ref (raw);
				Owned = true;
			}
		}

		[DllImport("codyn-3.0")]
		static extern void cdn_expansion_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				cdn_expansion_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				cdn_expansion_unref (handle);
				return false;
			}
		}

		~Expansion ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
