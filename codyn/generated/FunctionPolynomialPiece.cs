// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FunctionPolynomialPiece : GLib.InitiallyUnowned {

		[Obsolete]
		protected FunctionPolynomialPiece(GLib.GType gtype) : base(gtype) {}
		public FunctionPolynomialPiece(IntPtr raw) : base(raw) {}

		protected FunctionPolynomialPiece() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("codyn-3.0")]
		static extern double cdn_function_polynomial_piece_get_end(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_function_polynomial_piece_set_end(IntPtr raw, double end);

		[GLib.Property ("end")]
		public double End {
			get  {
				double raw_ret = cdn_function_polynomial_piece_get_end(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				cdn_function_polynomial_piece_set_end(Handle, value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern double cdn_function_polynomial_piece_get_begin(IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern void cdn_function_polynomial_piece_set_begin(IntPtr raw, double begin);

		[GLib.Property ("begin")]
		public double Begin {
			get  {
				double raw_ret = cdn_function_polynomial_piece_get_begin(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				cdn_function_polynomial_piece_set_begin(Handle, value);
			}
		}

		[DllImport("codyn-3.0")]
		static extern double cdn_function_polynomial_piece_evaluate(IntPtr raw, double t);

		public double Evaluate(double t) {
			double raw_ret = cdn_function_polynomial_piece_evaluate(Handle, t);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_piece_copy(IntPtr raw);

		public Cdn.FunctionPolynomialPiece Copy() {
			IntPtr raw_ret = cdn_function_polynomial_piece_copy(Handle);
			Cdn.FunctionPolynomialPiece ret = GLib.Object.GetObject(raw_ret, true) as Cdn.FunctionPolynomialPiece;
			return ret;
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_piece_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_function_polynomial_piece_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_piece_get_derivative(IntPtr raw, int order);

		public Cdn.FunctionPolynomialPiece GetDerivative(int order) {
			IntPtr raw_ret = cdn_function_polynomial_piece_get_derivative(Handle, order);
			Cdn.FunctionPolynomialPiece ret = GLib.Object.GetObject(raw_ret) as Cdn.FunctionPolynomialPiece;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "FunctionPolynomialPiece.custom"
		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_piece_get_coefficients(IntPtr raw, out uint num_coefficients);

		[DllImport("codyn-3.0")]
		static extern void cdn_function_polynomial_piece_set_coefficients(IntPtr raw, double[] coefficients, uint num_coefficients);

		public double[] Coefficients
		{
			get
			{
				uint num_coefficients;
				IntPtr ret = cdn_function_polynomial_piece_get_coefficients(Handle, out num_coefficients);

				double[] coefs = new double[num_coefficients];
				Marshal.Copy(ret, coefs, 0, (int)num_coefficients);

				return coefs;
			}
			set
			{
				uint len = value != null ? (uint)value.Length : 0;

				cdn_function_polynomial_piece_set_coefficients(Handle, value, len);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_piece_get_normalization(IntPtr raw, out uint num_coefficients);

		public double[] Normalization
		{
			get
			{
				uint num_coefficients;
				IntPtr ret = cdn_function_polynomial_piece_get_normalization(Handle, out num_coefficients);

				double[] coefs = new double[num_coefficients];
				Marshal.Copy(ret, coefs, 0, (int)num_coefficients);

				return coefs;
			}
		}

		[DllImport ("libgobject-2.0")]
		private static extern void g_object_ref_sink (IntPtr raw);

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_function_polynomial_piece_new(double begin, double end, double[] coefficients, uint num_coefficients);

		public FunctionPolynomialPiece (double begin, double end, params double[] coefficients) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FunctionPolynomialPiece)) {
				throw new InvalidOperationException (String.Format("Can't override this constructor {0}.", GetType()));
			}

			Raw = cdn_function_polynomial_piece_new(begin, end, coefficients, (uint)coefficients.Length);

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

#endregion
	}
}
