// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cdn {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Stack : GLib.Opaque {

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_set_at(IntPtr raw, int idx, double value);

		public void SetAt(int idx, double value) {
			cdn_stack_set_at(Handle, idx, value);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_stack_ptr(IntPtr raw);

		public double Ptr() {
			double raw_ret = cdn_stack_ptr(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_pushn(IntPtr raw, out double values, int num);

		public double Pushn(int num) {
			double values;
			cdn_stack_pushn(Handle, out values, num);
			return values;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_push(IntPtr raw, double value);

		public void Push(double value) {
			cdn_stack_push(Handle, value);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_reset(IntPtr raw);

		public void Reset() {
			cdn_stack_reset(Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_pushni(IntPtr raw, double value, int num);

		public void Pushni(double value, int num) {
			cdn_stack_pushni(Handle, value, num);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_init(IntPtr raw, uint size);

		public void Init(uint size) {
			cdn_stack_init(Handle, size);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_set(IntPtr raw, double value);

		public void Set(double value) {
			cdn_stack_set(Handle, value);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern uint cdn_stack_size(IntPtr raw);

		public uint Size() {
			uint raw_ret = cdn_stack_size(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_stack_at(IntPtr raw, int idx);

		public double At(int idx) {
			double raw_ret = cdn_stack_at(Handle, idx);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_destroy(IntPtr raw);

		public void Destroy() {
			cdn_stack_destroy(Handle);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_resize(IntPtr raw, uint size);

		public void Resize(uint size) {
			cdn_stack_resize(Handle, size);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_stack_peek(IntPtr raw);

		public double Peek() {
			double raw_ret = cdn_stack_peek(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_stack_popn(IntPtr raw, int num);

		public double Popn(int num) {
			double raw_ret = cdn_stack_popn(Handle, num);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern double cdn_stack_pop(IntPtr raw);

		public double Pop() {
			double raw_ret = cdn_stack_pop(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_stack_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cdn_stack_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern uint cdn_stack_count(IntPtr raw);

		public uint Count() {
			uint raw_ret = cdn_stack_count(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_stack_copy(IntPtr raw);

		public Cdn.Stack Copy() {
			IntPtr raw_ret = cdn_stack_copy(Handle);
			Cdn.Stack ret = raw_ret == IntPtr.Zero ? null : (Cdn.Stack) GLib.Opaque.GetOpaque (raw_ret, typeof (Cdn.Stack), true);
			return ret;
		}

		public Stack(IntPtr raw) : base(raw) {}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_stack_new(uint size);

		public Stack (uint size) 
		{
			Raw = cdn_stack_new(size);
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_stack_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			cdn_stack_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				cdn_stack_free (handle);
				return false;
			}
		}

		~Stack ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
