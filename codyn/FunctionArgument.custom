		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_function_argument_new(IntPtr name, IntPtr expression, bool isexplicit);

		[DllImport ("libgobject-2.0-0.dll")]
		private static extern void g_object_ref_sink (IntPtr raw);

		public FunctionArgument (string name, Cdn.Expression defaultValue, bool isexplicit) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FunctionArgument)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}

			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = cdn_function_argument_new(native_name, defaultValue != null ? defaultValue.Handle : IntPtr.Zero, isexplicit);
			GLib.Marshaller.Free (native_name);

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_function_argument_get_dimension(IntPtr raw,
		                                                       IntPtr dimension);

		[DllImport("libcodyn-3.0.dll")]
		static extern void cdn_function_argument_set_dimension(IntPtr raw,
		                                                       IntPtr value);

		public Cdn.Dimension Dimension
		{
			get
			{
				IntPtr native_dim = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Cdn.Dimension)));
				cdn_function_argument_get_dimension(Handle, native_dim);
				Cdn.Dimension ret = Cdn.Dimension.New (native_dim);
				Marshal.FreeHGlobal(native_dim);

				return ret;
			}
			set
			{
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				cdn_function_argument_set_dimension(Handle, native_value);
				value = Cdn.Dimension.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

