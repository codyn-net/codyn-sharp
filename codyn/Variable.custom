		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_new(IntPtr name, IntPtr expression, int flags);

		[DllImport ("libgobject-2.0")]
		private static extern void g_object_ref_sink (IntPtr raw);

		public Variable (string name, Cdn.Expression expression, Cdn.VariableFlags flags) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Variable)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				if (expression != null) {
					names.Add ("expression");
					vals.Add (new GLib.Value (expression));
				}
				names.Add ("flags");
				vals.Add (new GLib.Value (flags));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = cdn_variable_new(native_name, expression == null ? IntPtr.Zero : expression.Handle, (int) flags);
			GLib.Marshaller.Free (native_name);

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_copy(IntPtr raw);

		public Cdn.Variable Copy() {
			IntPtr raw_ret = cdn_variable_copy(Handle);

			if (raw_ret != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}

			Cdn.Variable ret = GLib.Object.GetObject(raw_ret, true) as Cdn.Variable;
			return ret;
		}


		[DllImport("codyn-3.0")]
		static extern IntPtr cdn_variable_get_values(IntPtr raw, out int numr, out int numc);

		public double[,] Values
		{
			get
			{
				int numr;
				int numc;
				double[] data;

				IntPtr raw_ret = cdn_variable_get_values(Handle, out numr, out numc);

				data = new double[numr * numc];
				Marshal.Copy(raw_ret, data, 0, numr * numc);

				double[,] ret = new double[numr, numc];
				int idx = 0;

				for (int r = 0; r < numr; ++r)
				{
					for (int c = 0; c < numc; ++c)
					{
						ret[r, c] = data[idx++];
					}
				}

				return ret;
			}
		}

