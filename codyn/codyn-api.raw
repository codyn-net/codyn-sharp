<?xml version="1.0"?>
<api>
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="Cdn" library="codyn-3.0">
    <enum name="CompileErrorCode" cname="CdnCompileErrorCode" type="enum">
      <member cname="CDN_COMPILE_ERROR_VARIABLE_NOT_FOUND" name="VariableNotFound" />
      <member cname="CDN_COMPILE_ERROR_FUNCTION_NOT_FOUND" name="FunctionNotFound" />
      <member cname="CDN_COMPILE_ERROR_OPERATOR_NOT_FOUND" name="OperatorNotFound" />
      <member cname="CDN_COMPILE_ERROR_INVALID_TOKEN" name="InvalidToken" />
      <member cname="CDN_COMPILE_ERROR_MAXARG" name="Maxarg" />
      <member cname="CDN_COMPILE_ERROR_INVALID_STACK" name="InvalidStack" />
      <member cname="CDN_COMPILE_ERROR_VARIABLE_RECURSE" name="VariableRecurse" />
      <member cname="CDN_COMPILE_ERROR_INVALID_ARGUMENTS" name="InvalidArguments" />
      <member cname="CDN_COMPILE_ERROR_INVALID_DIMENSION" name="InvalidDimension" />
      <member cname="CDN_COMPILE_ERROR_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="EmbeddedStringError" cname="CdnEmbeddedStringError" type="enum">
      <member cname="CDN_EMBEDDED_STRING_ERROR_BRACES" name="Braces" />
      <member cname="CDN_EMBEDDED_STRING_ERROR_INVALID_EXPANSION" name="InvalidExpansion" />
    </enum>
    <enum name="EmbeddedStringNodeType" cname="CdnEmbeddedStringNodeType" type="enum">
      <member cname="CDN_EMBEDDED_STRING_NODE_TEXT" name="Text" />
      <member cname="CDN_EMBEDDED_STRING_NODE_EQUATION" name="Equation" />
      <member cname="CDN_EMBEDDED_STRING_NODE_INDIRECTION" name="Indirection" />
      <member cname="CDN_EMBEDDED_STRING_NODE_REDUCE" name="Reduce" />
      <member cname="CDN_EMBEDDED_STRING_NODE_MAP" name="Map" />
      <member cname="CDN_EMBEDDED_STRING_NODE_CONDITION" name="Condition" />
    </enum>
    <enum name="FunctionError" cname="CdnFunctionError" type="enum">
      <member cname="CDN_FUNCTION_ERROR_UNKNOWN" name="ErrorUnknown" />
      <member cname="CDN_FUNCTION_ERROR_ARGUMENT_NOT_FOUND" name="ErrorArgumentNotFound" />
      <member cname="CDN_FUNCTION_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="ImportError" cname="CdnImportError" type="enum">
      <member cname="CDN_IMPORT_ERROR_REMOVE" name="Remove" />
    </enum>
    <enum name="InstructionVariableBinding" cname="CdnInstructionVariableBinding" type="flags">
      <member cname="CDN_INSTRUCTION_VARIABLE_BINDING_NONE" name="None" />
      <member cname="CDN_INSTRUCTION_VARIABLE_BINDING_INPUT" name="Input" value="1 &lt;&lt; 0" />
      <member cname="CDN_INSTRUCTION_VARIABLE_BINDING_OUTPUT" name="Output" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="LayoutRelation" cname="CdnLayoutRelation" type="flags">
      <member cname="CDN_LAYOUT_RELATION_ABOVE" name="Above" value="1 &lt;&lt; 0" />
      <member cname="CDN_LAYOUT_RELATION_BELOW" name="Below" value="1 &lt;&lt; 1" />
      <member cname="CDN_LAYOUT_RELATION_LEFT_OF" name="LeftOf" value="1 &lt;&lt; 2" />
      <member cname="CDN_LAYOUT_RELATION_RIGHT_OF" name="RightOf" value="1 &lt;&lt; 3" />
    </enum>
    <enum name="MathFunctionType" cname="CdnMathFunctionType" type="enum">
      <member cname="CDN_MATH_FUNCTION_TYPE_NONE" name="None" />
      <member cname="CDN_MATH_FUNCTION_TYPE_UNARY_MINUS" name="UnaryMinus" />
      <member cname="CDN_MATH_FUNCTION_TYPE_MINUS" name="Minus" />
      <member cname="CDN_MATH_FUNCTION_TYPE_PLUS" name="Plus" />
      <member cname="CDN_MATH_FUNCTION_TYPE_MULTIPLY" name="Multiply" />
      <member cname="CDN_MATH_FUNCTION_TYPE_EMULTIPLY" name="Emultiply" />
      <member cname="CDN_MATH_FUNCTION_TYPE_DIVIDE" name="Divide" />
      <member cname="CDN_MATH_FUNCTION_TYPE_MODULO" name="Modulo" />
      <member cname="CDN_MATH_FUNCTION_TYPE_POWER" name="Power" />
      <member cname="CDN_MATH_FUNCTION_TYPE_TILDE" name="Tilde" />
      <member cname="CDN_MATH_FUNCTION_TYPE_GREATER" name="Greater" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LESS" name="Less" />
      <member cname="CDN_MATH_FUNCTION_TYPE_GREATER_OR_EQUAL" name="GreaterOrEqual" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LESS_OR_EQUAL" name="LessOrEqual" />
      <member cname="CDN_MATH_FUNCTION_TYPE_EQUAL" name="Equal" />
      <member cname="CDN_MATH_FUNCTION_TYPE_NEQUAL" name="Nequal" />
      <member cname="CDN_MATH_FUNCTION_TYPE_OR" name="Or" />
      <member cname="CDN_MATH_FUNCTION_TYPE_AND" name="And" />
      <member cname="CDN_MATH_FUNCTION_TYPE_NEGATE" name="Negate" />
      <member cname="CDN_MATH_FUNCTION_TYPE_TERNARY" name="Ternary" />
      <member cname="CDN_MATH_FUNCTION_TYPE_NUM_OPERATORS" name="NumOperators" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SIN" name="Sin" />
      <member cname="CDN_MATH_FUNCTION_TYPE_COS" name="Cos" />
      <member cname="CDN_MATH_FUNCTION_TYPE_TAN" name="Tan" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ASIN" name="Asin" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ACOS" name="Acos" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ATAN" name="Atan" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ATAN2" name="Atan2" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SQRT" name="Sqrt" />
      <member cname="CDN_MATH_FUNCTION_TYPE_INVSQRT" name="Invsqrt" />
      <member cname="CDN_MATH_FUNCTION_TYPE_MIN" name="Min" />
      <member cname="CDN_MATH_FUNCTION_TYPE_MAX" name="Max" />
      <member cname="CDN_MATH_FUNCTION_TYPE_EXP" name="Exp" />
      <member cname="CDN_MATH_FUNCTION_TYPE_FLOOR" name="Floor" />
      <member cname="CDN_MATH_FUNCTION_TYPE_CEIL" name="Ceil" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ROUND" name="Round" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ABS" name="Abs" />
      <member cname="CDN_MATH_FUNCTION_TYPE_POW" name="Pow" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LN" name="Ln" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LOG10" name="Log10" />
      <member cname="CDN_MATH_FUNCTION_TYPE_HYPOT" name="Hypot" />
      <member cname="CDN_MATH_FUNCTION_TYPE_EXP2" name="Exp2" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SINH" name="Sinh" />
      <member cname="CDN_MATH_FUNCTION_TYPE_COSH" name="Cosh" />
      <member cname="CDN_MATH_FUNCTION_TYPE_TANH" name="Tanh" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LERP" name="Lerp" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SQSUM" name="Sqsum" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SIGN" name="Sign" />
      <member cname="CDN_MATH_FUNCTION_TYPE_CSIGN" name="Csign" />
      <member cname="CDN_MATH_FUNCTION_TYPE_CLIP" name="Clip" />
      <member cname="CDN_MATH_FUNCTION_TYPE_CYCLE" name="Cycle" />
      <member cname="CDN_MATH_FUNCTION_TYPE_INDEX" name="Index" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LINDEX" name="Lindex" />
      <member cname="CDN_MATH_FUNCTION_TYPE_TRANSPOSE" name="Transpose" />
      <member cname="CDN_MATH_FUNCTION_TYPE_INVERSE" name="Inverse" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LINSOLVE" name="Linsolve" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SUM" name="Sum" />
      <member cname="CDN_MATH_FUNCTION_TYPE_PRODUCT" name="Product" />
      <member cname="CDN_MATH_FUNCTION_TYPE_LENGTH" name="Length" />
      <member cname="CDN_MATH_FUNCTION_TYPE_SIZE" name="Size" />
      <member cname="CDN_MATH_FUNCTION_TYPE_HCAT" name="Hcat" />
      <member cname="CDN_MATH_FUNCTION_TYPE_ZEROS" name="Zeros" />
      <member cname="CDN_MATH_FUNCTION_TYPE_EYE" name="Eye" />
      <member cname="CDN_MATH_FUNCTION_TYPE_NUM" name="Num" />
    </enum>
    <enum name="NetworkError" cname="CdnNetworkError" type="enum">
      <member cname="CDN_NETWORK_ERROR_UNOWNED_TEMPLATE" name="UnownedTemplate" />
      <member cname="CDN_NETWORK_ERROR_NUM" name="Num" />
    </enum>
    <enum name="NetworkFormat" cname="CdnNetworkFormat" type="enum">
      <member cname="CDN_NETWORK_FORMAT_UNKNOWN" name="Unknown" />
      <member cname="CDN_NETWORK_FORMAT_CDN" name="Cdn" />
      <member cname="CDN_NETWORK_FORMAT_XML" name="Xml" />
    </enum>
    <enum name="NetworkLoadError" cname="CdnNetworkLoadError" type="enum">
      <member cname="CDN_NETWORK_LOAD_ERROR_NONE" name="None" />
      <member cname="CDN_NETWORK_LOAD_ERROR_SYNTAX" name="Syntax" />
      <member cname="CDN_NETWORK_LOAD_ERROR_VARIABLE" name="Variable" />
      <member cname="CDN_NETWORK_LOAD_ERROR_OBJECT" name="Object" />
      <member cname="CDN_NETWORK_LOAD_ERROR_EDGE" name="Edge" />
      <member cname="CDN_NETWORK_LOAD_ERROR_FUNCTION" name="Function" />
      <member cname="CDN_NETWORK_LOAD_ERROR_IMPORT" name="Import" />
      <member cname="CDN_NETWORK_LOAD_ERROR_IO" name="Io" />
      <member cname="CDN_NETWORK_LOAD_ERROR_INTERFACE" name="Interface" />
      <member cname="CDN_NETWORK_LOAD_ERROR_OPERATOR" name="Operator" />
    </enum>
    <enum name="NodeError" cname="CdnNodeError" type="enum">
      <member cname="CDN_NODE_ERROR_CHILD_ALREADY_EXISTS" name="ChildAlreadyExists" />
      <member cname="CDN_NODE_ERROR_CHILD_DOES_NOT_EXIST" name="ChildDoesNotExist" />
      <member cname="CDN_NODE_ERROR_INTERFACE_IS_PROXY" name="InterfaceIsProxy" />
      <member cname="CDN_NODE_ERROR_CHILD_IN_USE" name="ChildInUse" />
      <member cname="CDN_NODE_ERROR_NUM" name="Num" />
    </enum>
    <enum name="ObjectError" cname="CdnObjectError" type="enum">
      <member cname="CDN_OBJECT_ERROR_VARIABLE_UNKNOWN" name="ErrorVariableUnknown" />
      <member cname="CDN_OBJECT_ERROR_VARIABLE_NOT_FOUND" name="ErrorVariableNotFound" />
      <member cname="CDN_OBJECT_ERROR_VARIABLE_IN_USE" name="ErrorVariableInUse" />
      <member cname="CDN_OBJECT_ERROR_VARIABLE_FROM_TEMPLATE" name="ErrorVariableFromTemplate" />
      <member cname="CDN_OBJECT_ERROR_INVALID_VARIABLE_NAME" name="ErrorInvalidVariableName" />
      <member cname="CDN_OBJECT_ERROR_TEMPLATE_ALREADY_APPLIED" name="ErrorTemplateAlreadyApplied" />
      <member cname="CDN_OBJECT_ERROR_TEMPLATE_NOT_FOUND" name="ErrorTemplateNotFound" />
      <member cname="CDN_OBJECT_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="OperatorError" cname="CdnOperatorError" type="enum">
      <member cname="CDN_OPERATOR_ERROR_UNSUPPORTED" name="Unsupported" />
      <member cname="CDN_OPERATOR_ERROR_INVALID" name="Invalid" />
    </enum>
    <enum name="ParserContextDeleteType" cname="CdnParserContextDeleteType" type="enum">
      <member cname="CDN_PARSER_CONTEXT_SELECTOR_TYPE_OBJECT" name="Object" />
      <member cname="CDN_PARSER_CONTEXT_SELECTOR_TYPE_NODE" name="Node" />
      <member cname="CDN_PARSER_CONTEXT_SELECTOR_TYPE_EDGE" name="Edge" />
      <member cname="CDN_PARSER_CONTEXT_SELECTOR_TYPE_VARIABLE" name="Variable" />
      <member cname="CDN_PARSER_CONTEXT_SELECTOR_TYPE_ACTION" name="Action" />
      <member cname="CDN_PARSER_CONTEXT_SELECTOR_TYPE_FUNCTION" name="Function" />
    </enum>
    <enum name="SelectorPseudoType" cname="CdnSelectorPseudoType" type="enum">
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_ROOT" name="TypeRoot" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_TEMPLATES_ROOT" name="TypeTemplatesRoot" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_CHILDREN" name="TypeChildren" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_PARENT" name="TypeParent" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_FIRST" name="TypeFirst" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_LAST" name="TypeLast" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_SUBSET" name="TypeSubset" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_STATES" name="TypeStates" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_EDGES" name="TypeEdges" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_NODES" name="TypeNodes" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_IMPORTS" name="TypeImports" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_VARIABLES" name="TypeVariables" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_ACTIONS" name="TypeActions" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_FUNCTIONS" name="TypeFunctions" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_OBJECTS" name="TypeObjects" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_SIBLINGS" name="TypeSiblings" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_TEMPLATES" name="TypeTemplates" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_COUNT" name="TypeCount" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_INPUT" name="TypeInput" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_OUTPUT" name="TypeOutput" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_INPUTS" name="TypeInputs" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_OUTPUTS" name="TypeOutputs" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_INPUT_NAME" name="TypeInputName" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_OUTPUT_NAME" name="TypeOutputName" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_SELF" name="TypeSelf" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_DEBUG" name="TypeDebug" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_NAME" name="TypeName" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_DESCENDANTS" name="TypeDescendants" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_ANCESTORS" name="TypeAncestors" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_UNIQUE" name="TypeUnique" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_IF" name="TypeIf" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_NOT" name="TypeNot" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_FROM_SET" name="TypeFromSet" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_TYPE" name="TypeType" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_HAS_FLAG" name="TypeHasFlag" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_HAS_TEMPLATE" name="TypeHasTemplate" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_HAS_TAG" name="TypeHasTag" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_REVERSE" name="TypeReverse" />
      <member cname="CDN_SELECTOR_PSEUDO_TYPE_RECURSE" name="TypeRecurse" />
      <member cname="CDN_SELECTOR_PSEUDO_NUM" name="Num" />
    </enum>
    <enum name="SelectorType" cname="CdnSelectorType" type="flags">
      <member cname="CDN_SELECTOR_TYPE_NONE" name="None" />
      <member cname="CDN_SELECTOR_TYPE_ANY" name="Any" value="1 &lt;&lt; 0" />
      <member cname="CDN_SELECTOR_TYPE_STATE" name="State" value="1 &lt;&lt; 1" />
      <member cname="CDN_SELECTOR_TYPE_EDGE" name="Edge" value="1 &lt;&lt; 2" />
      <member cname="CDN_SELECTOR_TYPE_NODE" name="Node" value="1 &lt;&lt; 3" />
      <member cname="CDN_SELECTOR_TYPE_VARIABLE" name="Variable" value="1 &lt;&lt; 4" />
      <member cname="CDN_SELECTOR_TYPE_ACTION" name="Action" value="1 &lt;&lt; 5" />
      <member cname="CDN_SELECTOR_TYPE_FUNCTION" name="Function" value="1 &lt;&lt; 6" />
      <member cname="CDN_SELECTOR_TYPE_TEMPLATE" name="Template" value="1 &lt;&lt; 7" />
      <member cname="CDN_SELECTOR_TYPE_OBJECT" name="Object" value="CDN_SELECTOR_TYPE_STATE |CDN_SELECTOR_TYPE_EDGE |CDN_SELECTOR_TYPE_NODE |CDN_SELECTOR_TYPE_FUNCTION |CDN_SELECTOR_TYPE_TEMPLATE" />
    </enum>
    <enum name="SymbolicDeriveFlags" cname="CdnSymbolicDeriveFlags" type="flags">
      <member cname="CDN_SYMBOLIC_DERIVE_NONE" name="None" />
      <member cname="CDN_SYMBOLIC_DERIVE_PARTIAL" name="Partial" value="1 &lt;&lt; 0" />
      <member cname="CDN_SYMBOLIC_DERIVE_SIMPLIFY" name="Simplify" value="1 &lt;&lt; 1" />
    </enum>
    <enum name="SymbolicError" cname="CdnSymbolicError" type="enum">
      <member cname="CDN_SYMBOLIC_ERROR_UNSUPPORTED" name="Unsupported" />
      <member cname="CDN_SYMBOLIC_ERROR_INVALID" name="Invalid" />
    </enum>
    <enum name="VariableFlags" cname="CdnVariableFlags" type="flags">
      <member cname="CDN_VARIABLE_FLAG_NONE" name="None" />
      <member cname="CDN_VARIABLE_FLAG_INTEGRATED" name="Integrated" value="1 &lt;&lt; 0" />
      <member cname="CDN_VARIABLE_FLAG_IN" name="In" value="1 &lt;&lt; 1" />
      <member cname="CDN_VARIABLE_FLAG_OUT" name="Out" value="1 &lt;&lt; 2" />
      <member cname="CDN_VARIABLE_FLAG_ONCE" name="Once" value="1 &lt;&lt; 3" />
      <member cname="CDN_VARIABLE_FLAG_INOUT" name="Inout" value="CDN_VARIABLE_FLAG_IN | CDN_VARIABLE_FLAG_OUT" />
    </enum>
    <enum name="VariableInterfaceError" cname="CdnVariableInterfaceError" type="enum">
      <member cname="CDN_VARIABLE_INTERFACE_ERROR_EXISTS" name="Exists" />
      <member cname="CDN_VARIABLE_INTERFACE_ERROR_NOT_FOUND" name="NotFound" />
      <member cname="CDN_VARIABLE_INTERFACE_ERROR_NUM_ERRORS" name="NumErrors" />
    </enum>
    <callback name="ExpressionCacheNotify" cname="CdnExpressionCacheNotify">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnExpression*" name="expression" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <callback name="ExpressionEvaluateNotify" cname="CdnExpressionEvaluateNotify">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnExpression*" name="expression" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <callback name="ForeachExpressionFunc" cname="CdnForeachExpressionFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnExpression*" name="expression" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <callback name="ForeachFunctionFunc" cname="CdnForeachFunctionFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnFunctionForward*" name="func" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <callback name="MiniObjectCopyFunction" cname="CdnMiniObjectCopyFunction">
      <return-type type="CdnMiniObject*" />
      <parameters>
        <parameter type="CdnMiniObject*" name="obj" />
      </parameters>
    </callback>
    <callback name="MiniObjectFinalizeFunction" cname="CdnMiniObjectFinalizeFunction">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnMiniObject*" name="obj" />
      </parameters>
    </callback>
    <callback name="PhaseableForeachFunc" cname="CdnPhaseableForeachFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnPhaseable*" name="phaseable" />
        <parameter type="const-gchar*" name="phase" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <callback name="TaggableForeachFunc" cname="CdnTaggableForeachFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="CdnTaggable*" name="taggable" />
        <parameter type="const-gchar*" name="key" />
        <parameter type="const-gchar*" name="value" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <interface name="Annotatable" cname="CdnAnnotatable">
      <virtual_method name="GetTitle" cname="get_title">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnAnnotatable*" name="annotatable" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetAnnotation" cname="set_annotation">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnAnnotatable*" name="annotatable" />
          <parameter type="const-gchar*" name="annotation" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetAnnotation" cname="get_annotation">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnAnnotatable*" name="annotatable" />
        </parameters>
      </virtual_method>
      <method name="GetAnnotation" cname="cdn_annotatable_get_annotation">
        <return-type type="gchar*" />
      </method>
      <method name="GetTitle" cname="cdn_annotatable_get_title">
        <return-type type="gchar*" />
      </method>
      <method name="GetType" cname="cdn_annotatable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetAnnotation" cname="cdn_annotatable_set_annotation">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="annotation" />
        </parameters>
      </method>
    </interface>
    <interface name="Layoutable" cname="CdnLayoutable">
      <virtual_method name="GetLocation" cname="get_location">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnLayoutable*" name="layoutable" />
          <parameter type="gint*" name="x" />
          <parameter type="gint*" name="y" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetLocation" cname="set_location">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnLayoutable*" name="layoutable" />
          <parameter type="gint" name="x" />
          <parameter type="gint" name="y" />
        </parameters>
      </virtual_method>
      <virtual_method name="SupportsLocation" cname="supports_location">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnLayoutable*" name="layoutable" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetHasLocation" cname="get_has_location">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnLayoutable*" name="layoutable" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetHasLocation" cname="set_has_location">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnLayoutable*" name="layoutable" />
          <parameter type="gboolean" name="has_location" />
        </parameters>
      </virtual_method>
      <method name="GetHasLocation" cname="cdn_layoutable_get_has_location">
        <return-type type="gboolean" />
      </method>
      <method name="GetLocation" cname="cdn_layoutable_get_location">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="x" />
          <parameter type="gint*" name="y" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_layoutable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetHasLocation" cname="cdn_layoutable_set_has_location">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="has_location" />
        </parameters>
      </method>
      <method name="SetLocation" cname="cdn_layoutable_set_location">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="x" />
          <parameter type="gint" name="y" />
        </parameters>
      </method>
      <method name="SupportsLocation" cname="cdn_layoutable_supports_location">
        <return-type type="gboolean" />
      </method>
    </interface>
    <interface name="Modifiable" cname="CdnModifiable">
      <virtual_method name="GetModified" cname="get_modified">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnModifiable*" name="modifiable" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetModified" cname="set_modified">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnModifiable*" name="modifiable" />
          <parameter type="gboolean" name="modified" />
        </parameters>
      </virtual_method>
      <method name="GetModified" cname="cdn_modifiable_get_modified">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="cdn_modifiable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetModified" cname="cdn_modifiable_set_modified">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="modified" />
        </parameters>
      </method>
    </interface>
    <interface name="Phaseable" cname="CdnPhaseable">
      <virtual_method name="GetPhaseTable" cname="get_phase_table">
        <return-type type="GHashTable*" />
        <parameters>
          <parameter type="CdnPhaseable*" name="phaseable" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetPhaseTable" cname="set_phase_table">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnPhaseable*" name="taggable" />
          <parameter type="GHashTable*" name="table" />
        </parameters>
      </virtual_method>
      <method name="AddPhase" cname="cdn_phaseable_add_phase">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="phase" />
        </parameters>
      </method>
      <method name="CopyTo" cname="cdn_phaseable_copy_to">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnPhaseable*" name="dest" />
        </parameters>
      </method>
      <method name="Foreach" cname="cdn_phaseable_foreach">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnPhaseableForeachFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </method>
      <method name="GetPhaseTable" cname="cdn_phaseable_get_phase_table">
        <return-type type="GHashTable*" />
      </method>
      <method name="GetType" cname="cdn_phaseable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsActive" cname="cdn_phaseable_is_active">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="phase" />
        </parameters>
      </method>
      <method name="RemovePhase" cname="cdn_phaseable_remove_phase">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="tag" />
        </parameters>
      </method>
      <method name="SetPhaseTable" cname="cdn_phaseable_set_phase_table">
        <return-type type="void" />
        <parameters>
          <parameter type="GHashTable*" name="table" />
        </parameters>
      </method>
    </interface>
    <interface name="Statement" cname="CdnStatement">
      <method name="GetColumn" cname="cdn_statement_get_column">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="start" />
          <parameter type="gint*" name="end" />
        </parameters>
      </method>
      <method name="GetLine" cname="cdn_statement_get_line">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="start" />
          <parameter type="gint*" name="end" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_statement_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetColumn" cname="cdn_statement_set_column">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="start" />
          <parameter type="gint" name="end" />
        </parameters>
      </method>
      <method name="SetLine" cname="cdn_statement_set_line">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="start" />
          <parameter type="gint" name="end" />
        </parameters>
      </method>
    </interface>
    <interface name="Taggable" cname="CdnTaggable">
      <virtual_method name="GetTagTable" cname="get_tag_table">
        <return-type type="GHashTable*" />
        <parameters>
          <parameter type="CdnTaggable*" name="taggable" />
        </parameters>
      </virtual_method>
      <method name="AddTag" cname="cdn_taggable_add_tag">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="tag" />
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="CopyTo" cname="cdn_taggable_copy_to">
        <return-type type="void" />
        <parameters>
          <parameter type="GHashTable*" name="tags" />
        </parameters>
      </method>
      <method name="CreateTable" cname="cdn_taggable_create_table" shared="true">
        <return-type type="GHashTable*" />
      </method>
      <method name="Foreach" cname="cdn_taggable_foreach">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnTaggableForeachFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </method>
      <method name="GetTag" cname="cdn_taggable_get_tag">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="tag" />
        </parameters>
      </method>
      <method name="GetTagTable" cname="cdn_taggable_get_tag_table">
        <return-type type="GHashTable*" />
      </method>
      <method name="GetType" cname="cdn_taggable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasTag" cname="cdn_taggable_has_tag">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="tag" />
        </parameters>
      </method>
      <method name="RemoveTag" cname="cdn_taggable_remove_tag">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="tag" />
        </parameters>
      </method>
      <method name="TryGetTag" cname="cdn_taggable_try_get_tag">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="tag" />
          <parameter type="const-gchar**" name="value" />
        </parameters>
      </method>
    </interface>
    <interface name="Usable" cname="CdnUsable">
      <virtual_method name="UseCount" cname="use_count">
        <return-type type="guint" />
        <parameters>
          <parameter type="CdnUsable*" name="self" />
        </parameters>
      </virtual_method>
      <virtual_method name="Use" cname="use">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnUsable*" name="self" />
        </parameters>
      </virtual_method>
      <virtual_method name="Unuse" cname="unuse">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnUsable*" name="self" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="cdn_usable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Unuse" cname="cdn_usable_unuse">
        <return-type type="gboolean" />
      </method>
      <method name="Use" cname="cdn_usable_use">
        <return-type type="void" />
      </method>
      <method name="UseCount" cname="cdn_usable_use_count">
        <return-type type="guint" />
      </method>
    </interface>
    <object name="Attribute" cname="CdnAttribute" parent="GObject">
      <field name="Priv" cname="priv" type="CdnAttributePrivate*" />
      <property name="Id" cname="id" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <method name="GetArgument" cname="cdn_attribute_get_argument">
        <return-type type="GObject*" />
        <parameters>
          <parameter type="gint" name="i" />
        </parameters>
      </method>
      <method name="GetArguments" cname="cdn_attribute_get_arguments">
        <return-type type="GSList*" />
      </method>
      <method name="GetId" cname="cdn_attribute_get_id">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cdn_attribute_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_attribute_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </constructor>
      <constructor cname="cdn_attribute_newv">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter ellipsis="true" />
        </parameters>
      </constructor>
      <method name="NumArguments" cname="cdn_attribute_num_arguments">
        <return-type type="gint" />
      </method>
      <method name="SetArguments" cname="cdn_attribute_set_arguments">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="arguments" />
        </parameters>
      </method>
    </object>
    <object name="CompileContext" cname="CdnCompileContext" parent="GObject">
      <field name="Priv" cname="priv" type="CdnCompileContextPrivate*" />
      <method name="AppendFunction" cname="cdn_compile_context_append_function">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunctionForward*" name="function" />
        </parameters>
      </method>
      <method name="AppendObject" cname="cdn_compile_context_append_object">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObjectForward*" name="object" />
        </parameters>
      </method>
      <method name="GetFunctionArgPriority" cname="cdn_compile_context_get_function_arg_priority">
        <return-type type="gboolean" />
      </method>
      <method name="GetFunctionRefPriority" cname="cdn_compile_context_get_function_ref_priority">
        <return-type type="gboolean" />
      </method>
      <method name="GetFunctions" cname="cdn_compile_context_get_functions">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetObjects" cname="cdn_compile_context_get_objects">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetType" cname="cdn_compile_context_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LookupFunction" cname="cdn_compile_context_lookup_function">
        <return-type type="CdnFunctionForward*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="LookupVariable" cname="cdn_compile_context_lookup_variable">
        <return-type type="CdnVariableForward*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <constructor cname="cdn_compile_context_new" />
      <method name="PrependFunction" cname="cdn_compile_context_prepend_function">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunctionForward*" name="function" />
        </parameters>
      </method>
      <method name="PrependObject" cname="cdn_compile_context_prepend_object">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObjectForward*" name="object" />
        </parameters>
      </method>
      <method name="Restore" cname="cdn_compile_context_restore">
        <return-type type="void" />
      </method>
      <method name="Save" cname="cdn_compile_context_save">
        <return-type type="void" />
      </method>
      <method name="SetFunctionArgPriority" cname="cdn_compile_context_set_function_arg_priority">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="prio" />
        </parameters>
      </method>
      <method name="SetFunctionRefPriority" cname="cdn_compile_context_set_function_ref_priority">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="prio" />
        </parameters>
      </method>
    </object>
    <object name="CompileError" cname="CdnCompileError" parent="GObject">
      <field name="Priv" cname="priv" type="CdnCompileErrorPrivate*" />
      <method name="CodeString" cname="cdn_compile_error_code_string" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="gint" name="code" />
        </parameters>
      </method>
      <method name="GetCode" cname="cdn_compile_error_get_code">
        <return-type type="gint" />
      </method>
      <method name="GetEdgeAction" cname="cdn_compile_error_get_edge_action">
        <return-type type="CdnEdgeAction*" />
      </method>
      <method name="GetError" cname="cdn_compile_error_get_error">
        <return-type type="GError*" />
      </method>
      <method name="GetExpression" cname="cdn_compile_error_get_expression">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetFormattedString" cname="cdn_compile_error_get_formatted_string">
        <return-type type="gchar*" />
      </method>
      <method name="GetMessage" cname="cdn_compile_error_get_message">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetObject" cname="cdn_compile_error_get_object">
        <return-type type="CdnObject*" />
      </method>
      <method name="GetType" cname="cdn_compile_error_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVariable" cname="cdn_compile_error_get_variable">
        <return-type type="CdnVariable*" />
      </method>
      <constructor cname="cdn_compile_error_new" />
      <method name="Set" cname="cdn_compile_error_set">
        <return-type type="void" />
        <parameters>
          <parameter type="GError*" name="gerror" />
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnVariable*" name="property" />
          <parameter type="CdnEdgeAction*" name="action" />
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </method>
      <method name="String" cname="cdn_compile_error_string">
        <return-type type="const-gchar*" />
      </method>
      <method name="TypeQuark" cname="cdn_compile_error_type_quark" shared="true">
        <return-type type="GQuark" />
      </method>
    </object>
    <object name="Edge" cname="CdnEdge" parent="CdnObject">
      <field name="Priv" cname="priv" type="CdnEdgePrivate*" />
      <signal name="ActionAdded" cname="action-added" when="LAST" field_name="action_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEdge*" name="link" />
          <parameter type="CdnEdgeAction*" name="action" />
        </parameters>
      </signal>
      <signal name="ActionRemoved" cname="action-removed" when="LAST" field_name="action_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEdge*" name="link" />
          <parameter type="CdnEdgeAction*" name="action" />
        </parameters>
      </signal>
      <property name="Input" cname="input" type="CdnObject" readable="true" writeable="true" construct="true" />
      <property name="Output" cname="output" type="CdnObject" readable="true" writeable="true" construct="true" />
      <implements>
        <interface cname="CdnLayoutable" />
        <interface cname="CdnPhaseable" />
      </implements>
      <method name="AddAction" cname="cdn_edge_add_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnEdgeAction*" name="action" />
        </parameters>
      </method>
      <method name="Attach" cname="cdn_edge_attach">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnNode*" name="input" />
          <parameter type="CdnNode*" name="output" />
        </parameters>
      </method>
      <method name="GetAction" cname="cdn_edge_get_action">
        <return-type type="CdnEdgeAction*" />
        <parameters>
          <parameter type="const-gchar*" name="target" />
        </parameters>
      </method>
      <method name="GetActionTemplate" cname="cdn_edge_get_action_template">
        <return-type type="CdnEdge*" />
        <parameters>
          <parameter type="CdnEdgeAction*" name="action" />
          <parameter type="gboolean" name="match_full" />
        </parameters>
      </method>
      <method name="GetActionWithIndex" cname="cdn_edge_get_action_with_index">
        <return-type type="CdnEdgeAction*" />
        <parameters>
          <parameter type="const-gchar*" name="target" />
          <parameter type="CdnExpression*" name="index" />
        </parameters>
      </method>
      <method name="GetActions" cname="cdn_edge_get_actions">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetInput" cname="cdn_edge_get_input">
        <return-type type="CdnNode*" />
      </method>
      <method name="GetOutput" cname="cdn_edge_get_output">
        <return-type type="CdnNode*" />
      </method>
      <method name="GetType" cname="cdn_edge_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_edge_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter type="CdnNode*" name="input" />
          <parameter type="CdnNode*" name="output" />
        </parameters>
      </constructor>
      <method name="RemoveAction" cname="cdn_edge_remove_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnEdgeAction*" name="action" />
        </parameters>
      </method>
    </object>
    <object name="EdgeAction" cname="CdnEdgeAction" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CdnEdgeActionPrivate*" />
      <property name="Link" cname="link" type="CdnEdge" readable="true" />
      <property name="Target" cname="target" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Equation" cname="equation" type="CdnExpression" readable="true" writeable="true" construct="true" />
      <property name="TargetProperty" cname="target-property" type="CdnVariable" readable="true" />
      <property name="Index" cname="index" type="CdnExpression" readable="true" writeable="true" />
      <implements>
        <interface cname="CdnModifiable" />
        <interface cname="CdnAnnotatable" />
        <interface cname="CdnTaggable" />
        <interface cname="CdnPhaseable" />
      </implements>
      <method name="Copy" cname="cdn_edge_action_copy">
        <return-type type="CdnEdgeAction*" owned="true" />
      </method>
      <method name="Equal" cname="cdn_edge_action_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnEdgeAction*" name="other" />
        </parameters>
      </method>
      <method name="GetEdge" cname="cdn_edge_action_get_edge">
        <return-type type="CdnEdgeForward*" />
      </method>
      <method name="GetEquation" cname="cdn_edge_action_get_equation">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetIndex" cname="cdn_edge_action_get_index">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetIndices" cname="cdn_edge_action_get_indices">
        <return-type type="const-gint*" />
        <parameters>
          <parameter type="gint*" name="num_indices" />
        </parameters>
      </method>
      <method name="GetTarget" cname="cdn_edge_action_get_target">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetTargetVariable" cname="cdn_edge_action_get_target_variable">
        <return-type type="CdnVariable*" />
      </method>
      <method name="GetType" cname="cdn_edge_action_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_edge_action_new">
        <parameters>
          <parameter type="const-gchar*" name="target" />
          <parameter type="CdnExpression*" name="equation" />
        </parameters>
      </constructor>
      <method name="SetEquation" cname="cdn_edge_action_set_equation">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpression*" name="equation" />
        </parameters>
      </method>
      <method name="SetIndex" cname="cdn_edge_action_set_index">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </method>
      <method name="SetTarget" cname="cdn_edge_action_set_target">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="target" />
        </parameters>
      </method>
    </object>
    <object name="EmbeddedContext" cname="CdnEmbeddedContext" parent="GObject">
      <field name="Priv" cname="priv" type="CdnEmbeddedContextPrivate*" />
      <method name="AddDefine" cname="cdn_embedded_context_add_define">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="CdnExpansion*" name="expansion" />
        </parameters>
      </method>
      <method name="AddDefines" cname="cdn_embedded_context_add_defines">
        <return-type type="void" />
        <parameters>
          <parameter type="GHashTable*" name="defines" />
        </parameters>
      </method>
      <method name="AddExpansion" cname="cdn_embedded_context_add_expansion">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpansion*" name="expansion" />
        </parameters>
      </method>
      <method name="AddExpansions" cname="cdn_embedded_context_add_expansions">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="expansions" />
        </parameters>
      </method>
      <method name="AddSelection" cname="cdn_embedded_context_add_selection">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelection*" name="selection" />
        </parameters>
      </method>
      <method name="Calculate" cname="cdn_embedded_context_calculate">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="equation" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CopyTop" cname="cdn_embedded_context_copy_top">
        <return-type type="CdnEmbeddedContext*" />
      </method>
      <method name="GetDefine" cname="cdn_embedded_context_get_define">
        <return-type type="CdnExpansion*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetDefines" cname="cdn_embedded_context_get_defines">
        <return-type type="GHashTable*" />
      </method>
      <method name="GetExpansion" cname="cdn_embedded_context_get_expansion">
        <return-type type="CdnExpansion*" />
        <parameters>
          <parameter type="gint" name="depth" />
        </parameters>
      </method>
      <method name="GetExpansions" cname="cdn_embedded_context_get_expansions">
        <return-type type="GSList*" />
      </method>
      <method name="GetMarker" cname="cdn_embedded_context_get_marker">
        <return-type type="gulong" />
      </method>
      <method name="GetType" cname="cdn_embedded_context_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IncrementDefine" cname="cdn_embedded_context_increment_define">
        <return-type type="gint" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint" name="num" />
        </parameters>
      </method>
      <constructor cname="cdn_embedded_context_new" />
      <method name="Restore" cname="cdn_embedded_context_restore">
        <return-type type="void" />
      </method>
      <method name="Save" cname="cdn_embedded_context_save">
        <return-type type="void" />
      </method>
      <method name="SaveDefines" cname="cdn_embedded_context_save_defines">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="copy_defines" />
        </parameters>
      </method>
      <method name="SetCopyDefinesOnWrite" cname="cdn_embedded_context_set_copy_defines_on_write">
        <return-type type="void" />
      </method>
      <method name="SetDefines" cname="cdn_embedded_context_set_defines">
        <return-type type="void" />
        <parameters>
          <parameter type="GHashTable*" name="defines" />
          <parameter type="gboolean" name="inherit" />
        </parameters>
      </method>
      <method name="SetExpansions" cname="cdn_embedded_context_set_expansions">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="expansions" />
        </parameters>
      </method>
      <method name="SetSelection" cname="cdn_embedded_context_set_selection">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelection*" name="selection" />
        </parameters>
      </method>
    </object>
    <object name="EmbeddedString" cname="CdnEmbeddedString" parent="GObject">
      <field name="Priv" cname="priv" type="CdnEmbeddedStringPrivate*" />
      <implements>
        <interface cname="CdnStatement" />
      </implements>
      <method name="AddString" cname="cdn_embedded_string_add_string">
        <return-type type="CdnEmbeddedString*" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="other" />
        </parameters>
      </method>
      <method name="AddText" cname="cdn_embedded_string_add_text">
        <return-type type="CdnEmbeddedString*" />
        <parameters>
          <parameter type="const-gchar*" name="text" />
        </parameters>
      </method>
      <method name="BraceLevel" cname="cdn_embedded_string_brace_level">
        <return-type type="gint" />
      </method>
      <method name="ClearCache" cname="cdn_embedded_string_clear_cache">
        <return-type type="void" />
      </method>
      <method name="Collapse" cname="cdn_embedded_string_collapse" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="gchar" name="const-const*" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_embedded_string_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="Escape" cname="cdn_embedded_string_escape" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="item" />
        </parameters>
      </method>
      <method name="Expand" cname="cdn_embedded_string_expand">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="CdnEmbeddedContext*" name="ctx" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ExpandEscape" cname="cdn_embedded_string_expand_escape">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnEmbeddedContext*" name="ctx" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ExpandMultiple" cname="cdn_embedded_string_expand_multiple">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="CdnEmbeddedContext*" name="ctx" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_embedded_string_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_embedded_string_new" />
      <constructor cname="cdn_embedded_string_new_from_double">
        <parameters>
          <parameter type="gdouble" name="s" />
        </parameters>
      </constructor>
      <constructor cname="cdn_embedded_string_new_from_integer">
        <parameters>
          <parameter type="gint" name="s" />
        </parameters>
      </constructor>
      <constructor cname="cdn_embedded_string_new_from_string">
        <parameters>
          <parameter type="const-gchar*" name="s" />
        </parameters>
      </constructor>
      <method name="Pop" cname="cdn_embedded_string_pop">
        <return-type type="CdnEmbeddedString*" />
      </method>
      <method name="PopBrace" cname="cdn_embedded_string_pop_brace">
        <return-type type="CdnEmbeddedString*" />
      </method>
      <method name="PrependText" cname="cdn_embedded_string_prepend_text">
        <return-type type="CdnEmbeddedString*" />
        <parameters>
          <parameter type="const-gchar*" name="text" />
        </parameters>
      </method>
      <method name="Push" cname="cdn_embedded_string_push">
        <return-type type="CdnEmbeddedString*" />
        <parameters>
          <parameter type="CdnEmbeddedStringNodeType" name="type" />
          <parameter type="gint" name="depth" />
        </parameters>
      </method>
      <method name="PushBrace" cname="cdn_embedded_string_push_brace">
        <return-type type="CdnEmbeddedString*" />
      </method>
    </object>
    <object name="Event" cname="CdnEvent" parent="CdnNode">
      <field name="Priv" cname="priv" type="CdnEventPrivate*" />
      <property name="Condition" cname="condition" type="CdnExpression" readable="true" writeable="true" construct="true" />
      <property name="Approximation" cname="approximation" type="gdouble" readable="true" writeable="true" construct="true" />
      <property name="GotoPhase" cname="goto-phase" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Terminal" cname="terminal" type="gboolean" readable="true" writeable="true" construct="true" />
      <implements>
        <interface cname="CdnPhaseable" />
      </implements>
      <method name="AddSetVariable" cname="cdn_event_add_set_variable">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariable*" name="property" />
          <parameter type="CdnExpression*" name="value" />
        </parameters>
      </method>
      <method name="Execute" cname="cdn_event_execute">
        <return-type type="void" />
      </method>
      <method name="GetApproximation" cname="cdn_event_get_approximation">
        <return-type type="gdouble" />
      </method>
      <method name="GetCondition" cname="cdn_event_get_condition">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetGotoPhase" cname="cdn_event_get_goto_phase">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetTerminal" cname="cdn_event_get_terminal">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="cdn_event_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Happened" cname="cdn_event_happened">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble*" name="dist" />
        </parameters>
      </method>
      <constructor cname="cdn_event_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter type="CdnExpression*" name="condition" />
          <parameter type="gdouble" name="approximation" />
        </parameters>
      </constructor>
      <method name="SetApproximation" cname="cdn_event_set_approximation">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="approximation" />
        </parameters>
      </method>
      <method name="SetCondition" cname="cdn_event_set_condition">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpression*" name="condition" />
        </parameters>
      </method>
      <method name="SetGotoPhase" cname="cdn_event_set_goto_phase">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="phase" />
        </parameters>
      </method>
      <method name="SetTerminal" cname="cdn_event_set_terminal">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="terminal" />
        </parameters>
      </method>
      <method name="Update" cname="cdn_event_update">
        <return-type type="void" />
      </method>
    </object>
    <object name="Expression" cname="CdnExpression" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CdnExpressionPrivate*" />
      <property name="Expression" cname="expression" type="gchar*" readable="true" writeable="true" />
      <property name="Value" cname="value" type="gdouble" readable="true" writeable="true" />
      <property name="HasCache" cname="has-cache" type="gboolean" readable="true" writeable="true" />
      <implements>
        <interface cname="CdnModifiable" />
      </implements>
      <method name="Compile" cname="cdn_expression_compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnCompileContext*" name="context" />
          <parameter type="CdnCompileErrorForward*" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="cdn_expression_copy">
        <return-type type="CdnExpression*" owned="true" />
      </method>
      <method name="DependsOn" cname="cdn_expression_depends_on">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnExpression*" name="depends_on" />
        </parameters>
      </method>
      <method name="Equal" cname="cdn_expression_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnExpression*" name="other" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </method>
      <method name="Evaluate" cname="cdn_expression_evaluate">
        <return-type type="gdouble" />
      </method>
      <method name="EvaluateValues" cname="cdn_expression_evaluate_values">
        <return-type type="const-gdouble*" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <method name="ForceResetCache" cname="cdn_expression_force_reset_cache">
        <return-type type="void" />
      </method>
      <method name="GetAsString" cname="cdn_expression_get_as_string">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetCache" cname="cdn_expression_get_cache">
        <return-type type="gdouble*" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <method name="GetDependencies" cname="cdn_expression_get_dependencies">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetDependsOnMe" cname="cdn_expression_get_depends_on_me">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetDimension" cname="cdn_expression_get_dimension">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <method name="GetErrorAt" cname="cdn_expression_get_error_at">
        <return-type type="gint" />
      </method>
      <method name="GetErrorStart" cname="cdn_expression_get_error_start">
        <return-type type="gint" />
      </method>
      <method name="GetHasCache" cname="cdn_expression_get_has_cache">
        <return-type type="gboolean" />
      </method>
      <method name="GetInstructions" cname="cdn_expression_get_instructions">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetOnce" cname="cdn_expression_get_once">
        <return-type type="gboolean" />
      </method>
      <method name="GetRandInstructions" cname="cdn_expression_get_rand_instructions">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetStackSize" cname="cdn_expression_get_stack_size">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="cdn_expression_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVariableDependencies" cname="cdn_expression_get_variable_dependencies">
        <return-type type="GSList*" />
      </method>
      <constructor cname="cdn_expression_new">
        <parameters>
          <parameter type="const-gchar*" name="expression" />
        </parameters>
      </constructor>
      <constructor cname="cdn_expression_new0" />
      <method name="Reset" cname="cdn_expression_reset">
        <return-type type="void" />
      </method>
      <method name="ResetCache" cname="cdn_expression_reset_cache">
        <return-type type="void" />
      </method>
      <method name="SetCacheNotify" cname="cdn_expression_set_cache_notify">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpressionCacheNotify" name="notify" />
          <parameter type="gpointer" name="userdata" />
          <parameter type="GDestroyNotify" name="destroy_notify" />
        </parameters>
      </method>
      <method name="SetEvaluateNotify" cname="cdn_expression_set_evaluate_notify">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpressionEvaluateNotify" name="notify" />
          <parameter type="gpointer" name="userdata" />
          <parameter type="GDestroyNotify" name="destroy_notify" />
        </parameters>
      </method>
      <method name="SetFromString" cname="cdn_expression_set_from_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetHasCache" cname="cdn_expression_set_has_cache">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="cache" />
        </parameters>
      </method>
      <method name="SetInstructions" cname="cdn_expression_set_instructions">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GSList*" name="instructions" />
        </parameters>
      </method>
      <method name="SetOnce" cname="cdn_expression_set_once">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="instant" />
        </parameters>
      </method>
      <method name="SetValue" cname="cdn_expression_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="SetValues" cname="cdn_expression_set_values">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gdouble*" name="values" />
          <parameter type="gint" name="numr" />
          <parameter type="gint" name="numc" />
        </parameters>
      </method>
    </object>
    <object name="Function" cname="CdnFunction" parent="CdnObject">
      <field name="Priv" cname="priv" type="CdnFunctionPrivate*" />
      <property name="Expression" cname="expression" type="CdnExpression" readable="true" writeable="true" construct="true" />
      <signal name="ArgumentAdded" cname="argument-added" when="LAST" field_name="argument_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="CdnFunctionArgument*" name="argument" />
        </parameters>
      </signal>
      <signal name="ArgumentRemoved" cname="argument-removed" when="LAST" field_name="argument_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="CdnFunctionArgument*" name="argument" />
        </parameters>
      </signal>
      <signal name="ArgumentsReordered" cname="arguments-reordered" when="LAST" field_name="arguments_reordered">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
        </parameters>
      </signal>
      <virtual_method name="Evaluate" cname="evaluate">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </virtual_method>
      <virtual_method name="Execute" cname="execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="gint" name="nargs" />
          <parameter type="gint*" name="argdim" />
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetDimension" cname="get_dimension">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </virtual_method>
      <virtual_method name="ForDimension" cname="for_dimension">
        <return-type type="CdnFunction*" />
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="gint" name="numargs" />
          <parameter type="gint*" name="argdim" />
        </parameters>
      </virtual_method>
      <method name="AddArgument" cname="cdn_function_add_argument">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunctionArgument*" name="argument" />
        </parameters>
      </method>
      <method name="ClearArguments" cname="cdn_function_clear_arguments">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_function_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="Execute" cname="cdn_function_execute">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="nargs" />
          <parameter type="gint*" name="argdim" />
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </method>
      <method name="ForDimension" cname="cdn_function_for_dimension">
        <return-type type="CdnFunction*" />
        <parameters>
          <parameter type="gint" name="numargs" />
          <parameter type="gint*" name="argdim" />
        </parameters>
      </method>
      <method name="GetArgument" cname="cdn_function_get_argument">
        <return-type type="CdnFunctionArgument*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetArguments" cname="cdn_function_get_arguments">
        <return-type type="const-GList*" />
      </method>
      <method name="GetDimension" cname="cdn_function_get_dimension">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <method name="GetExpression" cname="cdn_function_get_expression">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetNArguments" cname="cdn_function_get_n_arguments">
        <return-type type="guint" />
      </method>
      <method name="GetNImplicit" cname="cdn_function_get_n_implicit">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="cdn_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_function_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </constructor>
      <method name="RemoveArgument" cname="cdn_function_remove_argument">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnFunctionArgument*" name="argument" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetExpression" cname="cdn_function_set_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </method>
    </object>
    <object name="FunctionArgument" cname="CdnFunctionArgument" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CdnFunctionArgumentPrivate*" />
      <signal name="InvalidateName" cname="invalidate-name" when="LAST" field_name="invalidate_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnFunctionArgument*" name="argument" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </signal>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Explicit" cname="explicit" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="Numr" cname="numr" type="gint" readable="true" writeable="true" construct="true" />
      <property name="Numc" cname="numc" type="gint" readable="true" writeable="true" construct="true" />
      <method name="Copy" cname="cdn_function_argument_copy">
        <return-type type="CdnFunctionArgument*" owned="true" />
      </method>
      <method name="GetDimension" cname="cdn_function_argument_get_dimension">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <method name="GetExplicit" cname="cdn_function_argument_get_explicit">
        <return-type type="gboolean" />
      </method>
      <method name="GetName" cname="cdn_function_argument_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cdn_function_argument_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_function_argument_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gboolean" name="isexplicit" />
        </parameters>
      </constructor>
      <method name="SetDimension" cname="cdn_function_argument_set_dimension">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="numr" />
          <parameter type="gint" name="numc" />
        </parameters>
      </method>
      <method name="SetExplicit" cname="cdn_function_argument_set_explicit">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="isexplicit" />
        </parameters>
      </method>
      <method name="SetName" cname="cdn_function_argument_set_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
    </object>
    <object name="FunctionPolynomial" cname="CdnFunctionPolynomial" parent="CdnFunction">
      <field name="Priv" cname="priv" type="CdnFunctionPolynomialPrivate*" />
      <signal name="PieceAdded" cname="piece-added" when="LAST" field_name="piece_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunctionPolynomial*" name="polynomial" />
          <parameter type="CdnFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </signal>
      <signal name="PieceRemoved" cname="piece-removed" when="LAST" field_name="piece_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnFunctionPolynomial*" name="polynomial" />
          <parameter type="CdnFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </signal>
      <method name="Add" cname="cdn_function_polynomial_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </method>
      <method name="ClearPieces" cname="cdn_function_polynomial_clear_pieces">
        <return-type type="void" />
      </method>
      <method name="GetPieces" cname="cdn_function_polynomial_get_pieces">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetType" cname="cdn_function_polynomial_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_function_polynomial_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </constructor>
      <method name="Remove" cname="cdn_function_polynomial_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </method>
    </object>
    <object name="FunctionPolynomialPiece" cname="CdnFunctionPolynomialPiece" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CdnFunctionPolynomialPiecePrivate*" />
      <property name="Begin" cname="begin" type="gdouble" readable="true" writeable="true" construct="true" />
      <property name="End" cname="end" type="gdouble" readable="true" writeable="true" construct="true" />
      <property name="Coefficients" cname="coefficients" type="value_array" readable="true" writeable="true" construct="true" />
      <property name="Normalization" cname="normalization" type="value_array" readable="true" />
      <method name="Copy" cname="cdn_function_polynomial_piece_copy">
        <return-type type="CdnFunctionPolynomialPiece*" owned="true" />
      </method>
      <method name="GetBegin" cname="cdn_function_polynomial_piece_get_begin">
        <return-type type="gdouble" />
      </method>
      <method name="GetCoefficients" cname="cdn_function_polynomial_piece_get_coefficients">
        <return-type type="const-gdouble*" />
        <parameters>
          <parameter type="guint*" name="num" />
        </parameters>
      </method>
      <method name="GetEnd" cname="cdn_function_polynomial_piece_get_end">
        <return-type type="gdouble" />
      </method>
      <method name="GetNormalization" cname="cdn_function_polynomial_piece_get_normalization">
        <return-type type="const-gdouble*" />
        <parameters>
          <parameter type="guint*" name="num" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_function_polynomial_piece_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_function_polynomial_piece_new">
        <parameters>
          <parameter type="gdouble" name="begin" />
          <parameter type="gdouble" name="end" />
          <parameter type="gdouble*" name="coefficients" />
          <parameter type="guint" name="num_coefficients" />
        </parameters>
      </constructor>
      <method name="SetBegin" cname="cdn_function_polynomial_piece_set_begin">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="begin" />
        </parameters>
      </method>
      <method name="SetCoefficients" cname="cdn_function_polynomial_piece_set_coefficients">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble*" name="coefficients" />
          <parameter type="guint" name="num" />
        </parameters>
      </method>
      <method name="SetEnd" cname="cdn_function_polynomial_piece_set_end">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="end" />
        </parameters>
      </method>
    </object>
    <object name="Import" cname="CdnImport" parent="CdnNode">
      <field name="Priv" cname="priv" type="CdnImportPrivate*" />
      <property name="File" cname="file" type="GFile" readable="true" writeable="true" construct-only="true" />
      <property name="Path" cname="path" type="gchar*" readable="true" />
      <implements>
        <interface cname="CdnModifiable" />
      </implements>
      <method name="AppendSearchPath" cname="cdn_import_append_search_path" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_import_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetFile" cname="cdn_import_get_file">
        <return-type type="GFile*" />
      </method>
      <method name="GetPath" cname="cdn_import_get_path">
        <return-type type="gchar*" />
      </method>
      <method name="GetSearchPath" cname="cdn_import_get_search_path" shared="true">
        <return-type type="const-gchar**" />
      </method>
      <method name="GetType" cname="cdn_import_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ImportsObject" cname="cdn_import_imports_object">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </method>
      <method name="Load" cname="cdn_import_load">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
          <parameter type="CdnNode*" name="parent" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="cdn_import_new">
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
          <parameter type="CdnNode*" name="parent" />
          <parameter type="const-gchar*" name="id" />
          <parameter type="GFile*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="cdn_import_new_from_path">
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
          <parameter type="CdnNode*" name="parent" />
          <parameter type="const-gchar*" name="id" />
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="PrependSearchPath" cname="cdn_import_prepend_search_path" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="SetSearchPath" cname="cdn_import_set_search_path" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="gchar**" name="path" />
        </parameters>
      </method>
    </object>
    <object name="ImportAlias" cname="CdnImportAlias" parent="CdnImport">
      <field name="Priv" cname="priv" type="CdnImportAliasPrivate*" />
      <property name="Source" cname="source" type="CdnImport" readable="true" writeable="true" construct-only="true" />
      <method name="GetType" cname="cdn_import_alias_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_import_alias_new">
        <parameters>
          <parameter type="CdnImport*" name="source" />
        </parameters>
      </constructor>
    </object>
    <object name="Instruction" cname="CdnInstruction" parent="CdnMiniObject">
      <field name="Priv" cname="priv" type="CdnInstructionPrivate*" />
      <virtual_method name="ToString" cname="to_string">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnInstruction*" name="instruction" />
        </parameters>
      </virtual_method>
      <virtual_method name="Execute" cname="execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnInstruction*" name="instruction" />
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetDependencies" cname="get_dependencies">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="CdnInstruction*" name="instruction" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetIsCommutative" cname="get_is_commutative">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnInstruction*" name="instruction" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnInstruction*" name="i1" />
          <parameter type="CdnInstruction*" name="i2" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </virtual_method>
      <method name="Equal" cname="cdn_instruction_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnInstruction*" name="i2" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </method>
      <method name="Execute" cname="cdn_instruction_execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </method>
      <method name="GetDependencies" cname="cdn_instruction_get_dependencies">
        <return-type type="GSList*" />
      </method>
      <method name="GetIsCommutative" cname="cdn_instruction_get_is_commutative">
        <return-type type="gboolean" />
      </method>
      <method name="GetStackManipulation" cname="cdn_instruction_get_stack_manipulation">
        <return-type type="const-CdnStackManipulation*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_instruction_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ToString" cname="cdn_instruction_to_string">
        <return-type type="gchar*" />
      </method>
    </object>
    <object name="InstructionCustomFunction" cname="CdnInstructionCustomFunction" parent="CdnInstruction">
      <field name="Priv" cname="priv" type="CdnInstructionCustomFunctionPrivate*" />
      <method name="GetFunction" cname="cdn_instruction_custom_function_get_function">
        <return-type type="CdnFunction*" />
      </method>
      <method name="GetType" cname="cdn_instruction_custom_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_instruction_custom_function_new">
        <parameters>
          <parameter type="CdnFunction*" name="function" />
          <parameter type="gint" name="arguments" />
          <parameter type="gint*" name="argdim" />
        </parameters>
      </constructor>
    </object>
    <object name="InstructionCustomOperator" cname="CdnInstructionCustomOperator" parent="CdnInstruction">
      <field name="Priv" cname="priv" type="CdnInstructionCustomOperatorPrivate*" />
      <method name="GetOperator" cname="cdn_instruction_custom_operator_get_operator">
        <return-type type="CdnOperator*" />
      </method>
      <method name="GetType" cname="cdn_instruction_custom_operator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_instruction_custom_operator_new">
        <parameters>
          <parameter type="CdnOperator*" name="op" />
        </parameters>
      </constructor>
    </object>
    <object name="InstructionFunction" cname="CdnInstructionFunction" parent="CdnInstruction">
      <field name="Priv" cname="priv" type="CdnInstructionFunctionPrivate*" />
      <method name="GetArgumentsDimension" cname="cdn_instruction_function_get_arguments_dimension">
        <return-type type="gint*" />
      </method>
      <method name="GetId" cname="cdn_instruction_function_get_id">
        <return-type type="guint" />
      </method>
      <method name="GetName" cname="cdn_instruction_function_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cdn_instruction_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_instruction_function_new">
        <parameters>
          <parameter type="guint" name="id" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint" name="arguments" />
          <parameter type="gint*" name="argdim" />
        </parameters>
      </constructor>
      <method name="SetName" cname="cdn_instruction_function_set_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
    </object>
    <object name="InstructionNumber" cname="CdnInstructionNumber" parent="CdnInstruction">
      <field name="Priv" cname="priv" type="CdnInstructionNumberPrivate*" />
      <method name="GetRepresentation" cname="cdn_instruction_number_get_representation">
        <return-type type="gchar*" />
      </method>
      <method name="GetType" cname="cdn_instruction_number_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetValue" cname="cdn_instruction_number_get_value">
        <return-type type="gdouble" />
      </method>
      <constructor cname="cdn_instruction_number_new">
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </constructor>
      <constructor cname="cdn_instruction_number_new_from_string">
        <parameters>
          <parameter type="const-gchar*" name="repr" />
        </parameters>
      </constructor>
      <method name="SetRepresentation" cname="cdn_instruction_number_set_representation">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="repr" />
        </parameters>
      </method>
      <method name="SetValue" cname="cdn_instruction_number_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
    </object>
    <object name="InstructionRand" cname="CdnInstructionRand" parent="CdnInstruction">
      <field name="Priv" cname="priv" type="CdnInstructionRandPrivate*" />
      <method name="GetType" cname="cdn_instruction_rand_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_instruction_rand_new">
        <parameters>
          <parameter type="gint" name="numargs" />
          <parameter type="gint*" name="argdim" />
        </parameters>
      </constructor>
      <method name="Next" cname="cdn_instruction_rand_next">
        <return-type type="void" />
      </method>
    </object>
    <object name="InstructionVariable" cname="CdnInstructionVariable" parent="CdnInstruction">
      <field name="Priv" cname="priv" type="CdnInstructionVariablePrivate*" />
      <method name="GetBinding" cname="cdn_instruction_variable_get_binding">
        <return-type type="CdnInstructionVariableBinding" />
      </method>
      <method name="GetType" cname="cdn_instruction_variable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVariable" cname="cdn_instruction_variable_get_variable">
        <return-type type="CdnVariable*" />
      </method>
      <constructor cname="cdn_instruction_variable_new">
        <parameters>
          <parameter type="CdnVariable*" name="property" />
        </parameters>
      </constructor>
      <constructor cname="cdn_instruction_variable_new_with_binding">
        <parameters>
          <parameter type="CdnVariable*" name="property" />
          <parameter type="CdnInstructionVariableBinding" name="binding" />
        </parameters>
      </constructor>
      <method name="SetBinding" cname="cdn_instruction_variable_set_binding">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnInstructionVariableBinding" name="binding" />
        </parameters>
      </method>
      <method name="SetVariable" cname="cdn_instruction_variable_set_variable">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariable*" name="property" />
        </parameters>
      </method>
    </object>
    <object name="Integrator" cname="CdnIntegrator" parent="CdnObject">
      <field name="Priv" cname="priv" type="CdnIntegratorPrivate*" />
      <property name="Object" cname="object" type="CdnObject" readable="true" writeable="true" />
      <property name="Time" cname="time" type="gdouble" readable="true" />
      <signal name="Step" cname="step" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnIntegrator*" />
          <parameter name="p0" type="gdouble" />
          <parameter name="p1" type="gdouble" />
        </parameters>
      </signal>
      <signal name="Begin" cname="begin" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnIntegrator*" />
          <parameter name="p0" type="gdouble" />
        </parameters>
      </signal>
      <signal name="End" cname="end" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnIntegrator*" />
        </parameters>
      </signal>
      <property name="State" cname="state" type="CdnIntegratorState" readable="true" />
      <property name="InitialPhase" cname="initial-phase" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="RealTime" cname="real-time" type="gdouble" readable="true" writeable="true" construct="true" />
      <virtual_method name="Run" cname="run">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnIntegrator*" name="integrator" />
          <parameter type="gdouble" name="from" />
          <parameter type="gdouble" name="timestep" />
          <parameter type="gdouble" name="to" />
        </parameters>
      </virtual_method>
      <virtual_method name="Step" cname="step">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="CdnIntegrator*" name="integrator" />
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnIntegrator*" name="integrator" />
        </parameters>
      </virtual_method>
      <method name="Begin" cname="cdn_integrator_begin">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble" name="start" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="End" cname="cdn_integrator_end">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Evaluate" cname="cdn_integrator_evaluate">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
      <method name="GetName" cname="cdn_integrator_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetObject" cname="cdn_integrator_get_object">
        <return-type type="CdnObject*" />
      </method>
      <method name="GetRealTime" cname="cdn_integrator_get_real_time">
        <return-type type="gdouble" />
      </method>
      <method name="GetState" cname="cdn_integrator_get_state">
        <return-type type="CdnIntegratorState*" />
      </method>
      <method name="GetTime" cname="cdn_integrator_get_time">
        <return-type type="gdouble" />
      </method>
      <method name="GetType" cname="cdn_integrator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Reset" cname="cdn_integrator_reset">
        <return-type type="void" />
      </method>
      <method name="Run" cname="cdn_integrator_run">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble" name="from" />
          <parameter type="gdouble" name="timestep" />
          <parameter type="gdouble" name="to" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetRealTime" cname="cdn_integrator_set_real_time">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="real_time" />
        </parameters>
      </method>
      <method name="SetState" cname="cdn_integrator_set_state">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnIntegratorState*" name="state" />
        </parameters>
      </method>
      <method name="SetTime" cname="cdn_integrator_set_time">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="t" />
        </parameters>
      </method>
      <method name="SimulationStepIntegrate" cname="cdn_integrator_simulation_step_integrate">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GSList*" name="actions" />
        </parameters>
      </method>
      <method name="Step" cname="cdn_integrator_step">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
      <method name="StepPrepare" cname="cdn_integrator_step_prepare">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
    </object>
    <object name="IntegratorEuler" cname="CdnIntegratorEuler" parent="CdnIntegrator">
      <field name="Priv" cname="priv" type="CdnIntegratorEulerPrivate*" />
      <method name="GetType" cname="cdn_integrator_euler_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_integrator_euler_new" />
    </object>
    <object name="IntegratorRungeKutta" cname="CdnIntegratorRungeKutta" parent="CdnIntegrator">
      <field name="Priv" cname="priv" type="CdnIntegratorRungeKuttaPrivate*" />
      <method name="GetType" cname="cdn_integrator_runge_kutta_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_integrator_runge_kutta_new" />
    </object>
    <object name="IntegratorState" cname="CdnIntegratorState" parent="GObject">
      <field name="Priv" cname="priv" type="CdnIntegratorStatePrivate*" />
      <signal name="Updated" cname="updated" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnIntegratorState*" />
        </parameters>
      </signal>
      <property name="Object" cname="object" type="CdnObject" readable="true" writeable="true" construct-only="true" />
      <property name="Phase" cname="phase" type="gchar*" readable="true" writeable="true" construct="true" />
      <method name="AllVariables" cname="cdn_integrator_state_all_variables">
        <return-type type="const-GSList*" />
      </method>
      <method name="DirectEdgeActions" cname="cdn_integrator_state_direct_edge_actions">
        <return-type type="const-GSList*" />
      </method>
      <method name="DirectVariables" cname="cdn_integrator_state_direct_variables">
        <return-type type="const-GSList*" />
      </method>
      <method name="Events" cname="cdn_integrator_state_events">
        <return-type type="const-GSList*" />
      </method>
      <method name="Expressions" cname="cdn_integrator_state_expressions">
        <return-type type="const-GSList*" />
      </method>
      <method name="Functions" cname="cdn_integrator_state_functions">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetObject" cname="cdn_integrator_state_get_object">
        <return-type type="CdnObject*" />
      </method>
      <method name="GetPhase" cname="cdn_integrator_state_get_phase">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cdn_integrator_state_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IntegratedEdgeActions" cname="cdn_integrator_state_integrated_edge_actions">
        <return-type type="const-GSList*" />
      </method>
      <method name="IntegratedVariables" cname="cdn_integrator_state_integrated_variables">
        <return-type type="const-GSList*" />
      </method>
      <method name="Io" cname="cdn_integrator_state_io">
        <return-type type="const-GSList*" />
      </method>
      <constructor cname="cdn_integrator_state_new">
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </constructor>
      <method name="Operators" cname="cdn_integrator_state_operators">
        <return-type type="const-GSList*" />
      </method>
      <method name="PhaseDirectEdgeActions" cname="cdn_integrator_state_phase_direct_edge_actions">
        <return-type type="const-GSList*" />
      </method>
      <method name="PhaseEvents" cname="cdn_integrator_state_phase_events">
        <return-type type="const-GSList*" />
      </method>
      <method name="PhaseIntegratedEdgeActions" cname="cdn_integrator_state_phase_integrated_edge_actions">
        <return-type type="const-GSList*" />
      </method>
      <method name="RandExpressions" cname="cdn_integrator_state_rand_expressions">
        <return-type type="const-GSList*" />
      </method>
      <method name="RandInstructions" cname="cdn_integrator_state_rand_instructions">
        <return-type type="const-GSList*" />
      </method>
      <method name="SetPhase" cname="cdn_integrator_state_set_phase">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="phase" />
        </parameters>
      </method>
      <method name="Update" cname="cdn_integrator_state_update">
        <return-type type="void" />
      </method>
    </object>
    <object name="Layout" cname="CdnLayout" parent="GObject">
      <field name="Priv" cname="priv" type="CdnLayoutPrivate*" />
      <property name="Network" cname="network" type="CdnNetwork" readable="true" writeable="true" construct-only="true" />
      <method name="Add" cname="cdn_layout_add">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnLayoutable*" name="left" />
          <parameter type="CdnLayoutable*" name="right" />
          <parameter type="CdnLayoutRelation" name="relation" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_layout_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_layout_new">
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
        </parameters>
      </constructor>
      <method name="Set" cname="cdn_layout_set">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnLayoutable*" name="layoutable" />
          <parameter type="gint" name="x" />
          <parameter type="gint" name="y" />
        </parameters>
      </method>
    </object>
    <object name="MiniObject" cname="CdnMiniObject" parent="GTypeInstance">
      <method name="Copy" cname="cdn_mini_object_copy">
        <return-type type="CdnMiniObject*" owned="true" />
      </method>
      <method name="Free" cname="cdn_mini_object_free">
        <return-type type="void" />
      </method>
      <method name="GetType" cname="cdn_mini_object_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_mini_object_new">
        <parameters>
          <parameter type="GType" name="type" />
        </parameters>
      </constructor>
    </object>
    <object name="Monitor" cname="CdnMonitor" parent="GObject">
      <field name="Priv" cname="priv" type="CdnMonitorPrivate*" />
      <property name="Network" cname="network" type="CdnNetwork" readable="true" writeable="true" construct-only="true" />
      <property name="Property" cname="property" type="CdnVariable" readable="true" writeable="true" construct-only="true" />
      <method name="GetData" cname="cdn_monitor_get_data">
        <return-type type="const-gdouble*" />
        <parameters>
          <parameter type="guint*" name="size" />
        </parameters>
      </method>
      <method name="GetDataResampled" cname="cdn_monitor_get_data_resampled">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gdouble*" name="sites" />
          <parameter type="guint" name="size" />
          <parameter type="gdouble*" name="ret" />
        </parameters>
      </method>
      <method name="GetSites" cname="cdn_monitor_get_sites">
        <return-type type="const-gdouble*" />
        <parameters>
          <parameter type="guint*" name="size" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVariable" cname="cdn_monitor_get_variable">
        <return-type type="CdnVariable*" />
      </method>
      <constructor cname="cdn_monitor_new">
        <parameters>
          <parameter type="CdnNetworkForward*" name="network" />
          <parameter type="CdnVariable*" name="property" />
        </parameters>
      </constructor>
    </object>
    <object name="Network" cname="CdnNetwork" parent="CdnNode">
      <field name="Priv" cname="priv" type="CdnNetworkPrivate*" />
      <signal name="CompileError" cname="compile-error" when="LAST" field_name="compile_error">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
          <parameter type="CdnCompileError*" name="error" />
        </parameters>
      </signal>
      <property name="Integrator" cname="integrator" type="CdnIntegrator" readable="true" writeable="true" />
      <property name="File" cname="file" type="GFile" readable="true" writeable="true" construct="true" />
      <property name="Filename" cname="filename" type="gchar*" readable="true" />
      <method name="Begin" cname="cdn_network_begin">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble" name="start" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="End" cname="cdn_network_end">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_network_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="FormatFromFile" cname="cdn_network_format_from_file" shared="true">
        <return-type type="CdnNetworkFormat" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </method>
      <method name="FormatFromStream" cname="cdn_network_format_from_stream" shared="true">
        <return-type type="CdnNetworkFormat" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
        </parameters>
      </method>
      <method name="GetFile" cname="cdn_network_get_file">
        <return-type type="GFile*" />
      </method>
      <method name="GetImport" cname="cdn_network_get_import">
        <return-type type="CdnImportForward*" />
        <parameters>
          <parameter type="GFile*" name="file" />
        </parameters>
      </method>
      <method name="GetImportFromPath" cname="cdn_network_get_import_from_path">
        <return-type type="CdnImportForward*" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="GetIntegrator" cname="cdn_network_get_integrator">
        <return-type type="CdnIntegrator*" />
      </method>
      <method name="GetPath" cname="cdn_network_get_path">
        <return-type type="gchar*" />
      </method>
      <method name="GetTemplateNode" cname="cdn_network_get_template_node">
        <return-type type="CdnNode*" />
      </method>
      <method name="GetType" cname="cdn_network_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LoadErrorQuark" cname="cdn_network_load_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="LoadFromFile" cname="cdn_network_load_from_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadFromPath" cname="cdn_network_load_from_path">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadFromStream" cname="cdn_network_load_from_stream">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadFromString" cname="cdn_network_load_from_string">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="s" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Merge" cname="cdn_network_merge">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnNetwork*" name="other" />
        </parameters>
      </method>
      <method name="MergeFromFile" cname="cdn_network_merge_from_file">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MergeFromPath" cname="cdn_network_merge_from_path">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MergeFromString" cname="cdn_network_merge_from_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="s" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="cdn_network_new" />
      <constructor cname="cdn_network_new_from_file">
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="cdn_network_new_from_path">
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="cdn_network_new_from_stream">
        <parameters>
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="cdn_network_new_from_string">
        <parameters>
          <parameter type="const-gchar*" name="s" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="Run" cname="cdn_network_run">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble" name="from" />
          <parameter type="gdouble" name="timestep" />
          <parameter type="gdouble" name="to" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetIntegrator" cname="cdn_network_set_integrator">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnIntegrator*" name="integrator" />
        </parameters>
      </method>
      <method name="Step" cname="cdn_network_step">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
    </object>
    <object name="NetworkDeserializer" cname="CdnNetworkDeserializer" parent="GObject">
      <field name="Priv" cname="priv" type="CdnNetworkDeserializerPrivate*" />
      <property name="Network" cname="network" type="CdnNetwork" readable="true" writeable="true" construct-only="true" />
      <property name="Root" cname="root" type="CdnNode" readable="true" writeable="true" construct-only="true" />
      <method name="Deserialize" cname="cdn_network_deserializer_deserialize">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="DeserializePath" cname="cdn_network_deserializer_deserialize_path">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_network_deserializer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_network_deserializer_new">
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
          <parameter type="CdnNode*" name="root" />
        </parameters>
      </constructor>
    </object>
    <object name="NetworkSerializer" cname="CdnNetworkSerializer" parent="GObject">
      <field name="Priv" cname="priv" type="CdnNetworkSerializerPrivate*" />
      <property name="Network" cname="network" type="CdnNetwork" readable="true" writeable="true" construct-only="true" />
      <property name="Root" cname="root" type="CdnNode" readable="true" writeable="true" construct-only="true" />
      <method name="GetType" cname="cdn_network_serializer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_network_serializer_new">
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
          <parameter type="CdnNode*" name="root" />
        </parameters>
      </constructor>
      <method name="Serialize" cname="cdn_network_serializer_serialize">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GOutputStream*" name="stream" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SerializeFile" cname="cdn_network_serializer_serialize_file">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SerializeMemory" cname="cdn_network_serializer_serialize_memory">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SerializePath" cname="cdn_network_serializer_serialize_path">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="Node" cname="CdnNode" parent="CdnObject">
      <field name="Priv" cname="priv" type="CdnNodePrivate*" />
      <property name="Proxy" cname="proxy" type="CdnObject" readable="true" writeable="true" construct-only="true" />
      <signal name="ChildAdded" cname="child-added" when="LAST" field_name="child_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnNode*" name="node" />
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </signal>
      <signal name="ChildRemoved" cname="child-removed" when="LAST" field_name="child_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnNode*" name="node" />
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </signal>
      <signal name="VerifyRemoveChild" cname="verify-remove-child" when="LAST" manual="true" field_name="verify_remove_child">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnNode*" name="node" />
          <parameter type="CdnObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </signal>
      <signal name="VerifyAddChild" cname="verify-add-child" when="LAST" manual="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter name="inst" type="CdnNode*" />
          <parameter name="p0" type="CdnObject" />
          <parameter name="p1" type="gpointer" />
        </parameters>
      </signal>
      <virtual_method name="Add" cname="add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnNode*" name="node" />
          <parameter type="CdnObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Remove" cname="remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnNode*" name="node" />
          <parameter type="CdnObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="Add" cname="cdn_node_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_node_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="FindObject" cname="cdn_node_find_object">
        <return-type type="CdnObject*" />
        <parameters>
          <parameter type="const-gchar*" name="selector" />
        </parameters>
      </method>
      <method name="FindObjects" cname="cdn_node_find_objects">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="const-gchar*" name="selector" />
        </parameters>
      </method>
      <method name="FindVariable" cname="cdn_node_find_variable">
        <return-type type="CdnVariable*" />
        <parameters>
          <parameter type="const-gchar*" name="selector" />
        </parameters>
      </method>
      <method name="FindVariables" cname="cdn_node_find_variables">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="const-gchar*" name="selector" />
        </parameters>
      </method>
      <method name="Foreach" cname="cdn_node_foreach">
        <return-type type="void" />
        <parameters>
          <parameter type="GFunc" name="func" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="GetActors" cname="cdn_node_get_actors">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetAutoTemplatesForChild" cname="cdn_node_get_auto_templates_for_child">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="CdnObject*" name="child" />
        </parameters>
      </method>
      <method name="GetChild" cname="cdn_node_get_child">
        <return-type type="CdnObject*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetChildren" cname="cdn_node_get_children">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetEdges" cname="cdn_node_get_edges">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetProxy" cname="cdn_node_get_proxy">
        <return-type type="CdnObject*" />
      </method>
      <method name="GetSelfEdge" cname="cdn_node_get_self_edge">
        <return-type type="CdnEdgeForward*" />
      </method>
      <method name="GetType" cname="cdn_node_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVariableInterface" cname="cdn_node_get_variable_interface">
        <return-type type="CdnVariableInterface*" />
      </method>
      <method name="HasSelfEdge" cname="cdn_node_has_self_edge">
        <return-type type="gboolean" />
      </method>
      <constructor cname="cdn_node_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter type="CdnObject*" name="proxy" />
        </parameters>
      </constructor>
      <method name="Remove" cname="cdn_node_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetProxy" cname="cdn_node_set_proxy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="proxy" />
        </parameters>
      </method>
      <method name="VariableIsProxy" cname="cdn_node_variable_is_proxy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="VerifyRemoveChild" cname="cdn_node_verify_remove_child">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="child" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="Object" cname="CdnObject" parent="GObject">
      <field name="Priv" cname="priv" type="CdnObjectPrivate*" />
      <property name="Id" cname="id" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Parent" cname="parent" type="CdnObject" readable="true" />
      <property name="AutoImported" cname="auto-imported" type="gboolean" readable="true" writeable="true" construct="true" />
      <signal name="Tainted" cname="tainted" when="LAST" field_name="tainted">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </signal>
      <signal name="Compiled" cname="compiled" when="LAST" field_name="compiled">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </signal>
      <signal name="Resetted" cname="resetted" when="LAST" field_name="resetted">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </signal>
      <signal name="Copied" cname="copied" when="LAST" field_name="copied">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnObject*" name="copy" />
        </parameters>
      </signal>
      <signal name="VerifyRemoveVariable" cname="verify-remove-variable" when="LAST" manual="true" field_name="verify_remove_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </signal>
      <signal name="VariableAdded" cname="variable-added" when="LAST" field_name="variable_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnVariable*" name="variable" />
        </parameters>
      </signal>
      <signal name="VariableRemoved" cname="variable-removed" when="LAST" field_name="variable_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnVariable*" name="variable" />
        </parameters>
      </signal>
      <signal name="TemplateApplied" cname="template-applied" when="LAST" field_name="template_applied">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnObject*" name="templ" />
        </parameters>
      </signal>
      <signal name="TemplateUnapplied" cname="template-unapplied" when="LAST" field_name="template_unapplied">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnObject*" name="templ" />
        </parameters>
      </signal>
      <virtual_method name="Compile" cname="compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnCompileContext*" name="context" />
          <parameter type="CdnCompileErrorForward*" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="ForeachExpression" cname="foreach_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnForeachExpressionFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </virtual_method>
      <virtual_method name="ApplyTemplate" cname="apply_template">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnObject*" name="templ" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnapplyTemplate" cname="unapply_template">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnObject*" name="templ" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnObject*" name="source" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetCopyType" cname="get_copy_type">
        <return-type type="GType" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="Taint" cname="taint">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetVariables" cname="get_variables">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetVariable" cname="get_variable">
        <return-type type="CdnVariable*" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </virtual_method>
      <virtual_method name="HasVariable" cname="has_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </virtual_method>
      <virtual_method name="AddVariable" cname="add_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnVariable*" name="variable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="RemoveVariable" cname="remove_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Clear" cname="clear">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="first" />
          <parameter type="CdnObject*" name="second" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetCompileContext" cname="get_compile_context">
        <return-type type="CdnCompileContext*" />
        <parameters>
          <parameter type="CdnObject*" name="object" />
          <parameter type="CdnCompileContext*" name="context" />
        </parameters>
      </virtual_method>
      <method name="AddVariable" cname="cdn_object_add_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnVariable*" name="variable" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ApplyTemplate" cname="cdn_object_apply_template">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="templ" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Clear" cname="cdn_object_clear">
        <return-type type="void" />
      </method>
      <method name="Compile" cname="cdn_object_compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnCompileContext*" name="context" />
          <parameter type="CdnCompileErrorForward*" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="cdn_object_copy">
        <return-type type="CdnObject*" owned="true" />
      </method>
      <method name="Equal" cname="cdn_object_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="second" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_object_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="ForeachExpression" cname="cdn_object_foreach_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnForeachExpressionFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </method>
      <method name="GetAppliedTemplates" cname="cdn_object_get_applied_templates">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetAutoImported" cname="cdn_object_get_auto_imported">
        <return-type type="gboolean" />
      </method>
      <method name="GetCompileContext" cname="cdn_object_get_compile_context">
        <return-type type="CdnCompileContext*" />
        <parameters>
          <parameter type="CdnCompileContext*" name="context" />
        </parameters>
      </method>
      <method name="GetFullId" cname="cdn_object_get_full_id">
        <return-type type="gchar*" />
      </method>
      <method name="GetFullIdForDisplay" cname="cdn_object_get_full_id_for_display">
        <return-type type="gchar*" />
      </method>
      <method name="GetId" cname="cdn_object_get_id">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetParent" cname="cdn_object_get_parent">
        <return-type type="CdnNodeForward*" />
      </method>
      <method name="GetRelativeId" cname="cdn_object_get_relative_id">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnNodeForward*" name="parent" />
        </parameters>
      </method>
      <method name="GetRelativeIdForDisplay" cname="cdn_object_get_relative_id_for_display">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnNodeForward*" name="parent" />
        </parameters>
      </method>
      <method name="GetTemplateAppliesTo" cname="cdn_object_get_template_applies_to">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetType" cname="cdn_object_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetVariable" cname="cdn_object_get_variable">
        <return-type type="CdnVariable*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetVariableTemplate" cname="cdn_object_get_variable_template">
        <return-type type="CdnObject*" />
        <parameters>
          <parameter type="CdnVariable*" name="variable" />
          <parameter type="gboolean" name="match_full" />
        </parameters>
      </method>
      <method name="GetVariables" cname="cdn_object_get_variables">
        <return-type type="GSList*" />
      </method>
      <method name="HasVariable" cname="cdn_object_has_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="IsCompiled" cname="cdn_object_is_compiled">
        <return-type type="gboolean" />
      </method>
      <constructor cname="cdn_object_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </constructor>
      <constructor cname="cdn_object_new_from_template">
        <parameters>
          <parameter type="CdnObject*" name="templ" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="RemoveVariable" cname="cdn_object_remove_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Reset" cname="cdn_object_reset">
        <return-type type="void" />
      </method>
      <method name="SetAutoImported" cname="cdn_object_set_auto_imported">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="auto_imported" />
        </parameters>
      </method>
      <method name="SetId" cname="cdn_object_set_id">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </method>
      <method name="Taint" cname="cdn_object_taint">
        <return-type type="void" />
      </method>
      <method name="UnapplyTemplate" cname="cdn_object_unapply_template">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnObject*" name="templ" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="VerifyRemoveVariable" cname="cdn_object_verify_remove_variable">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="Operator" cname="CdnOperator" parent="GObject">
      <field name="Priv" cname="priv" type="CdnOperatorPrivate*" />
      <virtual_method name="Execute" cname="execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </virtual_method>
      <virtual_method name="Initialize" cname="initialize">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="const-GSList**" name="expressions" />
          <parameter type="gint" name="num_expressions" />
          <parameter type="const-GSList**" name="indices" />
          <parameter type="gint" name="num_indices" />
          <parameter type="gint" name="num_arguments" />
          <parameter type="gint*" name="argdim" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="gchar*" />
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="CdnOperator*" name="other" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetFunction" cname="get_function">
        <return-type type="CdnFunctionForward*" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="gint*" name="idx" />
          <parameter type="gint" name="numidx" />
        </parameters>
      </virtual_method>
      <virtual_method name="ForeachFunction" cname="foreach_function">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="CdnForeachFunctionFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </virtual_method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="CdnOperator*" owned="true" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
        </parameters>
      </virtual_method>
      <virtual_method name="Step" cname="step">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </virtual_method>
      <virtual_method name="InitializeIntegrate" cname="initialize_integrate">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnOperator*" name="op" />
          <parameter type="CdnIntegrator*" name="integrator" />
        </parameters>
      </virtual_method>
      <method name="AllExpressions" cname="cdn_operator_all_expressions">
        <return-type type="const-GSList**" />
      </method>
      <method name="AllIndices" cname="cdn_operator_all_indices">
        <return-type type="const-GSList**" />
      </method>
      <method name="Copy" cname="cdn_operator_copy">
        <return-type type="CdnOperator*" owned="true" />
      </method>
      <method name="Equal" cname="cdn_operator_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnOperator*" name="other" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_operator_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="Execute" cname="cdn_operator_execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </method>
      <method name="ForeachFunction" cname="cdn_operator_foreach_function">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnForeachFunctionFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </method>
      <method name="GetArgumentsDimension" cname="cdn_operator_get_arguments_dimension">
        <return-type type="gint*" />
      </method>
      <method name="GetClassName" cname="cdn_operator_get_class_name" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="CdnOperatorClass*" name="op" />
        </parameters>
      </method>
      <method name="GetExpressions" cname="cdn_operator_get_expressions">
        <return-type type="const-GSList*" />
        <parameters>
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="GetFunction" cname="cdn_operator_get_function">
        <return-type type="CdnFunction*" />
        <parameters>
          <parameter type="gint*" name="idx" />
          <parameter type="gint" name="numidx" />
        </parameters>
      </method>
      <method name="GetIndices" cname="cdn_operator_get_indices">
        <return-type type="const-GSList*" />
        <parameters>
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="GetName" cname="cdn_operator_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetNumArguments" cname="cdn_operator_get_num_arguments">
        <return-type type="gint" />
      </method>
      <method name="GetPrimaryFunction" cname="cdn_operator_get_primary_function">
        <return-type type="CdnFunction*" />
      </method>
      <method name="GetStackManipulation" cname="cdn_operator_get_stack_manipulation">
        <return-type type="const-CdnStackManipulation*" />
      </method>
      <method name="GetType" cname="cdn_operator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Initialize" cname="cdn_operator_initialize">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-GSList**" name="expressions" />
          <parameter type="gint" name="num_expressions" />
          <parameter type="const-GSList**" name="indices" />
          <parameter type="gint" name="num_indices" />
          <parameter type="gint" name="num_arguments" />
          <parameter type="gint*" name="argdim" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="InitializeIntegrate" cname="cdn_operator_initialize_integrate">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnIntegrator*" name="integrator" />
        </parameters>
      </method>
      <method name="NumExpressions" cname="cdn_operator_num_expressions">
        <return-type type="gint" />
      </method>
      <method name="NumIndices" cname="cdn_operator_num_indices">
        <return-type type="gint" />
      </method>
      <method name="Reset" cname="cdn_operator_reset">
        <return-type type="void" />
      </method>
      <method name="Step" cname="cdn_operator_step">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
    </object>
    <object name="OperatorDelayed" cname="CdnOperatorDelayed" parent="CdnOperator">
      <field name="Priv" cname="priv" type="CdnOperatorDelayedPrivate*" />
      <property name="Expression" cname="expression" type="CdnExpression" readable="true" />
      <property name="InitialValue" cname="initial-value" type="CdnExpression" readable="true" />
      <method name="GetExpression" cname="cdn_operator_delayed_get_expression">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetInitialValue" cname="cdn_operator_delayed_get_initial_value">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetType" cname="cdn_operator_delayed_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_operator_delayed_new" />
    </object>
    <object name="OperatorDfDt" cname="CdnOperatorDfDt" parent="CdnOperator">
      <field name="Priv" cname="priv" type="CdnOperatorDfDtPrivate*" />
      <property name="Expression" cname="expression" type="CdnExpression" readable="true" />
      <property name="Derived" cname="derived" type="CdnExpression" readable="true" />
      <property name="Order" cname="order" type="gint" readable="true" />
      <method name="GetDerived" cname="cdn_operator_df_dt_get_derived">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetExpression" cname="cdn_operator_df_dt_get_expression">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetOrder" cname="cdn_operator_df_dt_get_order">
        <return-type type="gint" />
      </method>
      <method name="GetType" cname="cdn_operator_df_dt_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_operator_df_dt_new" />
    </object>
    <object name="OperatorDiff" cname="CdnOperatorDiff" parent="CdnOperator">
      <field name="Priv" cname="priv" type="CdnOperatorDiffPrivate*" />
      <method name="GetType" cname="cdn_operator_diff_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_operator_diff_new" />
    </object>
    <object name="OperatorLinsolve" cname="CdnOperatorLinsolve" parent="CdnOperator">
      <field name="Priv" cname="priv" type="CdnOperatorLinsolvePrivate*" />
      <method name="GetType" cname="cdn_operator_linsolve_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_operator_linsolve_new" />
    </object>
    <object name="OperatorPDiff" cname="CdnOperatorPDiff" parent="CdnOperator">
      <field name="Priv" cname="priv" type="CdnOperatorPDiffPrivate*" />
      <method name="GetType" cname="cdn_operator_pdiff_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_operator_pdiff_new" />
    </object>
    <object name="OperatorSimplify" cname="CdnOperatorSimplify" parent="CdnOperator">
      <field name="Priv" cname="priv" type="CdnOperatorSimplifyPrivate*" />
      <method name="GetType" cname="cdn_operator_simplify_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_operator_simplify_new" />
    </object>
    <object name="ParamSpecMiniObject" cname="CdnParamSpecMiniObject" parent="GParamSpec">
      <method name="GetType" cname="cdn_param_spec_mini_object_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </object>
    <object name="ParserContext" cname="CdnParserContext" parent="GObject">
      <field name="Priv" cname="priv" type="CdnParserContextPrivate*" />
      <property name="Network" cname="network" type="CdnNetwork" readable="true" writeable="true" construct-only="true" />
      <signal name="ContextPushed" cname="context-pushed" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnParserContext*" />
        </parameters>
      </signal>
      <signal name="ContextPopped" cname="context-popped" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnParserContext*" />
        </parameters>
      </signal>
      <signal name="SelectorItemPushed" cname="selector-item-pushed" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnParserContext*" />
          <parameter name="p0" type="CdnSelector" />
        </parameters>
      </signal>
      <signal name="FileUsed" cname="file-used" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnParserContext*" />
          <parameter name="p0" type="gfile" />
          <parameter name="p1" type="gchar*" />
        </parameters>
      </signal>
      <method name="AddAction" cname="cdn_parser_context_add_action">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="target" />
          <parameter type="CdnEmbeddedString*" name="expression" />
          <parameter type="GSList*" name="attributes" />
          <parameter type="CdnEmbeddedString*" name="phases" />
        </parameters>
      </method>
      <method name="AddEventSetVariable" cname="cdn_parser_context_add_event_set_variable">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="selector" />
          <parameter type="CdnEmbeddedString*" name="value" />
        </parameters>
      </method>
      <method name="AddIntegratorVariable" cname="cdn_parser_context_add_integrator_variable">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="CdnEmbeddedString*" name="value" />
        </parameters>
      </method>
      <method name="AddInterface" cname="cdn_parser_context_add_interface">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="CdnEmbeddedString*" name="child_name" />
          <parameter type="CdnEmbeddedString*" name="property_name" />
          <parameter type="gboolean" name="is_optional" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="AddLayout" cname="cdn_parser_context_add_layout">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnLayoutRelation" name="relation" />
          <parameter type="CdnSelector*" name="left" />
          <parameter type="CdnSelector*" name="right" />
        </parameters>
      </method>
      <method name="AddLayoutPosition" cname="cdn_parser_context_add_layout_position">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="selector" />
          <parameter type="CdnEmbeddedString*" name="x" />
          <parameter type="CdnEmbeddedString*" name="y" />
          <parameter type="CdnSelector*" name="of" />
          <parameter type="gboolean" name="cartesian" />
        </parameters>
      </method>
      <method name="AddPolynomial" cname="cdn_parser_context_add_polynomial">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="GSList*" name="pieces" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="AddVariable" cname="cdn_parser_context_add_variable">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="CdnEmbeddedString*" name="count_name" />
          <parameter type="CdnEmbeddedString*" name="expression" />
          <parameter type="CdnVariableFlags" name="add_flags" />
          <parameter type="CdnVariableFlags" name="remove_flags" />
          <parameter type="GSList*" name="attributes" />
          <parameter type="gboolean" name="assign_optional" />
          <parameter type="CdnEmbeddedString*" name="constraint" />
        </parameters>
      </method>
      <method name="ApplyTemplate" cname="cdn_parser_context_apply_template">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="templates" />
          <parameter type="CdnSelector*" name="targets" />
        </parameters>
      </method>
      <method name="BeginSelectorItem" cname="cdn_parser_context_begin_selector_item">
        <return-type type="void" />
      </method>
      <method name="CurrentSelections" cname="cdn_parser_context_current_selections">
        <return-type type="const-GSList*" />
      </method>
      <method name="DebugContext" cname="cdn_parser_context_debug_context">
        <return-type type="void" />
      </method>
      <method name="DebugSelector" cname="cdn_parser_context_debug_selector">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="selector" />
        </parameters>
      </method>
      <method name="DebugString" cname="cdn_parser_context_debug_string">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="s" />
        </parameters>
      </method>
      <method name="Define" cname="cdn_parser_context_define">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="GObject*" name="value" />
          <parameter type="gboolean" name="optional" />
          <parameter type="CdnEmbeddedString*" name="count_name" />
        </parameters>
      </method>
      <method name="DeleteSelector" cname="cdn_parser_context_delete_selector">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="selector" />
        </parameters>
      </method>
      <method name="GetColumn" cname="cdn_parser_context_get_column">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="start" />
          <parameter type="gint*" name="end" />
        </parameters>
      </method>
      <method name="GetEmbedded" cname="cdn_parser_context_get_embedded">
        <return-type type="CdnEmbeddedContext*" />
      </method>
      <method name="GetError" cname="cdn_parser_context_get_error">
        <return-type type="GError*" />
      </method>
      <method name="GetErrorLines" cname="cdn_parser_context_get_error_lines">
        <return-type type="gchar*" />
      </method>
      <method name="GetErrorLocation" cname="cdn_parser_context_get_error_location">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="lstart" />
          <parameter type="gint*" name="lend" />
          <parameter type="gint*" name="cstart" />
          <parameter type="gint*" name="cend" />
        </parameters>
      </method>
      <method name="GetFile" cname="cdn_parser_context_get_file">
        <return-type type="GFile*" />
      </method>
      <method name="GetFirstEof" cname="cdn_parser_context_get_first_eof">
        <return-type type="gboolean" />
      </method>
      <method name="GetLastSelectorItemColumn" cname="cdn_parser_context_get_last_selector_item_column">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="start" />
          <parameter type="gint*" name="end" />
        </parameters>
      </method>
      <method name="GetLastSelectorItemLine" cname="cdn_parser_context_get_last_selector_item_line">
        <return-type type="void" />
        <parameters>
          <parameter type="gint*" name="line_start" />
          <parameter type="gint*" name="line_end" />
        </parameters>
      </method>
      <method name="GetLine" cname="cdn_parser_context_get_line">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="gint*" name="lineno" />
        </parameters>
      </method>
      <method name="GetLineAt" cname="cdn_parser_context_get_line_at">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="gint" name="lineno" />
        </parameters>
      </method>
      <method name="GetScanner" cname="cdn_parser_context_get_scanner">
        <return-type type="gpointer" />
      </method>
      <method name="GetStartToken" cname="cdn_parser_context_get_start_token">
        <return-type type="gint" />
      </method>
      <method name="GetToken" cname="cdn_parser_context_get_token">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cdn_parser_context_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Import" cname="cdn_parser_context_import">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="id" />
          <parameter type="CdnEmbeddedString*" name="path" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="Include" cname="cdn_parser_context_include">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="filename" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <constructor cname="cdn_parser_context_new">
        <parameters>
          <parameter type="CdnNetwork*" name="network" />
        </parameters>
      </constructor>
      <method name="Parse" cname="cdn_parser_context_parse">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gboolean" name="push_network" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="PeekEquationDepth" cname="cdn_parser_context_peek_equation_depth">
        <return-type type="gint" />
      </method>
      <method name="PeekSelector" cname="cdn_parser_context_peek_selector">
        <return-type type="CdnSelector*" />
      </method>
      <method name="PeekString" cname="cdn_parser_context_peek_string">
        <return-type type="CdnEmbeddedString*" />
      </method>
      <method name="Pop" cname="cdn_parser_context_pop">
        <return-type type="void" />
      </method>
      <method name="PopEquationDepth" cname="cdn_parser_context_pop_equation_depth">
        <return-type type="gboolean" />
      </method>
      <method name="PopInput" cname="cdn_parser_context_pop_input">
        <return-type type="void" />
      </method>
      <method name="PopLayout" cname="cdn_parser_context_pop_layout">
        <return-type type="void" />
      </method>
      <method name="PopSelector" cname="cdn_parser_context_pop_selector">
        <return-type type="CdnSelector*" />
      </method>
      <method name="PopString" cname="cdn_parser_context_pop_string">
        <return-type type="CdnEmbeddedString*" />
      </method>
      <method name="PreviousSelections" cname="cdn_parser_context_previous_selections">
        <return-type type="const-GSList*" />
      </method>
      <method name="PushAnnotation" cname="cdn_parser_context_push_annotation">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="annotation" />
        </parameters>
      </method>
      <method name="PushDefine" cname="cdn_parser_context_push_define">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushEdge" cname="cdn_parser_context_push_edge">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="id" />
          <parameter type="GSList*" name="templates" />
          <parameter type="GSList*" name="attributes" />
          <parameter type="GSList*" name="fromto" />
          <parameter type="CdnEmbeddedString*" name="phase" />
        </parameters>
      </method>
      <method name="PushEquation" cname="cdn_parser_context_push_equation">
        <return-type type="void" />
      </method>
      <method name="PushEquationDepth" cname="cdn_parser_context_push_equation_depth">
        <return-type type="void" />
      </method>
      <method name="PushEvent" cname="cdn_parser_context_push_event">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="from_phase" />
          <parameter type="CdnEmbeddedString*" name="to_phase" />
          <parameter type="CdnEmbeddedString*" name="condition" />
          <parameter type="gboolean" name="terminal" />
          <parameter type="CdnEmbeddedString*" name="approximation" />
          <parameter type="GSList*" name="templates" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushFunction" cname="cdn_parser_context_push_function">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="id" />
          <parameter type="GSList*" name="args" />
          <parameter type="CdnEmbeddedString*" name="expression" />
          <parameter type="gboolean" name="optional" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushInput" cname="cdn_parser_context_push_input">
        <return-type type="void" />
        <parameters>
          <parameter type="GFile*" name="file" />
          <parameter type="GInputStream*" name="stream" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushInputFromPath" cname="cdn_parser_context_push_input_from_path">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="filename" />
          <parameter type="GSList*" name="attributes" />
          <parameter type="gboolean" name="only_in_context" />
        </parameters>
      </method>
      <method name="PushInputFromString" cname="cdn_parser_context_push_input_from_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="s" />
          <parameter type="GSList*" name="attributes" />
          <parameter type="gboolean" name="only_in_context" />
        </parameters>
      </method>
      <method name="PushIntegrator" cname="cdn_parser_context_push_integrator">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushIoType" cname="cdn_parser_context_push_io_type">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnIoMode" name="mode" />
          <parameter type="CdnEmbeddedString*" name="id" />
          <parameter type="CdnEmbeddedString*" name="type" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushLayout" cname="cdn_parser_context_push_layout">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushNetwork" cname="cdn_parser_context_push_network">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushNode" cname="cdn_parser_context_push_node">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="id" />
          <parameter type="GSList*" name="templates" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushObjects" cname="cdn_parser_context_push_objects">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="objects" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushScope" cname="cdn_parser_context_push_scope">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushSelection" cname="cdn_parser_context_push_selection">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="selector" />
          <parameter type="CdnSelectorType" name="type" />
          <parameter type="GSList*" name="templates" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="PushSelector" cname="cdn_parser_context_push_selector">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="with" />
        </parameters>
      </method>
      <method name="PushSelectorIdentifier" cname="cdn_parser_context_push_selector_identifier">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="identifier" />
        </parameters>
      </method>
      <method name="PushSelectorPseudo" cname="cdn_parser_context_push_selector_pseudo">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelectorPseudoType" name="type" />
          <parameter type="GSList*" name="arguments" />
        </parameters>
      </method>
      <method name="PushSelectorRegex" cname="cdn_parser_context_push_selector_regex">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="regex" />
        </parameters>
      </method>
      <method name="PushString" cname="cdn_parser_context_push_string">
        <return-type type="CdnEmbeddedString*" />
      </method>
      <method name="PushTemplates" cname="cdn_parser_context_push_templates">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="Read" cname="cdn_parser_context_read">
        <return-type type="gssize" />
        <parameters>
          <parameter type="gchar*" name="buffer" />
          <parameter type="gsize" name="max_size" />
        </parameters>
      </method>
      <method name="Remove" cname="cdn_parser_context_remove">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="selectors" />
        </parameters>
      </method>
      <method name="RemoveRecord" cname="cdn_parser_context_remove_record">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="len" />
          <parameter type="gint" name="offset" />
        </parameters>
      </method>
      <method name="SetColumn" cname="cdn_parser_context_set_column">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="start" />
          <parameter type="gint" name="end" />
        </parameters>
      </method>
      <method name="SetEmbedded" cname="cdn_parser_context_set_embedded">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedContext*" name="embedded" />
        </parameters>
      </method>
      <method name="SetEmit" cname="cdn_parser_context_set_emit">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="emit" />
        </parameters>
      </method>
      <method name="SetError" cname="cdn_parser_context_set_error">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="message" />
        </parameters>
      </method>
      <method name="SetFirstEof" cname="cdn_parser_context_set_first_eof">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="firsteof" />
        </parameters>
      </method>
      <method name="SetIntegrator" cname="cdn_parser_context_set_integrator">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="value" />
        </parameters>
      </method>
      <method name="SetIoSetting" cname="cdn_parser_context_set_io_setting">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="CdnEmbeddedString*" name="value" />
        </parameters>
      </method>
      <method name="SetLine" cname="cdn_parser_context_set_line">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="line" />
          <parameter type="gint" name="lineno" />
        </parameters>
      </method>
      <method name="SetProxy" cname="cdn_parser_context_set_proxy">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="objects" />
        </parameters>
      </method>
      <method name="SetStartToken" cname="cdn_parser_context_set_start_token">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="token" />
        </parameters>
      </method>
      <method name="SetToken" cname="cdn_parser_context_set_token">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="token" />
        </parameters>
      </method>
      <method name="SetVariable" cname="cdn_parser_context_set_variable">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="selector" />
          <parameter type="CdnEmbeddedString*" name="expression" />
          <parameter type="CdnVariableFlags" name="add_flags" />
          <parameter type="CdnVariableFlags" name="remove_flags" />
          <parameter type="GSList*" name="attributes" />
        </parameters>
      </method>
      <method name="StealStartToken" cname="cdn_parser_context_steal_start_token">
        <return-type type="gint" />
      </method>
      <method name="UnapplyTemplate" cname="cdn_parser_context_unapply_template">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelector*" name="templates" />
          <parameter type="CdnSelector*" name="targets" />
        </parameters>
      </method>
    </object>
    <object name="Selection" cname="CdnSelection" parent="GObject">
      <field name="Priv" cname="priv" type="CdnSelectionPrivate*" />
      <implements>
        <interface cname="CdnTaggable" />
      </implements>
      <method name="AddDefine" cname="cdn_selection_add_define">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
          <parameter type="CdnExpansion*" name="value" />
        </parameters>
      </method>
      <method name="Copy" cname="cdn_selection_copy">
        <return-type type="CdnSelection*" owned="true" />
      </method>
      <method name="CopyDefines" cname="cdn_selection_copy_defines">
        <return-type type="CdnSelection*" />
        <parameters>
          <parameter type="gboolean" name="copy_defines" />
        </parameters>
      </method>
      <method name="GetDefine" cname="cdn_selection_get_define">
        <return-type type="CdnExpansion*" />
        <parameters>
          <parameter type="const-gchar*" name="key" />
        </parameters>
      </method>
      <method name="GetDefines" cname="cdn_selection_get_defines">
        <return-type type="GHashTable*" />
      </method>
      <method name="GetExpansions" cname="cdn_selection_get_expansions">
        <return-type type="GSList*" />
      </method>
      <method name="GetObject" cname="cdn_selection_get_object">
        <return-type type="gpointer" />
      </method>
      <method name="GetType" cname="cdn_selection_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_selection_new">
        <parameters>
          <parameter type="gpointer" name="object" />
          <parameter type="GSList*" name="expansions" />
          <parameter type="GHashTable*" name="defines" />
        </parameters>
      </constructor>
      <constructor cname="cdn_selection_new_defines">
        <parameters>
          <parameter type="gpointer" name="object" />
          <parameter type="GSList*" name="expansions" />
          <parameter type="GHashTable*" name="defines" />
          <parameter type="gboolean" name="copy_defines" />
        </parameters>
      </constructor>
      <method name="SetObject" cname="cdn_selection_set_object">
        <return-type type="void" />
        <parameters>
          <parameter type="gpointer" name="object" />
        </parameters>
      </method>
    </object>
    <object name="Selector" cname="CdnSelector" parent="GObject">
      <field name="Priv" cname="priv" type="CdnSelectorPrivate*" />
      <signal name="Select" cname="select" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CdnSelector*" />
          <parameter name="p0" type="guint32" />
        </parameters>
      </signal>
      <property name="Root" cname="root" type="CdnObject" readable="true" writeable="true" construct-only="true" />
      <implements>
        <interface cname="CdnStatement" />
      </implements>
      <method name="Append" cname="cdn_selector_append">
        <return-type type="guint" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="identifier" />
        </parameters>
      </method>
      <method name="AppendPartial" cname="cdn_selector_append_partial">
        <return-type type="guint" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="identifier" />
        </parameters>
      </method>
      <method name="AppendPseudo" cname="cdn_selector_append_pseudo">
        <return-type type="guint" />
        <parameters>
          <parameter type="CdnSelectorPseudoType" name="type" />
          <parameter type="GSList*" name="arguments" />
        </parameters>
      </method>
      <method name="AppendRegex" cname="cdn_selector_append_regex">
        <return-type type="guint" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="regex" />
        </parameters>
      </method>
      <method name="AppendRegexPartial" cname="cdn_selector_append_regex_partial">
        <return-type type="guint" />
        <parameters>
          <parameter type="CdnEmbeddedString*" name="regex" />
        </parameters>
      </method>
      <method name="AsString" cname="cdn_selector_as_string">
        <return-type type="gchar*" />
      </method>
      <method name="CopyWith" cname="cdn_selector_copy_with">
        <return-type type="CdnSelector*" />
      </method>
      <method name="EscapeIdentifier" cname="cdn_selector_escape_identifier" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetInContext" cname="cdn_selector_get_in_context">
        <return-type type="const-GSList*" />
        <parameters>
          <parameter type="guint" name="id" />
        </parameters>
      </method>
      <method name="GetLastId" cname="cdn_selector_get_last_id">
        <return-type type="guint" />
      </method>
      <method name="GetOutContext" cname="cdn_selector_get_out_context">
        <return-type type="const-GSList*" />
        <parameters>
          <parameter type="guint" name="id" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_selector_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="IsPseudoName" cname="cdn_selector_is_pseudo_name" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <constructor cname="cdn_selector_new">
        <parameters>
          <parameter type="CdnObject*" name="root" />
        </parameters>
      </constructor>
      <method name="Parse" cname="cdn_selector_parse" shared="true">
        <return-type type="CdnSelector*" />
        <parameters>
          <parameter type="CdnObject*" name="root" />
          <parameter type="const-gchar*" name="s" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Select" cname="cdn_selector_select">
        <return-type type="GSList*" />
        <parameters>
          <parameter type="GObject*" name="parent" />
          <parameter type="CdnSelectorType" name="type" />
          <parameter type="CdnEmbeddedContext*" name="context" />
        </parameters>
      </method>
      <method name="SetFromSet" cname="cdn_selector_set_from_set">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="selections" />
        </parameters>
      </method>
      <method name="SetImplicitChildren" cname="cdn_selector_set_implicit_children">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="isimplicit" />
        </parameters>
      </method>
      <method name="SetPartial" cname="cdn_selector_set_partial">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="partial" />
        </parameters>
      </method>
      <method name="SetSelf" cname="cdn_selector_set_self">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnSelection*" name="selection" />
        </parameters>
      </method>
    </object>
    <object name="Variable" cname="CdnVariable" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CdnVariablePrivate*" />
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" />
      <property name="Object" cname="object" type="CdnObject" readable="true" writeable="true" />
      <property name="Flags" cname="flags" type="CdnVariableFlags" readable="true" writeable="true" />
      <property name="Expression" cname="expression" type="CdnExpression" readable="true" writeable="true" />
      <property name="Constraint" cname="constraint" type="CdnExpression" readable="true" writeable="true" />
      <signal name="InvalidateName" cname="invalidate-name" when="LAST" field_name="invalidate_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnVariable*" name="property" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </signal>
      <signal name="ExpressionChanged" cname="expression-changed" when="LAST" field_name="expression_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariable*" name="property" />
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </signal>
      <signal name="FlagsChanged" cname="flags-changed" when="LAST" field_name="flags_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariable*" name="property" />
          <parameter type="CdnVariableFlags" name="flags" />
        </parameters>
      </signal>
      <implements>
        <interface cname="CdnUsable" />
        <interface cname="CdnModifiable" />
        <interface cname="CdnAnnotatable" />
        <interface cname="CdnTaggable" />
      </implements>
      <method name="AddFlags" cname="cdn_variable_add_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariableFlags" name="flags" />
        </parameters>
      </method>
      <method name="ApplyConstraint" cname="cdn_variable_apply_constraint">
        <return-type type="void" />
      </method>
      <method name="ClearUpdate" cname="cdn_variable_clear_update">
        <return-type type="void" />
      </method>
      <method name="Compile" cname="cdn_variable_compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnCompileErrorForward*" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="cdn_variable_copy">
        <return-type type="CdnVariable*" owned="true" />
      </method>
      <method name="Equal" cname="cdn_variable_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnVariable*" name="other" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </method>
      <method name="FlagsFromString" cname="cdn_variable_flags_from_string" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="flags" />
          <parameter type="CdnVariableFlags*" name="add_flags" />
          <parameter type="CdnVariableFlags*" name="remove_flags" />
        </parameters>
      </method>
      <method name="FlagsToString" cname="cdn_variable_flags_to_string" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CdnVariableFlags" name="add_flags" />
          <parameter type="CdnVariableFlags" name="remove_flags" />
        </parameters>
      </method>
      <method name="GetActions" cname="cdn_variable_get_actions">
        <return-type type="GSList*" />
      </method>
      <method name="GetConstraint" cname="cdn_variable_get_constraint">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetDerivative" cname="cdn_variable_get_derivative">
        <return-type type="CdnVariable*" />
      </method>
      <method name="GetExpression" cname="cdn_variable_get_expression">
        <return-type type="CdnExpression*" />
      </method>
      <method name="GetFlags" cname="cdn_variable_get_flags">
        <return-type type="CdnVariableFlags" />
      </method>
      <method name="GetFullName" cname="cdn_variable_get_full_name">
        <return-type type="gchar*" />
      </method>
      <method name="GetFullNameForDisplay" cname="cdn_variable_get_full_name_for_display">
        <return-type type="gchar*" />
      </method>
      <method name="GetIntegral" cname="cdn_variable_get_integral">
        <return-type type="CdnVariable*" />
      </method>
      <method name="GetIntegrated" cname="cdn_variable_get_integrated">
        <return-type type="gboolean" />
      </method>
      <method name="GetName" cname="cdn_variable_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetObject" cname="cdn_variable_get_object">
        <return-type type="CdnObjectForward*" />
      </method>
      <method name="GetType" cname="cdn_variable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUpdate" cname="cdn_variable_get_update">
        <return-type type="gdouble*" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <method name="GetValue" cname="cdn_variable_get_value">
        <return-type type="gdouble" />
      </method>
      <method name="GetValues" cname="cdn_variable_get_values">
        <return-type type="const-gdouble*" />
        <parameters>
          <parameter type="gint*" name="numr" />
          <parameter type="gint*" name="numc" />
        </parameters>
      </method>
      <constructor cname="cdn_variable_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="CdnExpression*" name="expression" />
          <parameter type="CdnVariableFlags" name="flags" />
        </parameters>
      </constructor>
      <method name="RemoveFlags" cname="cdn_variable_remove_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariableFlags" name="flags" />
        </parameters>
      </method>
      <method name="Reset" cname="cdn_variable_reset">
        <return-type type="void" />
      </method>
      <method name="SetConstraint" cname="cdn_variable_set_constraint">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </method>
      <method name="SetDerivative" cname="cdn_variable_set_derivative">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariable*" name="diffprop" />
        </parameters>
      </method>
      <method name="SetExpression" cname="cdn_variable_set_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </method>
      <method name="SetFlags" cname="cdn_variable_set_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariableFlags" name="flags" />
        </parameters>
      </method>
      <method name="SetIntegrated" cname="cdn_variable_set_integrated">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="integrated" />
        </parameters>
      </method>
      <method name="SetName" cname="cdn_variable_set_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="SetUpdate" cname="cdn_variable_set_update">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gdouble*" name="values" />
        </parameters>
      </method>
      <method name="SetUpdateValue" cname="cdn_variable_set_update_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
          <parameter type="gint" name="numr" />
          <parameter type="gint" name="numc" />
        </parameters>
      </method>
      <method name="SetValue" cname="cdn_variable_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="SetValues" cname="cdn_variable_set_values">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gdouble*" name="values" />
          <parameter type="gint" name="numr" />
          <parameter type="gint" name="numc" />
        </parameters>
      </method>
    </object>
    <object name="VariableInterface" cname="CdnVariableInterface" parent="GObject">
      <field name="Priv" cname="priv" type="CdnVariableInterfacePrivate*" />
      <signal name="Added" cname="added" when="LAST" field_name="added">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariableInterface*" name="iface" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="child_name" />
          <parameter type="const-gchar*" name="property_name" />
        </parameters>
      </signal>
      <signal name="Removed" cname="removed" when="LAST" field_name="removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnVariableInterface*" name="iface" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="child_name" />
          <parameter type="const-gchar*" name="property_name" />
        </parameters>
      </signal>
      <signal name="VerifyRemove" cname="verify-remove" when="LAST" manual="true" field_name="verify_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnVariableInterface*" name="iface" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="child_name" />
          <parameter type="const-gchar*" name="property_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </signal>
      <signal name="VerifyAdd" cname="verify-add" when="LAST" manual="true" field_name="verify_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnVariableInterface*" name="iface" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="child_name" />
          <parameter type="const-gchar*" name="property_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </signal>
      <property name="Node" cname="node" type="CdnNode" readable="true" writeable="true" construct-only="true" />
      <method name="Add" cname="cdn_variable_interface_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="child_name" />
          <parameter type="const-gchar*" name="variable_name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_variable_interface_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetNames" cname="cdn_variable_interface_get_names">
        <return-type type="gchar**" />
      </method>
      <method name="GetNode" cname="cdn_variable_interface_get_node">
        <return-type type="CdnNodeForward*" />
      </method>
      <method name="GetType" cname="cdn_variable_interface_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Implements" cname="cdn_variable_interface_implements">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="Lookup" cname="cdn_variable_interface_lookup">
        <return-type type="CdnVariable*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="LookupChildName" cname="cdn_variable_interface_lookup_child_name">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="LookupVariableName" cname="cdn_variable_interface_lookup_variable_name">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <constructor cname="cdn_variable_interface_new">
        <parameters>
          <parameter type="CdnNodeForward*" name="node" />
        </parameters>
      </constructor>
      <method name="Remove" cname="cdn_variable_interface_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <boxed name="Expansion" cname="CdnExpansion" opaque="true">
      <method name="Add" cname="cdn_expansion_add">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="item" />
        </parameters>
      </method>
      <method name="Append" cname="cdn_expansion_append">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpansion*" name="other" />
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="Copy" cname="cdn_expansion_copy">
        <return-type type="CdnExpansion*" owned="true" />
      </method>
      <method name="Get" cname="cdn_expansion_get">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="GetIndex" cname="cdn_expansion_get_index">
        <return-type type="gint" />
        <parameters>
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="GetType" cname="cdn_expansion_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Insert" cname="cdn_expansion_insert">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="idx" />
          <parameter type="const-gchar*" name="item" />
        </parameters>
      </method>
      <constructor cname="cdn_expansion_new">
        <parameters>
          <parameter type="gchar" name="const-const*" />
        </parameters>
      </constructor>
      <constructor cname="cdn_expansion_new_one">
        <parameters>
          <parameter type="const-gchar*" name="item" />
        </parameters>
      </constructor>
      <constructor cname="cdn_expansion_new_sized">
        <parameters>
          <parameter type="gchar" name="const-const*" />
          <parameter type="gint" name="sized" />
        </parameters>
      </constructor>
      <constructor cname="cdn_expansion_newv">
        <parameters>
          <parameter type="const-gchar*" name="item" />
          <parameter ellipsis="true" />
        </parameters>
      </constructor>
      <method name="Num" cname="cdn_expansion_num">
        <return-type type="gint" />
      </method>
      <method name="Prepend" cname="cdn_expansion_prepend">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnExpansion*" name="other" />
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="Ref" cname="cdn_expansion_ref">
        <return-type type="CdnExpansion*" />
      </method>
      <method name="Set" cname="cdn_expansion_set">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="idx" />
          <parameter type="const-gchar*" name="val" />
        </parameters>
      </method>
      <method name="SetIndex" cname="cdn_expansion_set_index">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="idx" />
          <parameter type="gint" name="val" />
        </parameters>
      </method>
      <method name="Unref" cname="cdn_expansion_unref">
        <return-type type="void" />
      </method>
    </boxed>
    <boxed name="ExpressionTreeIter" cname="CdnExpressionTreeIter" opaque="true">
      <method name="Canonicalize" cname="cdn_expression_tree_iter_canonicalize">
        <return-type type="CdnExpressionTreeIter*" />
      </method>
      <method name="Copy" cname="cdn_expression_tree_iter_copy">
        <return-type type="CdnExpressionTreeIter*" owned="true" />
      </method>
      <method name="Equal" cname="cdn_expression_tree_iter_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnExpressionTreeIter*" name="other" />
          <parameter type="gboolean" name="asstring" />
        </parameters>
      </method>
      <method name="Free" cname="cdn_expression_tree_iter_free">
        <return-type type="void" />
      </method>
      <method name="GetChild" cname="cdn_expression_tree_iter_get_child">
        <return-type type="CdnExpressionTreeIter*" />
        <parameters>
          <parameter type="gint" name="nth" />
        </parameters>
      </method>
      <method name="GetInstruction" cname="cdn_expression_tree_iter_get_instruction">
        <return-type type="CdnInstruction*" />
      </method>
      <method name="GetType" cname="cdn_expression_tree_iter_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cdn_expression_tree_iter_new">
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </constructor>
      <constructor cname="cdn_expression_tree_iter_new_from_instruction">
        <parameters>
          <parameter type="CdnInstruction*" name="instruction" />
        </parameters>
      </constructor>
      <constructor cname="cdn_expression_tree_iter_new_from_instructions">
        <parameters>
          <parameter type="const-GSList*" name="instructions" />
        </parameters>
      </constructor>
      <method name="NumChildren" cname="cdn_expression_tree_iter_num_children">
        <return-type type="gint" />
      </method>
      <method name="SetChild" cname="cdn_expression_tree_iter_set_child">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="nth" />
          <parameter type="CdnExpressionTreeIter*" name="child" />
        </parameters>
      </method>
      <method name="SetInstruction" cname="cdn_expression_tree_iter_set_instruction">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnInstruction*" name="instr" />
        </parameters>
      </method>
      <method name="Simplify" cname="cdn_expression_tree_iter_simplify">
        <return-type type="CdnExpressionTreeIter*" />
      </method>
      <method name="SolveFor" cname="cdn_expression_tree_iter_solve_for">
        <return-type type="CdnExpressionTreeIter*" />
        <parameters>
          <parameter type="CdnVariable*" name="prop" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Substitute" cname="cdn_expression_tree_iter_substitute">
        <return-type type="CdnExpressionTreeIter*" />
        <parameters>
          <parameter type="CdnVariable*" name="property" />
          <parameter type="CdnExpressionTreeIter*" name="subst" />
        </parameters>
      </method>
      <method name="SubstituteHash" cname="cdn_expression_tree_iter_substitute_hash">
        <return-type type="CdnExpressionTreeIter*" />
        <parameters>
          <parameter type="GHashTable*" name="table" />
        </parameters>
      </method>
      <method name="TakeChild" cname="cdn_expression_tree_iter_take_child">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="nth" />
          <parameter type="CdnExpressionTreeIter*" name="child" />
        </parameters>
      </method>
      <method name="ToInstructions" cname="cdn_expression_tree_iter_to_instructions">
        <return-type type="GSList*" />
      </method>
      <method name="ToString" cname="cdn_expression_tree_iter_to_string">
        <return-type type="const-gchar*" />
      </method>
      <method name="ToStringDbg" cname="cdn_expression_tree_iter_to_string_dbg">
        <return-type type="const-gchar*" />
      </method>
    </boxed>
    <struct name="FunctionArgumentSpec" cname="CdnFunctionArgumentSpec" opaque="true">
      <method name="Free" cname="cdn_function_argument_spec_free">
        <return-type type="void" />
      </method>
      <constructor cname="cdn_function_argument_spec_new">
        <parameters>
          <parameter type="CdnEmbeddedString*" name="name" />
          <parameter type="gboolean" name="isexplicit" />
        </parameters>
      </constructor>
    </struct>
    <boxed name="Stack" cname="CdnStack" opaque="true">
      <method name="At" cname="cdn_stack_at">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="Copy" cname="cdn_stack_copy">
        <return-type type="CdnStack*" owned="true" />
      </method>
      <method name="Count" cname="cdn_stack_count">
        <return-type type="guint" />
      </method>
      <method name="Destroy" cname="cdn_stack_destroy">
        <return-type type="void" />
      </method>
      <method name="Free" cname="cdn_stack_free">
        <return-type type="void" />
      </method>
      <method name="GetType" cname="cdn_stack_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Init" cname="cdn_stack_init">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="size" />
        </parameters>
      </method>
      <constructor cname="cdn_stack_new">
        <parameters>
          <parameter type="guint" name="size" />
        </parameters>
      </constructor>
      <method name="OutputPtr" cname="cdn_stack_output_ptr">
        <return-type type="gdouble*" />
      </method>
      <method name="Peek" cname="cdn_stack_peek">
        <return-type type="gdouble" />
      </method>
      <method name="Pop" cname="cdn_stack_pop">
        <return-type type="gdouble" />
      </method>
      <method name="Popn" cname="cdn_stack_popn">
        <return-type type="gdouble*" />
        <parameters>
          <parameter type="gint" name="num" />
        </parameters>
      </method>
      <method name="Ptr" cname="cdn_stack_ptr">
        <return-type type="gdouble*" />
      </method>
      <method name="Push" cname="cdn_stack_push">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="Pushn" cname="cdn_stack_pushn">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gdouble*" name="values" />
          <parameter type="gint" name="num" />
        </parameters>
      </method>
      <method name="Pushni" cname="cdn_stack_pushni">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
          <parameter type="gint" name="num" />
        </parameters>
      </method>
      <method name="Reset" cname="cdn_stack_reset">
        <return-type type="void" />
      </method>
      <method name="Resize" cname="cdn_stack_resize">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="size" />
        </parameters>
      </method>
      <method name="Set" cname="cdn_stack_set">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="SetAt" cname="cdn_stack_set_at">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="idx" />
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="SetOutputPtr" cname="cdn_stack_set_output_ptr">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble*" name="ptr" />
        </parameters>
      </method>
      <method name="Size" cname="cdn_stack_size">
        <return-type type="guint" />
      </method>
    </boxed>
    <boxed name="StackManipulation" cname="CdnStackManipulation">
      <field name="NumPop" cname="num_pop" type="gint" />
      <field name="PopDims" cname="pop_dims" type="gint*" />
      <field name="NumPush" cname="num_push" type="gint" />
      <field name="PushDims" cname="push_dims" type="gint*" />
      <field name="ExtraSpace" cname="extra_space" type="gint" />
      <method name="GetType" cname="cdn_stack_manipulation_get_type" shared="true">
        <return-type type="GType" />
      </method>
    </boxed>
    <class name="Global" cname="CdnGlobal">
      <method name="ExpansionsAnnotateIndices" cname="cdn_expansions_annotate_indices" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GSList*" name="expansions" />
          <parameter type="gint" name="start" />
        </parameters>
      </method>
      <method name="ParamSpecMiniObject" cname="cdn_param_spec_mini_object" shared="true">
        <return-type type="GParamSpec*" />
        <parameters>
          <parameter type="const-char*" name="name" />
          <parameter type="const-char*" name="nick" />
          <parameter type="const-char*" name="blurb" />
          <parameter type="GType" name="object_type" />
          <parameter type="GParamFlags" name="flags" />
        </parameters>
      </method>
    </class>
    <class name="Integrators" cname="CdnIntegrators_">
      <method name="Create" cname="cdn_integrators_create" shared="true">
        <return-type type="GSList*" />
      </method>
      <method name="Find" cname="cdn_integrators_find" shared="true">
        <return-type type="GType" />
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </method>
      <method name="List" cname="cdn_integrators_list" shared="true">
        <return-type type="const-GSList*" />
      </method>
      <method name="Register" cname="cdn_integrators_register" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="gtype" />
        </parameters>
      </method>
      <method name="Unregister" cname="cdn_integrators_unregister" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="gtype" />
        </parameters>
      </method>
    </class>
    <class name="Math" cname="CdnMath_">
      <method name="ConstantLookup" cname="cdn_math_constant_lookup" shared="true">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gboolean*" name="found" />
        </parameters>
      </method>
      <method name="FunctionExecute" cname="cdn_math_function_execute" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="CdnMathFunctionType" name="type" />
          <parameter type="gint" name="numargs" />
          <parameter type="gint*" name="argdim" />
          <parameter type="CdnStack*" name="stack" />
        </parameters>
      </method>
      <method name="FunctionGetStackManipulation" cname="cdn_math_function_get_stack_manipulation" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnMathFunctionType" name="type" />
          <parameter type="gint" name="arguments" />
          <parameter type="gint*" name="argdim" />
          <parameter type="gint*" name="outargdim" />
          <parameter type="gint*" name="extra_space" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="FunctionIsCommutative" cname="cdn_math_function_is_commutative" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnMathFunctionType" name="type" />
        </parameters>
      </method>
      <method name="FunctionIsVariable" cname="cdn_math_function_is_variable" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CdnMathFunctionType" name="type" />
        </parameters>
      </method>
      <method name="FunctionLookup" cname="cdn_math_function_lookup" shared="true">
        <return-type type="CdnMathFunctionType" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint*" name="arguments" />
        </parameters>
      </method>
      <method name="FunctionLookupById" cname="cdn_math_function_lookup_by_id" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="CdnMathFunctionType" name="type" />
          <parameter type="gint*" name="arguments" />
        </parameters>
      </method>
    </class>
    <class name="Symbolic" cname="CdnSymbolic_">
      <method name="Derive" cname="cdn_symbolic_derive" shared="true">
        <return-type type="CdnExpression*" />
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
          <parameter type="GSList*" name="symbols" />
          <parameter type="GHashTable*" name="property_map" />
          <parameter type="GHashTable*" name="diff_map" />
          <parameter type="gint" name="order" />
          <parameter type="CdnSymbolicDeriveFlags" name="flags" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cdn_symbolic_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="Simplify" cname="cdn_symbolic_simplify" shared="true">
        <return-type type="CdnExpression*" />
        <parameters>
          <parameter type="CdnExpression*" name="expression" />
        </parameters>
      </method>
    </class>
    <class name="Value" cname="CdnValue_">
      <method name="DupMiniObject" cname="cdn_value_dup_mini_object" shared="true">
        <return-type type="CdnMiniObject*" />
        <parameters>
          <parameter type="const-GValue*" name="value" />
        </parameters>
      </method>
      <method name="GetMiniObject" cname="cdn_value_get_mini_object" shared="true">
        <return-type type="CdnMiniObject*" />
        <parameters>
          <parameter type="const-GValue*" name="value" />
        </parameters>
      </method>
      <method name="SetMiniObject" cname="cdn_value_set_mini_object" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GValue*" name="value" />
          <parameter type="CdnMiniObject*" name="mini_object" />
        </parameters>
      </method>
      <method name="TakeMiniObject" cname="cdn_value_take_mini_object" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GValue*" name="value" />
          <parameter type="CdnMiniObject*" name="mini_object" />
        </parameters>
      </method>
    </class>
  </namespace>
</api>