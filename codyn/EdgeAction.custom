		[DllImport("libgobject-2.0-0.dll")]
		private static extern void g_object_ref_sink (IntPtr raw);

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_edge_action_new(IntPtr target, IntPtr equation);

		public EdgeAction (string target, Cdn.Expression equation) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (EdgeAction))
			{
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("target");
				vals.Add (new GLib.Value (target));

				if (equation != null)
				{
					names.Add ("equation");
					vals.Add (new GLib.Value (equation));
				}

				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
			}
			else
			{
				IntPtr native_target = GLib.Marshaller.StringToPtrGStrdup (target);
				Raw = cdn_edge_action_new(native_target, equation == null ? IntPtr.Zero : equation.Handle);
				GLib.Marshaller.Free (native_target);
			}

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_phaseable_get_phases(IntPtr raw);

		public string[] Phases
		{
			get
			{
				IntPtr ret = cdn_phaseable_get_phases(Handle);
				return GLib.Marshaller.NullTermPtrToStringArray(ret, true);
			}
		}

		[DllImport("libcodyn-3.0.dll")]
		static extern IntPtr cdn_edge_action_get_indices(IntPtr raw, out int length);

		public int[] Indices
		{
			get
			{
				int length;

				IntPtr raw_ret = cdn_edge_action_get_indices(Handle, out length);

				int[] ret = new int[length];

				if (length > 0)
				{
					Marshal.Copy(raw_ret, ret, 0, length);
				}

				return ret;
			}
		}
