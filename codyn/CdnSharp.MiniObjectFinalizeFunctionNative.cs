// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace CdnSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void MiniObjectFinalizeFunctionNative(IntPtr obj);

	internal class MiniObjectFinalizeFunctionInvoker {

		MiniObjectFinalizeFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~MiniObjectFinalizeFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal MiniObjectFinalizeFunctionInvoker (MiniObjectFinalizeFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal MiniObjectFinalizeFunctionInvoker (MiniObjectFinalizeFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal MiniObjectFinalizeFunctionInvoker (MiniObjectFinalizeFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Cdn.MiniObjectFinalizeFunction Handler {
			get {
				return new Cdn.MiniObjectFinalizeFunction(InvokeNative);
			}
		}

		void InvokeNative (Cdn.MiniObject obj)
		{
			native_cb (obj == null ? IntPtr.Zero : obj.Handle);
		}
	}

	internal class MiniObjectFinalizeFunctionWrapper {

		public void NativeCallback (IntPtr obj)
		{
			try {
				managed (Cdn.MiniObject.GetObject(obj));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal MiniObjectFinalizeFunctionNative NativeDelegate;
		Cdn.MiniObjectFinalizeFunction managed;

		public MiniObjectFinalizeFunctionWrapper (Cdn.MiniObjectFinalizeFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new MiniObjectFinalizeFunctionNative (NativeCallback);
		}

		public static Cdn.MiniObjectFinalizeFunction GetManagedDelegate (MiniObjectFinalizeFunctionNative native)
		{
			if (native == null)
				return null;
			MiniObjectFinalizeFunctionWrapper wrapper = (MiniObjectFinalizeFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
