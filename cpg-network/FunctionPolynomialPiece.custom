		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_function_polynomial_piece_get_coefficients(IntPtr raw, out uint num_coefficients);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_function_polynomial_piece_set_coefficients(IntPtr raw, double[] coefficients, uint num_coefficients);

		public double[] Coefficients
		{
			get
			{
				uint num_coefficients;
				IntPtr ret = cpg_function_polynomial_piece_get_coefficients(Handle, out num_coefficients);

				double[] coefs = new double[num_coefficients];
				Marshal.Copy(ret, coefs, 0, (int)num_coefficients);

				return coefs;
			}
			set
			{
				uint len = value != null ? (uint)value.Length : 0;

				cpg_function_polynomial_piece_set_coefficients(Handle, value, len);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_function_polynomial_piece_get_normalization(IntPtr raw, out uint num_coefficients);

		public double[] Normalization
		{
			get
			{
				uint num_coefficients;
				IntPtr ret = cpg_function_polynomial_piece_get_normalization(Handle, out num_coefficients);

				double[] coefs = new double[num_coefficients];
				Marshal.Copy(ret, coefs, 0, (int)num_coefficients);

				return coefs;
			}
		}

		[DllImport ("libgobject-2.0")]
		private static extern void g_object_ref_sink (IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_function_polynomial_piece_new(double begin, double end, double[] coefficients, uint num_coefficients);

		public FunctionPolynomialPiece (double begin, double end, params double[] coefficients) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FunctionPolynomialPiece)) {
				throw new InvalidOperationException (String.Format("Can't override this constructor {0}.", GetType()));
			}

			Raw = cpg_function_polynomial_piece_new(begin, end, coefficients, (uint)coefficients.Length);

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}
