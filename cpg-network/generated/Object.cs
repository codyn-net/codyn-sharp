// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Object : GLib.Object {

		[Obsolete]
		protected Object(GLib.GType gtype) : base(gtype) {}
		public Object(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_new(IntPtr id);

		public Object (string id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Object)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			Raw = cpg_object_new(native_id);
			GLib.Marshaller.Free (native_id);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_get_local_id(IntPtr raw);

		[GLib.Property ("local-id")]
		public string LocalId {
			get  {
				IntPtr raw_ret = cpg_object_get_local_id(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[GLib.Property ("template")]
		public Cpg.Object Template {
			get {
				GLib.Value val = GetProperty ("template");
				Cpg.Object ret = (Cpg.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("template", val);
				val.Dispose ();
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_get_id(IntPtr raw);

		[DllImport("cpg-network-1.0")]
		static extern void cpg_object_set_id(IntPtr raw, IntPtr id);

		[GLib.Property ("id")]
		public string Id {
			get  {
				IntPtr raw_ret = cpg_object_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cpg_object_set_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.CDeclCallback]
		delegate void TaintedVMDelegate (IntPtr objekt);

		static TaintedVMDelegate TaintedVMCallback;

		static void tainted_cb (IntPtr objekt)
		{
			try {
				Object objekt_managed = GLib.Object.GetObject (objekt, false) as Object;
				objekt_managed.OnTainted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTainted (GLib.GType gtype)
		{
			if (TaintedVMCallback == null)
				TaintedVMCallback = new TaintedVMDelegate (tainted_cb);
			OverrideVirtualMethod (gtype, "tainted", TaintedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cpg.Object), ConnectionMethod="OverrideTainted")]
		protected virtual void OnTainted ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("tainted")]
		public event System.EventHandler Tainted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tainted");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "tainted");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_object_evaluate(IntPtr raw);

		public void Evaluate() {
			cpg_object_evaluate(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_object_has_property(IntPtr raw, IntPtr name);

		public bool HasProperty(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = cpg_object_has_property(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_object_reset(IntPtr raw);

		public void Reset() {
			cpg_object_reset(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_get_properties(IntPtr raw);

		public Cpg.Property[] Properties { 
			get {
				IntPtr raw_ret = cpg_object_get_properties(Handle);
				Cpg.Property[] ret = (Cpg.Property[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.Property));
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_object_compile(IntPtr raw, IntPtr context, IntPtr error);

		public bool Compile(Cpg.CompileContext context, Cpg.CompileError error) {
			bool raw_ret = cpg_object_compile(Handle, context == null ? IntPtr.Zero : context.Handle, error == null ? IntPtr.Zero : error.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_object_taint(IntPtr raw);

		public void Taint() {
			cpg_object_taint(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern unsafe bool cpg_object_remove_property(IntPtr raw, IntPtr name, out IntPtr error);

		public unsafe bool RemoveProperty(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_object_remove_property(Handle, native_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_get_property(IntPtr raw, IntPtr name);

		public Cpg.Property Property(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cpg_object_get_property(Handle, native_name);
			Cpg.Property ret = raw_ret == IntPtr.Zero ? null : (Cpg.Property) GLib.Opaque.GetOpaque (raw_ret, typeof (Cpg.Property), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern int cpg_object_error_quark();

		public static int ErrorQuark() {
			int raw_ret = cpg_object_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_get_actors(IntPtr raw);

		public GLib.SList Actors { 
			get {
				IntPtr raw_ret = cpg_object_get_actors(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_object_reset_cache(IntPtr raw);

		public void ResetCache() {
			cpg_object_reset_cache(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_object_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_object_add_property(IntPtr raw, IntPtr name, IntPtr expression, bool integrated);

		public Cpg.Property AddProperty(string name, string expression, bool integrated) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
			IntPtr raw_ret = cpg_object_add_property(Handle, native_name, native_expression, integrated);
			Cpg.Property ret = raw_ret == IntPtr.Zero ? null : (Cpg.Property) GLib.Opaque.GetOpaque (raw_ret, typeof (Cpg.Property), false);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_expression);
			return ret;
		}

#endregion
	}
}
