// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Monitor : GLib.Object {

		[Obsolete]
		protected Monitor(GLib.GType gtype) : base(gtype) {}
		public Monitor(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_monitor_new(IntPtr network, IntPtr property);

		public Monitor (Cpg.Network network, Cpg.Property property) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Monitor)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (network != null) {
					names.Add ("network");
					vals.Add (new GLib.Value (network));
				}
				if (property != null) {
					names.Add ("property");
					vals.Add (new GLib.Value (property));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = cpg_monitor_new(network == null ? IntPtr.Zero : network.Handle, property == null ? IntPtr.Zero : property.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_monitor_get_property(IntPtr raw);

		[GLib.Property ("property")]
		public Cpg.Property Property {
			get  {
				IntPtr raw_ret = cpg_monitor_get_property(Handle);
				Cpg.Property ret = GLib.Object.GetObject(raw_ret) as Cpg.Property;
				return ret;
			}
		}

		[GLib.Property ("network")]
		public Cpg.Network Network {
			get {
				GLib.Value val = GetProperty ("network");
				Cpg.Network ret = (Cpg.Network) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_monitor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "Monitor.custom"
		[DllImport("cpg-network-2.0")]
		static extern bool cpg_monitor_get_data_resampled(IntPtr raw, double[] sites, uint n_size, double[] data);

		public double[] GetDataResampled(double[] sites) {
			int len = sites != null ? sites.Length : 0;
			
			double[] data = new double[len];
			
			cpg_monitor_get_data_resampled(Handle, sites, (uint) (sites == null ? 0 : sites.Length), data);
			
			return data;
		}
		
		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_monitor_get_data(IntPtr raw, out uint n_size);

		public double[] GetData() {
			uint n_size;
			IntPtr ret = cpg_monitor_get_data (Handle, out n_size);
			
			double[] data = new double[n_size];
			Marshal.Copy(ret, data, 0, (int)n_size);
			
			return data;
		}
		
		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_monitor_get_sites(IntPtr raw, out uint n_size);

		public double[] GetSites() {
			uint n_size;
			IntPtr ret = cpg_monitor_get_sites (Handle, out n_size);
			
			double[] data = new double[n_size];
			Marshal.Copy(ret, data, 0, (int)n_size);
			
			return data;
		}

#endregion
	}
}
