// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PropertyInterface : GLib.Object {

		[Obsolete]
		protected PropertyInterface(GLib.GType gtype) : base(gtype) {}
		public PropertyInterface(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_interface_new(IntPtr objekt);

		public PropertyInterface (Cpg.Object objekt) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PropertyInterface)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (objekt != null) {
					names.Add ("objekt");
					vals.Add (new GLib.Value (objekt));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = cpg_property_interface_new(objekt == null ? IntPtr.Zero : objekt.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_interface_get_object(IntPtr raw);

		[GLib.Property ("object")]
		public Cpg.Object Object {
			get  {
				IntPtr raw_ret = cpg_property_interface_get_object(Handle);
				Cpg.Object ret = GLib.Object.GetObject(raw_ret) as Cpg.Object;
				return ret;
			}
		}

		[GLib.CDeclCallback]
		delegate void RemovedVMDelegate (IntPtr iface, IntPtr name, IntPtr property);

		static RemovedVMDelegate RemovedVMCallback;

		static void removed_cb (IntPtr iface, IntPtr name, IntPtr property)
		{
			try {
				PropertyInterface iface_managed = GLib.Object.GetObject (iface, false) as PropertyInterface;
				iface_managed.OnRemoved (GLib.Marshaller.Utf8PtrToString (name), GLib.Object.GetObject(property) as Cpg.Property);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRemoved (GLib.GType gtype)
		{
			if (RemovedVMCallback == null)
				RemovedVMCallback = new RemovedVMDelegate (removed_cb);
			OverrideVirtualMethod (gtype, "removed", RemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cpg.PropertyInterface), ConnectionMethod="OverrideRemoved")]
		protected virtual void OnRemoved (string name, Cpg.Property property)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (name);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (property);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("removed")]
		public event Cpg.RemovedHandler Removed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "removed", typeof (Cpg.RemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "removed", typeof (Cpg.RemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void AddedVMDelegate (IntPtr iface, IntPtr name, IntPtr property);

		static AddedVMDelegate AddedVMCallback;

		static void added_cb (IntPtr iface, IntPtr name, IntPtr property)
		{
			try {
				PropertyInterface iface_managed = GLib.Object.GetObject (iface, false) as PropertyInterface;
				iface_managed.OnAdded (GLib.Marshaller.Utf8PtrToString (name), GLib.Object.GetObject(property) as Cpg.Property);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAdded (GLib.GType gtype)
		{
			if (AddedVMCallback == null)
				AddedVMCallback = new AddedVMDelegate (added_cb);
			OverrideVirtualMethod (gtype, "added", AddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cpg.PropertyInterface), ConnectionMethod="OverrideAdded")]
		protected virtual void OnAdded (string name, Cpg.Property property)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (name);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (property);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("added")]
		public event Cpg.AddedHandler Added {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "added", typeof (Cpg.AddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "added", typeof (Cpg.AddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe bool cpg_property_interface_remove(IntPtr raw, IntPtr name, out IntPtr error);

		public unsafe bool Remove(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_property_interface_remove(Handle, native_name, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_interface_get_names(IntPtr raw);

		public string[] Names { 
			get {
				IntPtr raw_ret = cpg_property_interface_get_names(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_interface_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_property_interface_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_property_interface_error_quark();

		public static int ErrorQuark() {
			int raw_ret = cpg_property_interface_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_interface_lookup(IntPtr raw, IntPtr name);

		public Cpg.Property Lookup(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = cpg_property_interface_lookup(Handle, native_name);
			Cpg.Property ret = GLib.Object.GetObject(raw_ret) as Cpg.Property;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe bool cpg_property_interface_add(IntPtr raw, IntPtr name, IntPtr property, out IntPtr error);

		public unsafe bool Add(string name, Cpg.Property property) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_property_interface_add(Handle, native_name, property == null ? IntPtr.Zero : property.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
