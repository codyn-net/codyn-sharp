// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class OperatorAdapter : GLib.GInterfaceAdapter, Cpg.Operator {

		static OperatorIface iface;

		struct OperatorIface {
			public IntPtr gtype;
			public IntPtr itype;

			public ExecuteDelegate execute;
			public GetNameDelegate get_name;
			public CreateDataDelegate create_data;
			public FreeDataDelegate free_data;
			public GetNumArgumentsDelegate get_num_arguments;
			public ResetCacheDelegate reset_cache;
			public ResetVariadicDelegate reset_variadic;
		}

		static OperatorAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(OperatorAdapter));
			iface.execute = new ExecuteDelegate (ExecuteCallback);
			iface.get_name = new GetNameDelegate (GetNameCallback);
			iface.create_data = new CreateDataDelegate (CreateDataCallback);
			iface.free_data = new FreeDataDelegate (FreeDataCallback);
			iface.get_num_arguments = new GetNumArgumentsDelegate (GetNumArgumentsCallback);
			iface.reset_cache = new ResetCacheDelegate (ResetCacheCallback);
			iface.reset_variadic = new ResetVariadicDelegate (ResetVariadicCallback);
		}


		[GLib.CDeclCallback]
		delegate void ExecuteDelegate (IntPtr op, IntPtr data, IntPtr stack);

		static void ExecuteCallback (IntPtr op, IntPtr data, IntPtr stack)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				__obj.Execute (data == IntPtr.Zero ? null : (Cpg.OperatorData) GLib.Opaque.GetOpaque (data, typeof (Cpg.OperatorData), false), stack == IntPtr.Zero ? null : (Cpg.Stack) GLib.Opaque.GetOpaque (stack, typeof (Cpg.Stack), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate IntPtr GetNameDelegate (IntPtr op);

		static IntPtr GetNameCallback (IntPtr op)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				string __result = __obj.Name;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate IntPtr CreateDataDelegate (IntPtr op, IntPtr expressions);

		static IntPtr CreateDataCallback (IntPtr op, IntPtr expressions)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				Cpg.OperatorData __result = __obj.CreateData (new GLib.SList(expressions));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void FreeDataDelegate (IntPtr op, IntPtr data);

		static void FreeDataCallback (IntPtr op, IntPtr data)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				__obj.FreeData (data == IntPtr.Zero ? null : (Cpg.OperatorData) GLib.Opaque.GetOpaque (data, typeof (Cpg.OperatorData), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate int GetNumArgumentsDelegate (IntPtr op);

		static int GetNumArgumentsCallback (IntPtr op)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				int __result = __obj.NumArguments;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void ResetCacheDelegate (IntPtr op, IntPtr data);

		static void ResetCacheCallback (IntPtr op, IntPtr data)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				__obj.ResetCache (data == IntPtr.Zero ? null : (Cpg.OperatorData) GLib.Opaque.GetOpaque (data, typeof (Cpg.OperatorData), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void ResetVariadicDelegate (IntPtr op, IntPtr data);

		static void ResetVariadicCallback (IntPtr op, IntPtr data)
		{
			try {
				Cpg.OperatorImplementor __obj = GLib.Object.GetObject (op, false) as Cpg.OperatorImplementor;
				__obj.ResetVariadic (data == IntPtr.Zero ? null : (Cpg.OperatorData) GLib.Opaque.GetOpaque (data, typeof (Cpg.OperatorData), false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			OperatorIface native_iface = (OperatorIface) Marshal.PtrToStructure (ifaceptr, typeof (OperatorIface));
			native_iface.execute = iface.execute;
			native_iface.get_name = iface.get_name;
			native_iface.create_data = iface.create_data;
			native_iface.free_data = iface.free_data;
			native_iface.get_num_arguments = iface.get_num_arguments;
			native_iface.reset_cache = iface.reset_cache;
			native_iface.reset_variadic = iface.reset_variadic;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public OperatorAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		OperatorImplementor implementor;

		public OperatorAdapter (OperatorImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public OperatorAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_operator_get_type();

		private static GLib.GType _gtype = new GLib.GType (cpg_operator_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Operator GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Operator GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is OperatorImplementor)
				return new OperatorAdapter (obj as OperatorImplementor);
			else if (obj as Operator == null)
				return new OperatorAdapter (obj.Handle);
			else
				return obj as Operator;
		}

		public OperatorImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_operator_reset_variadic(IntPtr raw, IntPtr data);

		public void ResetVariadic(Cpg.OperatorData data) {
			cpg_operator_reset_variadic(Handle, data == null ? IntPtr.Zero : data.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_operator_execute(IntPtr raw, IntPtr data, IntPtr stack);

		public void Execute(Cpg.OperatorData data, Cpg.Stack stack) {
			cpg_operator_execute(Handle, data == null ? IntPtr.Zero : data.Handle, stack == null ? IntPtr.Zero : stack.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_operator_create_data(IntPtr raw, IntPtr expressions);

		public Cpg.OperatorData CreateData(GLib.SList expressions) {
			IntPtr raw_ret = cpg_operator_create_data(Handle, expressions == null ? IntPtr.Zero : expressions.Handle);
			Cpg.OperatorData ret = raw_ret == IntPtr.Zero ? null : (Cpg.OperatorData) GLib.Opaque.GetOpaque (raw_ret, typeof (Cpg.OperatorData), false);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_operator_free_data(IntPtr raw, IntPtr data);

		public void FreeData(Cpg.OperatorData data) {
			cpg_operator_free_data(Handle, data == null ? IntPtr.Zero : data.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_operator_reset_cache(IntPtr raw, IntPtr data);

		public void ResetCache(Cpg.OperatorData data) {
			cpg_operator_reset_cache(Handle, data == null ? IntPtr.Zero : data.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_operator_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = cpg_operator_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_operator_get_num_arguments(IntPtr raw);

		public int NumArguments { 
			get {
				int raw_ret = cpg_operator_get_num_arguments(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
