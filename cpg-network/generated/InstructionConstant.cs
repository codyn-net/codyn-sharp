// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class InstructionConstant : Cpg.InstructionNumber {

		[Obsolete]
		protected InstructionConstant(GLib.GType gtype) : base(gtype) {}
		public InstructionConstant(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_instruction_constant_new(IntPtr symbol);

		public InstructionConstant (string symbol) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InstructionConstant)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_symbol = GLib.Marshaller.StringToPtrGStrdup (symbol);
			Raw = cpg_instruction_constant_new(native_symbol);
			GLib.Marshaller.Free (native_symbol);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_instruction_constant_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_instruction_constant_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_instruction_constant_get_symbol(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_instruction_constant_set_symbol(IntPtr raw, IntPtr symbol);

		public string Symbol { 
			get {
				IntPtr raw_ret = cpg_instruction_constant_get_symbol(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cpg_instruction_constant_set_symbol(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}
}
