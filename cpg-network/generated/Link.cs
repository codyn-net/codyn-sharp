// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Link : Cpg.Object {

		[Obsolete]
		protected Link(GLib.GType gtype) : base(gtype) {}
		public Link(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_link_new(IntPtr id, IntPtr from, IntPtr to);

		public Link (string id, Cpg.Object from, Cpg.Object to) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Link)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				if (from != null) {
					names.Add ("from");
					vals.Add (new GLib.Value (from));
				}
				if (to != null) {
					names.Add ("to");
					vals.Add (new GLib.Value (to));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			Raw = cpg_link_new(native_id, from == null ? IntPtr.Zero : from.Handle, to == null ? IntPtr.Zero : to.Handle);
			GLib.Marshaller.Free (native_id);
		}

		[GLib.Property ("from")]
		public Cpg.Object From {
			get {
				GLib.Value val = GetProperty ("from");
				Cpg.Object ret = (Cpg.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("from", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("to")]
		public Cpg.Object To {
			get {
				GLib.Value val = GetProperty ("to");
				Cpg.Object ret = (Cpg.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("to", val);
				val.Dispose ();
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_link_remove_action(IntPtr raw, IntPtr action);

		public bool RemoveAction(Cpg.LinkAction action) {
			bool raw_ret = cpg_link_remove_action(Handle, action == null ? IntPtr.Zero : action.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_link_add_action(IntPtr raw, IntPtr target, IntPtr expression);

		public Cpg.LinkAction AddAction(Cpg.Property target, string expression) {
			IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
			IntPtr raw_ret = cpg_link_add_action(Handle, target == null ? IntPtr.Zero : target.Handle, native_expression);
			Cpg.LinkAction ret = raw_ret == IntPtr.Zero ? null : (Cpg.LinkAction) GLib.Opaque.GetOpaque (raw_ret, typeof (Cpg.LinkAction), false);
			GLib.Marshaller.Free (native_expression);
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_link_get_actions(IntPtr raw);

		public Cpg.LinkAction[] Actions { 
			get {
				IntPtr raw_ret = cpg_link_get_actions(Handle);
				Cpg.LinkAction[] ret = (Cpg.LinkAction[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.LinkAction));
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_link_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_link_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
