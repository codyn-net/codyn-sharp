// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Link : Cpg.Object {

		[Obsolete]
		protected Link(GLib.GType gtype) : base(gtype) {}
		public Link(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_link_new(IntPtr id, IntPtr from, IntPtr to);

		public Link (string id, Cpg.Object from, Cpg.Object to) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Link)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("id");
				vals.Add (new GLib.Value (id));
				if (from != null) {
					names.Add ("from");
					vals.Add (new GLib.Value (from));
				}
				if (to != null) {
					names.Add ("to");
					vals.Add (new GLib.Value (to));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			Raw = cpg_link_new(native_id, from == null ? IntPtr.Zero : from.Handle, to == null ? IntPtr.Zero : to.Handle);
			GLib.Marshaller.Free (native_id);
		}

		[GLib.Property ("from")]
		public Cpg.Object From {
			get {
				GLib.Value val = GetProperty ("from");
				Cpg.Object ret = (Cpg.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("from", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("to")]
		public Cpg.Object To {
			get {
				GLib.Value val = GetProperty ("to");
				Cpg.Object ret = (Cpg.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("to", val);
				val.Dispose ();
			}
		}

		[GLib.CDeclCallback]
		delegate void ActionAddedVMDelegate (IntPtr link, IntPtr action);

		static ActionAddedVMDelegate ActionAddedVMCallback;

		static void actionadded_cb (IntPtr link, IntPtr action)
		{
			try {
				Link link_managed = GLib.Object.GetObject (link, false) as Link;
				link_managed.OnActionAdded (GLib.Object.GetObject(action) as Cpg.LinkAction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActionAdded (GLib.GType gtype)
		{
			if (ActionAddedVMCallback == null)
				ActionAddedVMCallback = new ActionAddedVMDelegate (actionadded_cb);
			OverrideVirtualMethod (gtype, "action-added", ActionAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cpg.Link), ConnectionMethod="OverrideActionAdded")]
		protected virtual void OnActionAdded (Cpg.LinkAction action)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (action);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("action-added")]
		public event Cpg.ActionAddedHandler ActionAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "action-added", typeof (Cpg.ActionAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "action-added", typeof (Cpg.ActionAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ActionRemovedVMDelegate (IntPtr link, IntPtr action);

		static ActionRemovedVMDelegate ActionRemovedVMCallback;

		static void actionremoved_cb (IntPtr link, IntPtr action)
		{
			try {
				Link link_managed = GLib.Object.GetObject (link, false) as Link;
				link_managed.OnActionRemoved (GLib.Object.GetObject(action) as Cpg.LinkAction);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActionRemoved (GLib.GType gtype)
		{
			if (ActionRemovedVMCallback == null)
				ActionRemovedVMCallback = new ActionRemovedVMDelegate (actionremoved_cb);
			OverrideVirtualMethod (gtype, "action-removed", ActionRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cpg.Link), ConnectionMethod="OverrideActionRemoved")]
		protected virtual void OnActionRemoved (Cpg.LinkAction action)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (action);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("action-removed")]
		public event Cpg.ActionRemovedHandler ActionRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "action-removed", typeof (Cpg.ActionRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "action-removed", typeof (Cpg.ActionRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_link_attach(IntPtr raw, IntPtr from, IntPtr to);

		public void Attach(Cpg.Object from, Cpg.Object to) {
			cpg_link_attach(Handle, from == null ? IntPtr.Zero : from.Handle, to == null ? IntPtr.Zero : to.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_link_remove_action(IntPtr raw, IntPtr action);

		public bool RemoveAction(Cpg.LinkAction action) {
			bool raw_ret = cpg_link_remove_action(Handle, action == null ? IntPtr.Zero : action.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_link_add_action(IntPtr raw, IntPtr action);

		public bool AddAction(Cpg.LinkAction action) {
			bool raw_ret = cpg_link_add_action(Handle, action == null ? IntPtr.Zero : action.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_link_get_actions(IntPtr raw);

		public Cpg.LinkAction[] Actions { 
			get {
				IntPtr raw_ret = cpg_link_get_actions(Handle);
				Cpg.LinkAction[] ret = (Cpg.LinkAction[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.LinkAction));
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_link_get_action(IntPtr raw, IntPtr target);

		public Cpg.LinkAction GetAction(string target) {
			IntPtr native_target = GLib.Marshaller.StringToPtrGStrdup (target);
			IntPtr raw_ret = cpg_link_get_action(Handle, native_target);
			Cpg.LinkAction ret = GLib.Object.GetObject(raw_ret) as Cpg.LinkAction;
			GLib.Marshaller.Free (native_target);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_link_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_link_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
