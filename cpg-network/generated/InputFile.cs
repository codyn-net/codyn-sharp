// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class InputFile : Cpg.Input {

		[Obsolete]
		protected InputFile(GLib.GType gtype) : base(gtype) {}
		public InputFile(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_input_file_new_for_path(IntPtr id, IntPtr filename);

		public InputFile (string id, string filename) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (InputFile)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			Raw = cpg_input_file_new_for_path(native_id, native_filename);
			GLib.Marshaller.Free (native_id);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_input_file_get_repeat(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_input_file_set_repeat(IntPtr raw, bool repeat);

		[GLib.Property ("repeat")]
		public bool Repeat {
			get  {
				bool raw_ret = cpg_input_file_get_repeat(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				cpg_input_file_set_repeat(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_input_file_set_time_column(IntPtr raw, int column);

		[GLib.Property ("time-column")]
		public int TimeColumn {
			get {
				GLib.Value val = GetProperty ("time-column");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set  {
				cpg_input_file_set_time_column(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_input_file_get_file_path(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_input_file_set_file_path(IntPtr raw, IntPtr path);

		public string FilePath { 
			get {
				IntPtr raw_ret = cpg_input_file_get_file_path(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cpg_input_file_set_file_path(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe bool cpg_input_file_ensure(IntPtr raw, out IntPtr error);

		public unsafe bool Ensure() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_input_file_ensure(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_input_file_get_columns(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_input_file_set_columns(IntPtr raw, IntPtr[] columns);

		public string[] Columns { 
			get {
				IntPtr raw_ret = cpg_input_file_get_columns(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
			set {
				int cnt_value = value == null ? 0 : value.Length;
				IntPtr[] native_value = new IntPtr [cnt_value + 1];
				for (int i = 0; i < cnt_value; i++)
					native_value [i] = GLib.Marshaller.StringToPtrGStrdup (value[i]);
				native_value [cnt_value] = IntPtr.Zero;
				cpg_input_file_set_columns(Handle, native_value);
				for (int i = 0; i < native_value.Length - 1; i++) {
					value [i] = GLib.Marshaller.Utf8PtrToString (native_value[i]);
					GLib.Marshaller.Free (native_value[i]);
				}
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_input_file_get_time_column(IntPtr raw, out bool isset);

		public int GetTimeColumn(out bool isset) {
			int raw_ret = cpg_input_file_get_time_column(Handle, out isset);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_input_file_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_input_file_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "InputFile.custom"
		public InputFile (string id) : this(id, null)
		{
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_input_file_get_data(IntPtr raw, out uint num_rows, out uint num_columns);

		public new double[,] Data
		{
			get
			{
				uint num_columns;
				uint num_rows;

				IntPtr raw_ret = cpg_input_file_get_data(Handle, out num_rows, out num_columns);
				IntPtr[] rows = new IntPtr[num_rows];

				Marshal.Copy(raw_ret, rows, 0, (int)num_rows);

				double[,] ret = new double[num_rows, num_columns];
				double[] r = new double[num_columns];

				for (uint row = 0; row < num_rows; ++row)
				{
					Marshal.Copy(rows[row], r, 0, (int)num_columns);

					for (uint col = 0; col < num_columns; ++col)
					{
						ret[row, col] = r[col];
					}
				}


				return ret;
			}
		}

#endregion
	}
}
