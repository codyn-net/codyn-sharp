// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Instruction : Cpg.MiniObject {

		[Obsolete]
		protected Instruction(GLib.GType gtype) : base(gtype) {}
		public Instruction(IntPtr raw) : base(raw) {}

		protected Instruction() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_instruction_get_stack_count(IntPtr raw);

		public int StackCount { 
			get {
				int raw_ret = cpg_instruction_get_stack_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_instruction_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = cpg_instruction_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_instruction_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_instruction_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_instruction_execute(IntPtr raw, IntPtr stack);

		public void Execute(Cpg.Stack stack) {
			cpg_instruction_execute(Handle, stack == null ? IntPtr.Zero : stack.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_instruction_get_is_commutative(IntPtr raw);

		public bool IsCommutative { 
			get {
				bool raw_ret = cpg_instruction_get_is_commutative(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_instruction_get_dependencies(IntPtr raw);

		public Cpg.Property[] Dependencies { 
			get {
				IntPtr raw_ret = cpg_instruction_get_dependencies(Handle);
				Cpg.Property[] ret = (Cpg.Property[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.Property));
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_instruction_equal(IntPtr raw, IntPtr i2);

		public bool Equal(Cpg.Instruction i2) {
			bool raw_ret = cpg_instruction_equal(Handle, i2 == null ? IntPtr.Zero : i2.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
