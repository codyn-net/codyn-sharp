// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Property : GLib.Opaque {

		[DllImport("cpg-network-1.0")]
		static extern uint cpg_property_get_used(IntPtr raw);

		public uint Used { 
			get {
				uint raw_ret = cpg_property_get_used(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_property_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = cpg_property_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern int cpg_property_get_hint(IntPtr raw);

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_set_hint(IntPtr raw, int hint);

		public Cpg.PropertyHint Hint { 
			get {
				int raw_ret = cpg_property_get_hint(Handle);
				Cpg.PropertyHint ret = (Cpg.PropertyHint) raw_ret;
				return ret;
			}
			set {
				cpg_property_set_hint(Handle, (int) value);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_add_hint(IntPtr raw, int hint);

		public void AddHint(Cpg.PropertyHint hint) {
			cpg_property_add_hint(Handle, (int) hint);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_property_get_value_expression(IntPtr raw);

		public Cpg.Expression ValueExpression { 
			get {
				IntPtr raw_ret = cpg_property_get_value_expression(Handle);
				Cpg.Expression ret = raw_ret == IntPtr.Zero ? null : (Cpg.Expression) GLib.Opaque.GetOpaque (raw_ret, typeof (Cpg.Expression), false);
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_property_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cpg.Property other) {
			bool raw_ret = cpg_property_equal(Handle, other == null ? IntPtr.Zero : other.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_property_get_integrated(IntPtr raw);

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_set_integrated(IntPtr raw, bool integrated);

		public bool Integrated { 
			get {
				bool raw_ret = cpg_property_get_integrated(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cpg_property_set_integrated(Handle, value);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_set_value_expression(IntPtr raw, IntPtr expression);

		public void SetValueExpression(string expression) {
			IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
			cpg_property_set_value_expression(Handle, native_expression);
			GLib.Marshaller.Free (native_expression);
		}

		[DllImport("cpg-network-1.0")]
		static extern double cpg_property_get_value(IntPtr raw);

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_set_value(IntPtr raw, double value);

		public double Value { 
			get {
				double raw_ret = cpg_property_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				cpg_property_set_value(Handle, value);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_remove_hint(IntPtr raw, int hint);

		public void RemoveHint(Cpg.PropertyHint hint) {
			cpg_property_remove_hint(Handle, (int) hint);
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_property_reset_cache(IntPtr raw);

		public void ResetCache() {
			cpg_property_reset_cache(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_property_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_property_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public Property(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_property_new(IntPtr name, IntPtr expression, bool integrated, IntPtr objekt);

		public Property (string name, string expression, bool integrated, Cpg.Object objekt) 
		{
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
			Raw = cpg_property_new(native_name, native_expression, integrated, objekt == null ? IntPtr.Zero : objekt.Handle);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_expression);
		}

#endregion
	}
}
