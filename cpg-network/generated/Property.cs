// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Property : GLib.InitiallyUnowned, Cpg.Usable, Cpg.Modifiable {

		[Obsolete]
		protected Property(GLib.GType gtype) : base(gtype) {}
		public Property(IntPtr raw) : base(raw) {}

		protected Property() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_property_get_flags(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_set_flags(IntPtr raw, int flags);

		[GLib.Property ("flags")]
		public Cpg.PropertyFlags Flags {
			get  {
				int raw_ret = cpg_property_get_flags(Handle);
				Cpg.PropertyFlags ret = (Cpg.PropertyFlags) raw_ret;
				return ret;
			}
			set  {
				cpg_property_set_flags(Handle, (int) value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_get_expression(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_set_expression(IntPtr raw, IntPtr expression);

		[GLib.Property ("expression")]
		public Cpg.Expression Expression {
			get  {
				IntPtr raw_ret = cpg_property_get_expression(Handle);
				Cpg.Expression ret = GLib.Object.GetObject(raw_ret) as Cpg.Expression;
				return ret;
			}
			set  {
				cpg_property_set_expression(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.Property ("object")]
		public Cpg.Object Object {
			get {
				GLib.Value val = GetProperty ("object");
				Cpg.Object ret = (Cpg.Object) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("object", val);
				val.Dispose ();
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = cpg_property_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("name", val);
				val.Dispose ();
			}
		}

		[GLib.CDeclCallback]
		delegate bool InvalidateNameVMDelegate (IntPtr property, IntPtr name);

		static InvalidateNameVMDelegate InvalidateNameVMCallback;

		static bool invalidatename_cb (IntPtr property, IntPtr name)
		{
			try {
				Property property_managed = GLib.Object.GetObject (property, false) as Property;
				return property_managed.OnInvalidateName (GLib.Marshaller.Utf8PtrToString (name));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideInvalidateName (GLib.GType gtype)
		{
			if (InvalidateNameVMCallback == null)
				InvalidateNameVMCallback = new InvalidateNameVMDelegate (invalidatename_cb);
			OverrideVirtualMethod (gtype, "invalidate-name", InvalidateNameVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Cpg.Property), ConnectionMethod="OverrideInvalidateName")]
		protected virtual bool OnInvalidateName (string name)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.Boolean);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (name);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			bool result = (bool) ret;
			ret.Dispose ();
			return result;
		}

		[GLib.Signal("invalidate-name")]
		public event Cpg.InvalidateNameHandler InvalidateName {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "invalidate-name", typeof (Cpg.InvalidateNameArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "invalidate-name", typeof (Cpg.InvalidateNameArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern double cpg_property_get_update(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_set_update(IntPtr raw, double value);

		public double Update { 
			get {
				double raw_ret = cpg_property_get_update(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				cpg_property_set_update(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_property_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cpg.Property other) {
			bool raw_ret = cpg_property_equal(Handle, other == null ? IntPtr.Zero : other.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_remove_flags(IntPtr raw, int flags);

		public void RemoveFlags(Cpg.PropertyFlags flags) {
			cpg_property_remove_flags(Handle, (int) flags);
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_property_flags_from_string(IntPtr flags);

		public static Cpg.PropertyFlags FlagsFromString(string flags) {
			IntPtr native_flags = GLib.Marshaller.StringToPtrGStrdup (flags);
			int raw_ret = cpg_property_flags_from_string(native_flags);
			Cpg.PropertyFlags ret = (Cpg.PropertyFlags) raw_ret;
			GLib.Marshaller.Free (native_flags);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern double cpg_property_get_last_value(IntPtr raw);

		public double LastValue { 
			get {
				double raw_ret = cpg_property_get_last_value(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_property_get_integrated(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_set_integrated(IntPtr raw, bool integrated);

		public bool Integrated { 
			get {
				bool raw_ret = cpg_property_get_integrated(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cpg_property_set_integrated(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_add_flags(IntPtr raw, int flags);

		public void AddFlags(Cpg.PropertyFlags flags) {
			cpg_property_add_flags(Handle, (int) flags);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_flags_to_string(int flags);

		public static string FlagsToString(Cpg.PropertyFlags flags) {
			IntPtr raw_ret = cpg_property_flags_to_string((int) flags);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_reset(IntPtr raw);

		public void Reset() {
			cpg_property_reset(Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_update_last_value(IntPtr raw);

		public void UpdateLastValue() {
			cpg_property_update_last_value(Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_get_full_name(IntPtr raw);

		public string FullName { 
			get {
				IntPtr raw_ret = cpg_property_get_full_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_property_set_name(IntPtr raw, IntPtr name);

		public bool SetName(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			bool raw_ret = cpg_property_set_name(Handle, native_name);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern double cpg_property_get_value(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_property_set_value(IntPtr raw, double value);

		public double Value { 
			get {
				double raw_ret = cpg_property_get_value(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				cpg_property_set_value(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_property_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_copy(IntPtr raw);

		public Cpg.Property Copy() {
			IntPtr raw_ret = cpg_property_copy(Handle);
			Cpg.Property ret = GLib.Object.GetObject(raw_ret, true) as Cpg.Property;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_usable_use(IntPtr raw);

		public void Use() {
			cpg_usable_use(Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern uint cpg_usable_use_count(IntPtr raw);

		public uint UseCount() {
			uint raw_ret = cpg_usable_use_count(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_usable_unuse(IntPtr raw);

		public bool Unuse() {
			bool raw_ret = cpg_usable_unuse(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_modifiable_get_modified(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_modifiable_set_modified(IntPtr raw, bool modified);

		public bool Modified { 
			get {
				bool raw_ret = cpg_modifiable_get_modified(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cpg_modifiable_set_modified(Handle, value);
			}
		}

#endregion
#region Customized extensions
#line 1 "Property.custom"
		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_property_new(IntPtr name, IntPtr expression, int flags);

		[DllImport ("libgobject-2.0")]
		private static extern void g_object_ref_sink (IntPtr raw);

		public Property (string name, string expression, Cpg.PropertyFlags flags) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Property))
			{
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("name");
				vals.Add (new GLib.Value (name));
				names.Add ("expression");
				vals.Add (new GLib.Value (expression));
				names.Add ("flags");
				vals.Add (new GLib.Value (flags));

				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
			}
			else
			{
				IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
				IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
				Raw = cpg_property_new(native_name, native_expression, (int) flags);
				GLib.Marshaller.Free (native_name);
				GLib.Marshaller.Free (native_expression);
			}

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

#endregion
	}
}
