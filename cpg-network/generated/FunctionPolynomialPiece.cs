// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FunctionPolynomialPiece : GLib.Opaque {

		[DllImport("cpg-network-2.0")]
		static extern double cpg_function_polynomial_piece_get_end(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_function_polynomial_piece_set_end(IntPtr raw, double end);

		public double End { 
			get {
				double raw_ret = cpg_function_polynomial_piece_get_end(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				cpg_function_polynomial_piece_set_end(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_function_polynomial_piece_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_function_polynomial_piece_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern double cpg_function_polynomial_piece_get_begin(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_function_polynomial_piece_set_begin(IntPtr raw, double begin);

		public double Begin { 
			get {
				double raw_ret = cpg_function_polynomial_piece_get_begin(Handle);
				double ret = raw_ret;
				return ret;
			}
			set {
				cpg_function_polynomial_piece_set_begin(Handle, value);
			}
		}

		public FunctionPolynomialPiece(IntPtr raw) : base(raw) {}

#endregion
#region Customized extensions
#line 1 "FunctionPolynomialPiece.custom"
		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_function_polynomial_piece_get_coefficients(IntPtr raw, out uint num_coefficients);

		[DllImport("cpg-network-1.0")]
		static extern void cpg_function_polynomial_piece_set_coefficients(IntPtr raw, double[] coefficients, uint num_coefficients);

		public double[] Coefficients {
			get
			{
				uint num_coefficients;
				IntPtr ret = cpg_function_polynomial_piece_get_coefficients(Handle, out num_coefficients);

				double[] coefs = new double[num_coefficients];
				Marshal.Copy(ret, coefs, 0, (int)num_coefficients);

				return coefs;
			}
			set
			{
				uint len = value != null ? (uint)value.Length : 0;

				cpg_function_polynomial_piece_set_coefficients(Handle, value, len);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_function_polynomial_piece_new(double begin, double end, double[] coefficients, uint num_coefficients);

		public FunctionPolynomialPiece (double begin, double end, params double[] coefficients)
		{
			Raw = cpg_function_polynomial_piece_new(begin, end, coefficients, (uint)coefficients.Length);
		}

#endregion
	}
}
