// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Layout : GLib.Object {

		[Obsolete]
		protected Layout(GLib.GType gtype) : base(gtype) {}
		public Layout(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_layout_new(IntPtr network);

		public Layout (Cpg.Network network) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Layout)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (network != null) {
					names.Add ("network");
					vals.Add (new GLib.Value (network));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = cpg_layout_new(network == null ? IntPtr.Zero : network.Handle);
		}

		[GLib.Property ("network")]
		public Cpg.Network Network {
			get {
				GLib.Value val = GetProperty ("network");
				Cpg.Network ret = (Cpg.Network) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_layout_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_layout_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_layout_set(IntPtr raw, IntPtr layoutable, int x, int y);

		public void Set(Cpg.Layoutable layoutable, int x, int y) {
			cpg_layout_set(Handle, layoutable == null ? IntPtr.Zero : layoutable.Handle, x, y);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_layout_add(IntPtr raw, IntPtr left, IntPtr right, int relation);

		public void Add(Cpg.Layoutable left, Cpg.Layoutable right, Cpg.LayoutRelation relation) {
			cpg_layout_add(Handle, left == null ? IntPtr.Zero : left.Handle, right == null ? IntPtr.Zero : right.Handle, (int) relation);
		}

#endregion
	}
}
