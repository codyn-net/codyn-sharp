// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Math {

		[DllImport("cpg-network-2.0")]
		static extern int cpg_math_function_lookup(IntPtr name, out int arguments);

		public static Cpg.MathFunctionType FunctionLookup(string name, out int arguments) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			int raw_ret = cpg_math_function_lookup(native_name, out arguments);
			Cpg.MathFunctionType ret = (Cpg.MathFunctionType) raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_math_operator_execute(int type, int numargs, IntPtr stack);

		public static void OperatorExecute(Cpg.MathOperatorType type, int numargs, Cpg.Stack stack) {
			cpg_math_operator_execute((int) type, numargs, stack == null ? IntPtr.Zero : stack.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_math_operator_is_commutative(int type);

		public static bool OperatorIsCommutative(Cpg.MathOperatorType type) {
			bool raw_ret = cpg_math_operator_is_commutative((int) type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_math_function_lookup_by_id(int type, out int arguments);

		public static string FunctionLookupById(Cpg.MathFunctionType type, out int arguments) {
			IntPtr raw_ret = cpg_math_function_lookup_by_id((int) type, out arguments);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_math_function_is_commutative(int type);

		public static bool FunctionIsCommutative(Cpg.MathFunctionType type) {
			bool raw_ret = cpg_math_function_is_commutative((int) type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern double cpg_math_constant_lookup(IntPtr name, out bool found);

		public static double ConstantLookup(string name, out bool found) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			double raw_ret = cpg_math_constant_lookup(native_name, out found);
			double ret = raw_ret;
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_math_operator_lookup(int type);

		public static Cpg.MathOperatorType OperatorLookup(Cpg.MathOperatorType type) {
			int raw_ret = cpg_math_operator_lookup((int) type);
			Cpg.MathOperatorType ret = (Cpg.MathOperatorType) raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_math_operator_is_variable(int type);

		public static bool OperatorIsVariable(Cpg.MathOperatorType type) {
			bool raw_ret = cpg_math_operator_is_variable((int) type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_math_function_execute(int type, int numargs, IntPtr stack);

		public static void FunctionExecute(Cpg.MathFunctionType type, int numargs, Cpg.Stack stack) {
			cpg_math_function_execute((int) type, numargs, stack == null ? IntPtr.Zero : stack.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_math_operator_is_constant(int type);

		public static bool OperatorIsConstant(Cpg.MathOperatorType type) {
			bool raw_ret = cpg_math_operator_is_constant((int) type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_math_function_is_variable(int type);

		public static bool FunctionIsVariable(Cpg.MathFunctionType type) {
			bool raw_ret = cpg_math_function_is_variable((int) type);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_math_function_is_constant(int type);

		public static bool FunctionIsConstant(Cpg.MathFunctionType type) {
			bool raw_ret = cpg_math_function_is_constant((int) type);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
