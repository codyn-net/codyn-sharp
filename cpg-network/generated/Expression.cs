// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Expression : GLib.Opaque {

		[DllImport("cpg-network-1.0")]
		static extern double cpg_expression_evaluate(IntPtr raw);

		public double Evaluate() {
			double raw_ret = cpg_expression_evaluate(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_expression_set_instructions(IntPtr raw, IntPtr instructions);

		public bool SetInstructions(GLib.SList instructions) {
			bool raw_ret = cpg_expression_set_instructions(Handle, instructions == null ? IntPtr.Zero : instructions.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_expression_set_value(IntPtr raw, double value);

		public double Value { 
			set {
				cpg_expression_set_value(Handle, value);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern bool cpg_expression_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cpg.Expression other) {
			bool raw_ret = cpg_expression_equal(Handle, other == null ? IntPtr.Zero : other.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_expression_reset(IntPtr raw);

		public void Reset() {
			cpg_expression_reset(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_expression_get_as_string(IntPtr raw);

		public string AsString { 
			get {
				IntPtr raw_ret = cpg_expression_get_as_string(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern unsafe int cpg_expression_compile(IntPtr raw, IntPtr context, out IntPtr error);

		public unsafe int Compile(GLib.SList context) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = cpg_expression_compile(Handle, context == null ? IntPtr.Zero : context.Handle, out error);
			int ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_expression_set_from_string(IntPtr raw, IntPtr value);

		public string FromString { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cpg_expression_set_from_string(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_expression_get_dependencies(IntPtr raw);

		public Cpg.Property[] Dependencies { 
			get {
				IntPtr raw_ret = cpg_expression_get_dependencies(Handle);
				Cpg.Property[] ret = (Cpg.Property[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.Property));
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_expression_reset_cache(IntPtr raw);

		public void ResetCache() {
			cpg_expression_reset_cache(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_expression_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_expression_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		public Expression(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_expression_new(IntPtr expression);

		public Expression (string expression) 
		{
			IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
			Raw = cpg_expression_new(native_expression);
			GLib.Marshaller.Free (native_expression);
		}

#endregion
	}
}
