// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Expression : GLib.InitiallyUnowned {

		[Obsolete]
		protected Expression(GLib.GType gtype) : base(gtype) {}
		public Expression(IntPtr raw) : base(raw) {}

		protected Expression() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("expression")]
		public string ExpressionProp {
			get {
				GLib.Value val = GetProperty ("expression");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("expression", val);
				val.Dispose ();
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_set_value(IntPtr raw, double value);

		[GLib.Property ("value")]
		public double Value {
			get {
				GLib.Value val = GetProperty ("value");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set  {
				cpg_expression_set_value(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern int cpg_expression_get_error_at(IntPtr raw);

		public int ErrorAt { 
			get {
				int raw_ret = cpg_expression_get_error_at(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_get_operators(IntPtr raw);

		public GLib.SList Operators { 
			get {
				IntPtr raw_ret = cpg_expression_get_operators(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern double cpg_expression_evaluate(IntPtr raw);

		public double Evaluate() {
			double raw_ret = cpg_expression_evaluate(Handle);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_expression_equal(IntPtr raw, IntPtr other);

		public bool Equal(Cpg.Expression other) {
			bool raw_ret = cpg_expression_equal(Handle, other == null ? IntPtr.Zero : other.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_reset(IntPtr raw);

		public void Reset() {
			cpg_expression_reset(Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_reset_variadic(IntPtr raw);

		public void ResetVariadic() {
			cpg_expression_reset_variadic(Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_get_as_string(IntPtr raw);

		public string AsString { 
			get {
				IntPtr raw_ret = cpg_expression_get_as_string(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe bool cpg_expression_compile(IntPtr raw, IntPtr context, out IntPtr error);

		public unsafe bool Compile(Cpg.CompileContext context) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_expression_compile(Handle, context == null ? IntPtr.Zero : context.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_expression_get_once(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_set_once(IntPtr raw, bool instant);

		public bool Once { 
			get {
				bool raw_ret = cpg_expression_get_once(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				cpg_expression_set_once(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_set_from_string(IntPtr raw, IntPtr value);

		public string FromString { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cpg_expression_set_from_string(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_get_dependencies(IntPtr raw);

		public Cpg.Property[] Dependencies { 
			get {
				IntPtr raw_ret = cpg_expression_get_dependencies(Handle);
				Cpg.Property[] ret = (Cpg.Property[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.Property));
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_reset_cache(IntPtr raw);

		public void ResetCache() {
			cpg_expression_reset_cache(Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_expression_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_copy(IntPtr raw);

		public Cpg.Expression Copy() {
			IntPtr raw_ret = cpg_expression_copy(Handle);
			Cpg.Expression ret = GLib.Object.GetObject(raw_ret, true) as Cpg.Expression;
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Expression.custom"
		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_new(IntPtr expression);

		[DllImport ("libgobject-2.0")]
		private static extern void g_object_ref_sink (IntPtr raw);

		public Expression (string expression) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Expression))
			{
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();

				names.Add ("expression");
				vals.Add (new GLib.Value (expression));

				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
			}
			else
			{
				IntPtr native_expression = GLib.Marshaller.StringToPtrGStrdup (expression);
				Raw = cpg_expression_new(native_expression);
				GLib.Marshaller.Free (native_expression);
			}

			if (Raw != IntPtr.Zero)
			{
				g_object_ref_sink (Raw);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_expression_get_instructions(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_expression_set_instructions(IntPtr raw, IntPtr instructions);

		public Cpg.Instruction[] Instructions
		{
			get
			{
				IntPtr raw_ret = cpg_expression_get_instructions(Handle);
				IntPtr[] ptrs = (IntPtr[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(IntPtr));

				Cpg.Instruction[] ret = new Cpg.Instruction[ptrs.Length];

				for (int i = 0; i < ret.Length; ++i)
				{
					ret[i] = (Cpg.Instruction)MiniObject.GetObject(ptrs[i]);
				}

				return ret;
			}
			set
			{
				GLib.SList ptr = new GLib.SList(typeof(IntPtr));

				for (int i = 0; i < value.Length; ++i)
				{
					ptr.Append(value[i].Handle);
				}

				cpg_expression_set_instructions(Handle, ptr.Handle);
			}
		}


#endregion
	}
}
