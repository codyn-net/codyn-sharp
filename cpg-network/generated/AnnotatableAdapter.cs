// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class AnnotatableAdapter : GLib.GInterfaceAdapter, Cpg.Annotatable {

		static AnnotatableIface iface;

		struct AnnotatableIface {
			public IntPtr gtype;
			public IntPtr itype;

		}

		static AnnotatableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(AnnotatableAdapter));
		}

		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			AnnotatableIface native_iface = (AnnotatableIface) Marshal.PtrToStructure (ifaceptr, typeof (AnnotatableIface));
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public AnnotatableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		AnnotatableImplementor implementor;

		public AnnotatableAdapter (AnnotatableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public AnnotatableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_annotatable_get_type();

		private static GLib.GType _gtype = new GLib.GType (cpg_annotatable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Annotatable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Annotatable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is AnnotatableImplementor)
				return new AnnotatableAdapter (obj as AnnotatableImplementor);
			else if (obj as Annotatable == null)
				return new AnnotatableAdapter (obj.Handle);
			else
				return obj as Annotatable;
		}

		public AnnotatableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_annotatable_get_annotation(IntPtr raw);

		[DllImport("cpg-network-2.0")]
		static extern void cpg_annotatable_set_annotation(IntPtr raw, IntPtr annotation);

		public string Annotation { 
			get {
				IntPtr raw_ret = cpg_annotatable_get_annotation(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				cpg_annotatable_set_annotation(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}
}
