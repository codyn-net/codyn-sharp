// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Selector : GLib.Object {

		[Obsolete]
		protected Selector(GLib.GType gtype) : base(gtype) {}
		public Selector(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_selector_new();

		public Selector () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Selector)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = cpg_selector_new();
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_add_regex(IntPtr raw, IntPtr regex, bool onset);

		public void AddRegex(Cpg.EmbeddedString regex, bool onset) {
			cpg_selector_add_regex(Handle, regex == null ? IntPtr.Zero : regex.Handle, onset);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_set_partial(IntPtr raw, bool partial);

		public bool Partial { 
			set {
				cpg_selector_set_partial(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_add_pseudo(IntPtr raw, int type, IntPtr arguments);

		public void AddPseudo(Cpg.SelectorPseudoType type, GLib.SList arguments) {
			cpg_selector_add_pseudo(Handle, (int) type, arguments == null ? IntPtr.Zero : arguments.Handle);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_add_partial(IntPtr raw, IntPtr identifier, bool onset);

		public void AddPartial(Cpg.EmbeddedString identifier, bool onset) {
			cpg_selector_add_partial(Handle, identifier == null ? IntPtr.Zero : identifier.Handle, onset);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_add_regex_partial(IntPtr raw, IntPtr regex, bool onset);

		public void AddRegexPartial(Cpg.EmbeddedString regex, bool onset) {
			cpg_selector_add_regex_partial(Handle, regex == null ? IntPtr.Zero : regex.Handle, onset);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_selector_select(IntPtr raw, IntPtr parent, int type, IntPtr context);

		public Cpg.Selection[] Select(Cpg.Object parent, Cpg.SelectorType type, Cpg.EmbeddedContext context) {
			IntPtr raw_ret = cpg_selector_select(Handle, parent == null ? IntPtr.Zero : parent.Handle, (int) type, context == null ? IntPtr.Zero : context.Handle);
			Cpg.Selection[] ret = (Cpg.Selection[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.Selection));
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_set_first_onset(IntPtr raw, bool onset);

		public bool FirstOnset { 
			set {
				cpg_selector_set_first_onset(Handle, value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_selector_add(IntPtr raw, IntPtr identifier, bool onset);

		public void Add(Cpg.EmbeddedString identifier, bool onset) {
			cpg_selector_add(Handle, identifier == null ? IntPtr.Zero : identifier.Handle, onset);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_selector_as_string(IntPtr raw);

		public string AsString() {
			IntPtr raw_ret = cpg_selector_as_string(Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe IntPtr cpg_selector_parse(IntPtr ptr, out IntPtr error);

		public static unsafe Cpg.Selector Parse(string ptr) {
			IntPtr native_ptr = GLib.Marshaller.StringToPtrGStrdup (ptr);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = cpg_selector_parse(native_ptr, out error);
			Cpg.Selector ret = GLib.Object.GetObject(raw_ret) as Cpg.Selector;
			GLib.Marshaller.Free (native_ptr);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_selector_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_selector_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_selector_copy(IntPtr raw);

		public Cpg.Selector Copy() {
			IntPtr raw_ret = cpg_selector_copy(Handle);
			Cpg.Selector ret = GLib.Object.GetObject(raw_ret, true) as Cpg.Selector;
			return ret;
		}

#endregion
	}
}
