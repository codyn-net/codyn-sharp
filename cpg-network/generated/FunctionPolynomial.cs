// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FunctionPolynomial : Cpg.Function {

		[Obsolete]
		protected FunctionPolynomial(GLib.GType gtype) : base(gtype) {}
		public FunctionPolynomial(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_function_polynomial_new(IntPtr name);

		public FunctionPolynomial (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FunctionPolynomial)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = cpg_function_polynomial_new(native_name);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_function_polynomial_remove(IntPtr raw, double begin, double end);

		public void Remove(double begin, double end) {
			cpg_function_polynomial_remove(Handle, begin, end);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_function_polynomial_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_function_polynomial_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-1.0")]
		static extern void cpg_function_polynomial_clear(IntPtr raw);

		public void Clear() {
			cpg_function_polynomial_clear(Handle);
		}

		[DllImport("cpg-network-1.0")]
		static extern IntPtr cpg_function_polynomial_get_pieces(IntPtr raw);

		public Cpg.FunctionPolynomialPiece[] Pieces { 
			get {
				IntPtr raw_ret = cpg_function_polynomial_get_pieces(Handle);
				Cpg.FunctionPolynomialPiece[] ret = (Cpg.FunctionPolynomialPiece[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, false, typeof(Cpg.FunctionPolynomialPiece));
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "FunctionPolynomial.custom"
		[DllImport("cpg-network-1.0")]
		static extern void cpg_function_polynomial_add(IntPtr raw, double begin, double end, double[] coefficients, uint num_coefficients);

		public void Add(double begin, double end, double[] coefficients) {
			uint len = coefficients != null ? (uint)coefficients.Length : 0;

			cpg_function_polynomial_add(Handle, begin, end, coefficients, len);
		}

#endregion
	}
}
