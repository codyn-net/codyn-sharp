// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Import : Cpg.Group {

		[Obsolete]
		protected Import(GLib.GType gtype) : base(gtype) {}
		public Import(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern unsafe IntPtr cpg_import_new_from_path(IntPtr network, IntPtr parent, IntPtr id, IntPtr path, out IntPtr error);

		public unsafe Import (Cpg.Network network, Cpg.Group parent, string id, string path) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Import)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr error = IntPtr.Zero;
			Raw = cpg_import_new_from_path(network == null ? IntPtr.Zero : network.Handle, parent == null ? IntPtr.Zero : parent.Handle, native_id, native_path, out error);
			GLib.Marshaller.Free (native_id);
			GLib.Marshaller.Free (native_path);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_import_get_modified(IntPtr raw);

		[GLib.Property ("modified")]
		public bool Modified {
			get  {
				bool raw_ret = cpg_import_get_modified(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[GLib.Property ("filename")]
		public string Filename {
			get {
				GLib.Value val = GetProperty ("filename");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_import_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_import_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_import_get_search_path();

		[DllImport("cpg-network-2.0")]
		static extern void cpg_import_set_search_path(IntPtr[] path);

		public static string[] SearchPath { 
			get {
				IntPtr raw_ret = cpg_import_get_search_path();
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
			set {
				int cnt_value = value == null ? 0 : value.Length;
				IntPtr[] native_value = new IntPtr [cnt_value + 1];
				for (int i = 0; i < cnt_value; i++)
					native_value [i] = GLib.Marshaller.StringToPtrGStrdup(value[i]);
				native_value [cnt_value] = IntPtr.Zero;
				cpg_import_set_search_path(native_value);
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe bool cpg_import_load(IntPtr raw, IntPtr network, IntPtr parent, out IntPtr error);

		public unsafe bool Load(Cpg.Network network, Cpg.Group parent) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_import_load(Handle, network == null ? IntPtr.Zero : network.Handle, parent == null ? IntPtr.Zero : parent.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_import_append_search_path(IntPtr path);

		public static void AppendSearchPath(string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			cpg_import_append_search_path(native_path);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("cpg-network-2.0")]
		static extern void cpg_import_prepend_search_path(IntPtr path);

		public static void PrependSearchPath(string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			cpg_import_prepend_search_path(native_path);
			GLib.Marshaller.Free (native_path);
		}

#endregion
	}
}
