// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Cpg {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class WhenApplied : GLib.Object {

		[Obsolete]
		protected WhenApplied(GLib.GType gtype) : base(gtype) {}
		public WhenApplied(IntPtr raw) : base(raw) {}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_when_applied_new(IntPtr closure, IntPtr code, bool isapply);

		public WhenApplied (Cpg.EmbeddedContext closure, string code, bool isapply) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (WhenApplied)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_code = GLib.Marshaller.StringToPtrGStrdup (code);
			Raw = cpg_when_applied_new(closure == null ? IntPtr.Zero : closure.Handle, native_code, isapply);
			GLib.Marshaller.Free (native_code);
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_when_applied_get_closure(IntPtr raw);

		[GLib.Property ("closure")]
		public Cpg.EmbeddedContext Closure {
			get  {
				IntPtr raw_ret = cpg_when_applied_get_closure(Handle);
				Cpg.EmbeddedContext ret = GLib.Object.GetObject(raw_ret) as Cpg.EmbeddedContext;
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_when_applied_get_code(IntPtr raw);

		[GLib.Property ("code")]
		public string Code {
			get  {
				IntPtr raw_ret = cpg_when_applied_get_code(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern bool cpg_when_applied_get_is_apply(IntPtr raw);

		[GLib.Property ("is-apply")]
		public bool IsApply {
			get  {
				bool raw_ret = cpg_when_applied_get_is_apply(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern IntPtr cpg_when_applied_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = cpg_when_applied_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("cpg-network-2.0")]
		static extern unsafe bool cpg_when_applied_run(IntPtr raw, IntPtr objekt, out IntPtr error);

		public unsafe bool Run(Cpg.Object objekt) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = cpg_when_applied_run(Handle, objekt == null ? IntPtr.Zero : objekt.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
