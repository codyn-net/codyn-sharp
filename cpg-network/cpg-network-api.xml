<?xml version="1.0"?>
<api>
  <!--

        This file was automatically generated.
        Please DO NOT MODIFY THIS FILE, modify .metadata files instead.

-->
  <namespace name="Cpg" library="cpg-network-2.0">
    <enum name="CompileErrorCode" cname="CpgCompileErrorCode" type="enum">
      <member cname="CPG_COMPILE_ERROR_PROPERTY_NOT_FOUND" name="PropertyNotFound" />
      <member cname="CPG_COMPILE_ERROR_FUNCTION_NOT_FOUND" name="FunctionNotFound" />
      <member cname="CPG_COMPILE_ERROR_OPERATOR_NOT_FOUND" name="OperatorNotFound" />
      <member cname="CPG_COMPILE_ERROR_INVALID_TOKEN" name="InvalidToken" />
      <member cname="CPG_COMPILE_ERROR_MAXARG" name="Maxarg" />
      <member cname="CPG_COMPILE_ERROR_INVALID_STACK" name="InvalidStack" />
      <member cname="CPG_COMPILE_ERROR_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="FunctionError" cname="CpgFunctionError" type="enum">
      <member cname="CPG_FUNCTION_ERROR_UNKNOWN" name="ErrorUnknown" />
      <member cname="CPG_FUNCTION_ERROR_ARGUMENT_NOT_FOUND" name="ErrorArgumentNotFound" />
      <member cname="CPG_FUNCTION_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="GroupError" cname="CpgGroupError" type="enum">
      <member cname="CPG_GROUP_ERROR_CHILD_ALREADY_EXISTS" name="ChildAlreadyExists" />
      <member cname="CPG_GROUP_ERROR_CHILD_DOES_NOT_EXIST" name="ChildDoesNotExist" />
      <member cname="CPG_GROUP_ERROR_NUM" name="Num" />
    </enum>
    <enum name="ImportError" cname="CpgImportError" type="enum">
      <member cname="CPG_IMPORT_ERROR_REMOVE" name="Remove" />
    </enum>
    <enum name="InstructionPropertyBinding" cname="CpgInstructionPropertyBinding" type="enum">
      <member cname="CPG_INSTRUCTION_PROPERTY_BINDING_NONE" name="None" />
      <member cname="CPG_INSTRUCTION_PROPERTY_BINDING_FROM" name="From" />
      <member cname="CPG_INSTRUCTION_PROPERTY_BINDING_TO" name="To" />
    </enum>
    <enum name="MathFunctionType" cname="CpgMathFunctionType" type="enum">
      <member cname="CPG_MATH_FUNCTION_TYPE_NONE" name="None" />
      <member cname="CPG_MATH_FUNCTION_TYPE_SIN" name="Sin" />
      <member cname="CPG_MATH_FUNCTION_TYPE_COS" name="Cos" />
      <member cname="CPG_MATH_FUNCTION_TYPE_TAN" name="Tan" />
      <member cname="CPG_MATH_FUNCTION_TYPE_ASIN" name="Asin" />
      <member cname="CPG_MATH_FUNCTION_TYPE_ACOS" name="Acos" />
      <member cname="CPG_MATH_FUNCTION_TYPE_ATAN" name="Atan" />
      <member cname="CPG_MATH_FUNCTION_TYPE_ATAN2" name="Atan2" />
      <member cname="CPG_MATH_FUNCTION_TYPE_SQRT" name="Sqrt" />
      <member cname="CPG_MATH_FUNCTION_TYPE_INVSQRT" name="Invsqrt" />
      <member cname="CPG_MATH_FUNCTION_TYPE_MIN" name="Min" />
      <member cname="CPG_MATH_FUNCTION_TYPE_MAX" name="Max" />
      <member cname="CPG_MATH_FUNCTION_TYPE_EXP" name="Exp" />
      <member cname="CPG_MATH_FUNCTION_TYPE_FLOOR" name="Floor" />
      <member cname="CPG_MATH_FUNCTION_TYPE_CEIL" name="Ceil" />
      <member cname="CPG_MATH_FUNCTION_TYPE_ROUND" name="Round" />
      <member cname="CPG_MATH_FUNCTION_TYPE_ABS" name="Abs" />
      <member cname="CPG_MATH_FUNCTION_TYPE_POW" name="Pow" />
      <member cname="CPG_MATH_FUNCTION_TYPE_RAND" name="Rand" />
      <member cname="CPG_MATH_FUNCTION_TYPE_LN" name="Ln" />
      <member cname="CPG_MATH_FUNCTION_TYPE_LOG10" name="Log10" />
      <member cname="CPG_MATH_FUNCTION_TYPE_HYPOT" name="Hypot" />
      <member cname="CPG_MATH_FUNCTION_TYPE_EXP2" name="Exp2" />
      <member cname="CPG_MATH_FUNCTION_TYPE_SINH" name="Sinh" />
      <member cname="CPG_MATH_FUNCTION_TYPE_COSH" name="Cosh" />
      <member cname="CPG_MATH_FUNCTION_TYPE_TANH" name="Tanh" />
      <member cname="CPG_MATH_FUNCTION_TYPE_LERP" name="Lerp" />
      <member cname="CPG_MATH_FUNCTION_TYPE_SQSUM" name="Sqsum" />
      <member cname="CPG_MATH_FUNCTION_TYPE_NUM" name="Num" />
    </enum>
    <enum name="MathOperatorType" cname="CpgMathOperatorType" type="enum">
      <member cname="CPG_MATH_OPERATOR_TYPE_NONE" name="None" />
      <member cname="CPG_MATH_OPERATOR_TYPE_UNARY_MINUS" name="UnaryMinus" />
      <member cname="CPG_MATH_OPERATOR_TYPE_MINUS" name="Minus" />
      <member cname="CPG_MATH_OPERATOR_TYPE_PLUS" name="Plus" />
      <member cname="CPG_MATH_OPERATOR_TYPE_MULTIPLY" name="Multiply" />
      <member cname="CPG_MATH_OPERATOR_TYPE_DIVIDE" name="Divide" />
      <member cname="CPG_MATH_OPERATOR_TYPE_MODULO" name="Modulo" />
      <member cname="CPG_MATH_OPERATOR_TYPE_POWER" name="Power" />
      <member cname="CPG_MATH_OPERATOR_TYPE_GREATER" name="Greater" />
      <member cname="CPG_MATH_OPERATOR_TYPE_LESS" name="Less" />
      <member cname="CPG_MATH_OPERATOR_TYPE_GREATER_OR_EQUAL" name="GreaterOrEqual" />
      <member cname="CPG_MATH_OPERATOR_TYPE_LESS_OR_EQUAL" name="LessOrEqual" />
      <member cname="CPG_MATH_OPERATOR_TYPE_EQUAL" name="Equal" />
      <member cname="CPG_MATH_OPERATOR_TYPE_OR" name="Or" />
      <member cname="CPG_MATH_OPERATOR_TYPE_AND" name="And" />
      <member cname="CPG_MATH_OPERATOR_TYPE_NEGATE" name="Negate" />
      <member cname="CPG_MATH_OPERATOR_TYPE_TERNARY" name="Ternary" />
      <member cname="CPG_MATH_OPERATOR_TYPE_NUM" name="Num" />
    </enum>
    <enum name="NetworkError" cname="CpgNetworkError" type="enum">
      <member cname="CPG_NETWORK_ERROR_UNOWNED_TEMPLATE" name="UnownedTemplate" />
      <member cname="CPG_NETWORK_ERROR_NUM" name="Num" />
    </enum>
    <enum name="NetworkLoadError" cname="CpgNetworkLoadError" type="enum">
      <member cname="CPG_NETWORK_LOAD_ERROR_XML" name="Xml" />
      <member cname="CPG_NETWORK_LOAD_ERROR_PROPERTY" name="Property" />
      <member cname="CPG_NETWORK_LOAD_ERROR_OBJECT" name="Object" />
      <member cname="CPG_NETWORK_LOAD_ERROR_LINK" name="Link" />
      <member cname="CPG_NETWORK_LOAD_ERROR_FUNCTION" name="Function" />
      <member cname="CPG_NETWORK_LOAD_ERROR_IMPORT" name="Import" />
      <member cname="CPG_NETWORK_LOAD_ERROR_INPUT_FILE" name="InputFile" />
      <member cname="CPG_NETWORK_LOAD_ERROR_INTERFACE" name="Interface" />
    </enum>
    <enum name="ObjectError" cname="CpgObjectError" type="enum">
      <member cname="CPG_OBJECT_ERROR_PROPERTY_UNKNOWN" name="ErrorPropertyUnknown" />
      <member cname="CPG_OBJECT_ERROR_PROPERTY_NOT_FOUND" name="ErrorPropertyNotFound" />
      <member cname="CPG_OBJECT_ERROR_PROPERTY_IN_USE" name="ErrorPropertyInUse" />
      <member cname="CPG_OBJECT_ERROR_PROPERTY_FROM_TEMPLATE" name="ErrorPropertyFromTemplate" />
      <member cname="CPG_OBJECT_ERROR_INVALID_PROPERTY_NAME" name="ErrorInvalidPropertyName" />
      <member cname="CPG_OBJECT_NUM_ERRORS" name="NumErrors" />
    </enum>
    <enum name="PropertyFlags" cname="CpgPropertyFlags" type="flags">
      <member cname="CPG_PROPERTY_FLAG_NONE" name="None" />
      <member cname="CPG_PROPERTY_FLAG_INTEGRATED" name="Integrated" value="1 &lt;&lt; 0" />
      <member cname="CPG_PROPERTY_FLAG_IN" name="In" value="1 &lt;&lt; 1" />
      <member cname="CPG_PROPERTY_FLAG_OUT" name="Out" value="1 &lt;&lt; 2" />
      <member cname="CPG_PROPERTY_FLAG_ONCE" name="Once" value="1 &lt;&lt; 3" />
    </enum>
    <enum name="PropertyInterfaceError" cname="CpgPropertyInterfaceError" type="enum">
      <member cname="CPG_PROPERTY_INTERFACE_ERROR_EXISTS" name="Exists" />
      <member cname="CPG_PROPERTY_INTERFACE_ERROR_NOT_FOUND" name="NotFound" />
      <member cname="CPG_PROPERTY_INTERFACE_ERROR_NUM_ERRORS" name="NumErrors" />
    </enum>
    <callback name="ForeachExpressionFunc" cname="CpgForeachExpressionFunc">
      <return-type type="void" />
      <parameters>
        <parameter type="CpgExpression*" name="expression" />
        <parameter type="gpointer" name="userdata" />
      </parameters>
    </callback>
    <callback name="MiniObjectCopyFunction" cname="CpgMiniObjectCopyFunction">
      <return-type type="CpgMiniObject*" />
      <parameters>
        <parameter type="const-CpgMiniObject*" name="obj" />
      </parameters>
    </callback>
    <callback name="MiniObjectFinalizeFunction" cname="CpgMiniObjectFinalizeFunction">
      <return-type type="void" />
      <parameters>
        <parameter type="CpgMiniObject*" name="obj" />
      </parameters>
    </callback>
    <interface name="Modifiable" cname="CpgModifiable">
      <virtual_method name="GetModified" cname="get_modified">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgModifiable*" name="modifiable" />
        </parameters>
      </virtual_method>
      <virtual_method name="SetModified" cname="set_modified">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgModifiable*" name="modifiable" />
          <parameter type="gboolean" name="modified" />
        </parameters>
      </virtual_method>
      <method name="GetModified" cname="cpg_modifiable_get_modified">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="cpg_modifiable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetModified" cname="cpg_modifiable_set_modified">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="modified" />
        </parameters>
      </method>
    </interface>
    <interface name="Operator" cname="CpgOperator">
      <virtual_method name="Execute" cname="execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
          <parameter type="CpgOperatorData*" name="data" />
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetName" cname="get_name">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
        </parameters>
      </virtual_method>
      <virtual_method name="CreateData" cname="create_data">
        <return-type type="CpgOperatorData*" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
          <parameter type="const-GSList*" name="expressions" element_type="CpgExpression*" />
        </parameters>
      </virtual_method>
      <virtual_method name="FreeData" cname="free_data">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetNumArguments" cname="get_num_arguments">
        <return-type type="gint" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
        </parameters>
      </virtual_method>
      <virtual_method name="ResetCache" cname="reset_cache">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </virtual_method>
      <virtual_method name="ResetVariadic" cname="reset_variadic">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperator*" name="op" />
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </virtual_method>
      <method name="CreateData" cname="cpg_operator_create_data">
        <return-type type="CpgOperatorData*" />
        <parameters>
          <parameter type="const-GSList*" name="expressions" element_type="CpgExpression*" />
        </parameters>
      </method>
      <method name="Execute" cname="cpg_operator_execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperatorData*" name="data" />
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </method>
      <method name="FreeData" cname="cpg_operator_free_data">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </method>
      <method name="GetExpressions" cname="cpg_operator_get_expressions">
        <return-type type="const-GSList*" element_type="CpgExpression*" />
        <parameters>
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </method>
      <method name="GetName" cname="cpg_operator_get_name">
        <return-type type="gchar*" />
      </method>
      <method name="GetNumArguments" cname="cpg_operator_get_num_arguments">
        <return-type type="gint" />
      </method>
      <method name="GetType" cname="cpg_operator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ResetCache" cname="cpg_operator_reset_cache">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </method>
      <method name="ResetVariadic" cname="cpg_operator_reset_variadic">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgOperatorData*" name="data" />
        </parameters>
      </method>
    </interface>
    <interface name="Usable" cname="CpgUsable">
      <virtual_method name="UseCount" cname="use_count">
        <return-type type="guint" />
        <parameters>
          <parameter type="CpgUsable*" name="self" />
        </parameters>
      </virtual_method>
      <virtual_method name="Use" cname="use">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgUsable*" name="self" />
        </parameters>
      </virtual_method>
      <virtual_method name="Unuse" cname="unuse">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgUsable*" name="self" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="cpg_usable_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Unuse" cname="cpg_usable_unuse">
        <return-type type="gboolean" />
      </method>
      <method name="Use" cname="cpg_usable_use">
        <return-type type="void" />
      </method>
      <method name="UseCount" cname="cpg_usable_use_count">
        <return-type type="guint" />
      </method>
    </interface>
    <object name="CompileContext" cname="CpgCompileContext" parent="GObject">
      <field name="Priv" cname="priv" type="CpgCompileContextPrivate*" />
      <method name="AppendObject" cname="cpg_compile_context_append_object">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </method>
      <method name="GetFunctions" cname="cpg_compile_context_get_functions" hidden="true">
        <return-type type="const-GSList*" element_type="CpgFunction*" />
      </method>
      <method name="GetObjects" cname="cpg_compile_context_get_objects">
        <return-type type="const-GSList*" element_type="CpgObject*" />
      </method>
      <method name="GetOperators" cname="cpg_compile_context_get_operators">
        <return-type type="const-GSList*" element_type="CpgOperator*" />
      </method>
      <method name="GetType" cname="cpg_compile_context_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LookupOperator" cname="cpg_compile_context_lookup_operator">
        <return-type type="CpgOperator*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <constructor cname="cpg_compile_context_new" />
      <method name="PrependObject" cname="cpg_compile_context_prepend_object">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </method>
      <method name="Restore" cname="cpg_compile_context_restore">
        <return-type type="void" />
      </method>
      <method name="Save" cname="cpg_compile_context_save">
        <return-type type="void" />
      </method>
      <method name="SetFunctions" cname="cpg_compile_context_set_functions" hidden="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GSList*" name="functions" element_type="CpgFunction*" />
        </parameters>
      </method>
      <method name="SetOperators" cname="cpg_compile_context_set_operators">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GSList*" name="operators" element_type="CpgOperator*" />
        </parameters>
      </method>
      <method name="LookupProperty" cname="cpg_compile_context_lookup_property">
        <return-type type="CpgProperty*" />
      </method>
      <method name="LookupFunction" cname="cpg_compile_context_lookup_function">
        <return-type type="CpgFunction*" />
      </method>
    </object>
    <object name="CompileError" cname="CpgCompileError" parent="GObject">
      <field name="Priv" cname="priv" type="CpgCompileErrorPrivate*" />
      <method name="CodeString" cname="cpg_compile_error_code_string" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="gint" name="code" />
        </parameters>
      </method>
      <method name="GetCode" cname="cpg_compile_error_get_code">
        <return-type type="gint" />
      </method>
      <method name="GetError" cname="cpg_compile_error_get_error">
        <return-type type="GError*" />
      </method>
      <method name="GetLinkAction" cname="cpg_compile_error_get_link_action">
        <return-type type="CpgLinkAction*" />
      </method>
      <method name="GetMessage" cname="cpg_compile_error_get_message">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetObject" cname="cpg_compile_error_get_object">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetProperty" cname="cpg_compile_error_get_property">
        <return-type type="CpgProperty*" />
      </method>
      <method name="GetType" cname="cpg_compile_error_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_compile_error_new" />
      <method name="Set" cname="cpg_compile_error_set">
        <return-type type="void" />
        <parameters>
          <parameter type="GError*" name="gerror" />
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgProperty*" name="property" />
          <parameter type="CpgLinkAction*" name="action" />
        </parameters>
      </method>
      <method name="String" cname="cpg_compile_error_string">
        <return-type type="const-gchar*" />
      </method>
      <method name="TypeQuark" cname="cpg_compile_error_type_quark" shared="true">
        <return-type type="GQuark" />
      </method>
    </object>
    <object name="Expression" cname="CpgExpression" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CpgExpressionPrivate*" />
      <property name="Expression" cname="expression" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Value" cname="value" type="gdouble" readable="true" writeable="true" />
      <method name="Compile" cname="cpg_expression_compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgCompileContext*" name="context" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="cpg_expression_copy">
        <return-type type="CpgExpression*" owned="true" />
      </method>
      <method name="Equal" cname="cpg_expression_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgExpression*" name="other" />
        </parameters>
      </method>
      <method name="Evaluate" cname="cpg_expression_evaluate">
        <return-type type="gdouble" />
      </method>
      <method name="GetAsString" cname="cpg_expression_get_as_string">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetDependencies" cname="cpg_expression_get_dependencies">
        <return-type type="const-GSList*" element_type="CpgProperty*" />
      </method>
      <method name="GetInstructions" cname="cpg_expression_get_instructions" hidden="">
        <return-type type="const-GSList*" />
      </method>
      <method name="GetOnce" cname="cpg_expression_get_once">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="cpg_expression_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_expression_new" hidden="true">
        <parameters>
          <parameter type="const-gchar*" name="expression" />
        </parameters>
      </constructor>
      <method name="Reset" cname="cpg_expression_reset">
        <return-type type="void" />
      </method>
      <method name="ResetCache" cname="cpg_expression_reset_cache">
        <return-type type="void" />
      </method>
      <method name="ResetVariadic" cname="cpg_expression_reset_variadic">
        <return-type type="void" />
      </method>
      <method name="SetFromString" cname="cpg_expression_set_from_string">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="value" />
        </parameters>
      </method>
      <method name="SetInstructions" cname="cpg_expression_set_instructions" hidden="">
        <return-type type="void" />
        <parameters>
          <parameter type="const-GSList*" name="instructions" />
        </parameters>
      </method>
      <method name="SetOnce" cname="cpg_expression_set_once">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="instant" />
        </parameters>
      </method>
      <method name="SetValue" cname="cpg_expression_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
    </object>
    <object name="Function" cname="CpgFunction" parent="CpgObject">
      <field name="Priv" cname="priv" type="CpgFunctionPrivate*" />
      <property name="Expression" cname="expression" type="CpgExpression" readable="true" writeable="true" construct="true" />
      <signal name="ArgumentAdded" cname="argument-added" when="LAST" field_name="argument_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunction*" name="function" />
          <parameter type="CpgFunctionArgument*" name="argument" />
        </parameters>
      </signal>
      <signal name="ArgumentRemoved" cname="argument-removed" when="LAST" field_name="argument_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunction*" name="function" />
          <parameter type="CpgFunctionArgument*" name="argument" />
        </parameters>
      </signal>
      <signal name="ArgumentsReordered" cname="arguments-reordered" when="LAST" field_name="arguments_reordered">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunction*" name="function" />
        </parameters>
      </signal>
      <virtual_method name="Evaluate" cname="evaluate">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="CpgFunction*" name="function" />
        </parameters>
      </virtual_method>
      <virtual_method name="Execute" cname="execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunction*" name="function" />
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </virtual_method>
      <method name="AddArgument" cname="cpg_function_add_argument">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunctionArgument*" name="argument" />
        </parameters>
      </method>
      <method name="ClearArguments" cname="cpg_function_clear_arguments">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cpg_function_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetArguments" cname="cpg_function_get_arguments">
        <return-type type="const-GList*" element_type="CpgFunctionArgument*" />
      </method>
      <method name="GetExpression" cname="cpg_function_get_expression">
        <return-type type="CpgExpression*" />
      </method>
      <method name="GetNArguments" cname="cpg_function_get_n_arguments">
        <return-type type="guint" />
      </method>
      <method name="GetNOptional" cname="cpg_function_get_n_optional">
        <return-type type="guint" />
      </method>
      <method name="GetType" cname="cpg_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_function_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="expression" />
        </parameters>
      </constructor>
      <method name="RemoveArgument" cname="cpg_function_remove_argument">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgFunctionArgument*" name="argument" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetExpression" cname="cpg_function_set_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgExpression*" name="expression" />
        </parameters>
      </method>
    </object>
    <object name="FunctionArgument" cname="CpgFunctionArgument" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CpgFunctionArgumentPrivate*" />
      <signal name="InvalidateName" cname="invalidate-name" when="LAST" field_name="invalidate_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgFunctionArgument*" name="argument" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </signal>
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct-only="true" />
      <property name="Optional" cname="optional" type="gboolean" readable="true" writeable="true" construct="true" />
      <property name="Default" cname="default" type="gdouble" readable="true" writeable="true" construct="true" />
      <method name="Copy" cname="cpg_function_argument_copy">
        <return-type type="CpgFunctionArgument*" owned="true" />
      </method>
      <method name="GetDefaultValue" cname="cpg_function_argument_get_default_value">
        <return-type type="gdouble" />
      </method>
      <method name="GetName" cname="cpg_function_argument_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetOptional" cname="cpg_function_argument_get_optional">
        <return-type type="gboolean" />
      </method>
      <method name="GetType" cname="cpg_function_argument_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_function_argument_new" hidden="true">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gboolean" name="optional" />
          <parameter type="gdouble" name="def" />
        </parameters>
      </constructor>
      <method name="SetDefaultValue" cname="cpg_function_argument_set_default_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="def" />
        </parameters>
      </method>
      <method name="SetName" cname="cpg_function_argument_set_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="SetOptional" cname="cpg_function_argument_set_optional">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="optional" />
        </parameters>
      </method>
    </object>
    <object name="FunctionPolynomial" cname="CpgFunctionPolynomial" parent="CpgFunction">
      <field name="Priv" cname="priv" type="CpgFunctionPolynomialPrivate*" />
      <signal name="PieceAdded" cname="piece-added" when="LAST" field_name="piece_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunctionPolynomial*" name="polynomial" />
          <parameter type="CpgFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </signal>
      <signal name="PieceRemoved" cname="piece-removed" when="LAST" field_name="piece_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunctionPolynomial*" name="polynomial" />
          <parameter type="CpgFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </signal>
      <method name="Add" cname="cpg_function_polynomial_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </method>
      <method name="ClearPieces" cname="cpg_function_polynomial_clear_pieces">
        <return-type type="void" />
      </method>
      <method name="GetPieces" cname="cpg_function_polynomial_get_pieces">
        <return-type type="const-GSList*" element_type="CpgFunctionPolynomialPiece*" />
      </method>
      <method name="GetType" cname="cpg_function_polynomial_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_function_polynomial_new">
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </constructor>
      <method name="Remove" cname="cpg_function_polynomial_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgFunctionPolynomialPiece*" name="piece" />
        </parameters>
      </method>
    </object>
    <object name="FunctionPolynomialPiece" cname="CpgFunctionPolynomialPiece" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CpgFunctionPolynomialPiecePrivate*" />
      <property name="Begin" cname="begin" type="gdouble" readable="true" writeable="true" construct="true" />
      <property name="End" cname="end" type="gdouble" readable="true" writeable="true" construct="true" />
      <method name="Copy" cname="cpg_function_polynomial_piece_copy">
        <return-type type="CpgFunctionPolynomialPiece*" owned="true" />
      </method>
      <method name="GetBegin" cname="cpg_function_polynomial_piece_get_begin">
        <return-type type="gdouble" />
      </method>
      <method name="GetEnd" cname="cpg_function_polynomial_piece_get_end">
        <return-type type="gdouble" />
      </method>
      <method name="GetType" cname="cpg_function_polynomial_piece_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="SetBegin" cname="cpg_function_polynomial_piece_set_begin">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="begin" />
        </parameters>
      </method>
      <method name="SetEnd" cname="cpg_function_polynomial_piece_set_end">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="end" />
        </parameters>
      </method>
    </object>
    <object name="Group" cname="CpgGroup" parent="CpgObject">
      <field name="Priv" cname="priv" type="CpgGroupPrivate*" />
      <property name="Proxy" cname="proxy" type="CpgObject" readable="true" writeable="true" construct-only="true" />
      <signal name="ChildAdded" cname="child-added" when="LAST" field_name="child_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgGroup*" name="group" />
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </signal>
      <signal name="ChildRemoved" cname="child-removed" when="LAST" field_name="child_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgGroup*" name="group" />
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </signal>
      <signal name="VerifyRemoveChild" cname="verify-remove-child" when="LAST" manual="true" hidden="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter name="inst" type="CpgGroup*" />
          <parameter name="p0" type="GObject*" />
          <parameter name="p1" type="gpointer" />
        </parameters>
      </signal>
      <signal name="VerifyAddChild" cname="verify-add-child" when="LAST" manual="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter name="inst" type="CpgGroup*" />
          <parameter name="p0" type="GObject*" />
          <parameter name="p1" type="gpointer" />
        </parameters>
      </signal>
      <virtual_method name="Add" cname="add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgGroup*" name="group" />
          <parameter type="CpgObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Remove" cname="remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgGroup*" name="group" />
          <parameter type="CpgObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <method name="Add" cname="cpg_group_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cpg_group_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="FindObject" cname="cpg_group_find_object">
        <return-type type="CpgObject*" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="FindProperty" cname="cpg_group_find_property">
        <return-type type="CpgProperty*" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="Foreach" cname="cpg_group_foreach" hidden="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GFunc" name="func" />
          <parameter type="gpointer" name="data" />
        </parameters>
      </method>
      <method name="GetChild" cname="cpg_group_get_child">
        <return-type type="CpgObject*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetChildren" cname="cpg_group_get_children">
        <return-type type="const-GSList*" element_type="CpgObject*" />
      </method>
      <method name="GetPropertyInterface" cname="cpg_group_get_property_interface">
        <return-type type="CpgPropertyInterface*" />
      </method>
      <method name="GetProxy" cname="cpg_group_get_proxy">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetType" cname="cpg_group_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_group_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter type="CpgObject*" name="proxy" />
        </parameters>
      </constructor>
      <method name="PropertyIsProxy" cname="cpg_group_property_is_proxy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="Remove" cname="cpg_group_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SetProxy" cname="cpg_group_set_proxy">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="proxy" />
        </parameters>
      </method>
      <method name="VerifyRemoveChild" cname="cpg_group_verify_remove_child">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="child" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="Import" cname="CpgImport" parent="CpgGroup">
      <field name="Priv" cname="priv" type="CpgImportPrivate*" />
      <property name="Path" cname="path" type="gchar*" readable="true" />
      <implements>
        <interface cname="CpgModifiable" />
      </implements>
      <method name="AppendSearchPath" cname="cpg_import_append_search_path" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cpg_import_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetPath" cname="cpg_import_get_path">
        <return-type type="gchar*" />
      </method>
      <method name="GetSearchPath" cname="cpg_import_get_search_path" shared="true">
        <return-type type="const-gchar**" null_term_array="" />
      </method>
      <method name="GetType" cname="cpg_import_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ImportsObject" cname="cpg_import_imports_object">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </method>
      <method name="Load" cname="cpg_import_load">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgNetwork*" name="network" />
          <parameter type="CpgGroup*" name="parent" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="cpg_import_new_from_path">
        <parameters>
          <parameter type="CpgNetwork*" name="network" />
          <parameter type="CpgGroup*" name="parent" />
          <parameter type="const-gchar*" name="id" />
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="PrependSearchPath" cname="cpg_import_prepend_search_path" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="SetSearchPath" cname="cpg_import_set_search_path" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="gchar**" name="path" null_term_array="" />
        </parameters>
      </method>
    </object>
    <object name="ImportAlias" cname="CpgImportAlias" parent="CpgImport">
      <field name="Priv" cname="priv" type="CpgImportAliasPrivate*" />
      <property name="Source" cname="source" type="CpgImport" readable="true" writeable="true" construct-only="true" />
      <method name="GetType" cname="cpg_import_alias_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_import_alias_new">
        <parameters>
          <parameter type="CpgImport*" name="source" />
        </parameters>
      </constructor>
    </object>
    <object name="Input" cname="CpgInput" parent="CpgObject">
      <field name="Priv" cname="priv" type="CpgInputPrivate*" />
      <virtual_method name="Update" cname="update">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgInput*" name="input" />
          <parameter type="CpgIntegrator*" name="integrator" />
        </parameters>
      </virtual_method>
      <method name="GetType" cname="cpg_input_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Update" cname="cpg_input_update">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgIntegrator*" name="integrator" />
        </parameters>
      </method>
    </object>
    <object name="InputFile" cname="CpgInputFile" parent="CpgInput">
      <field name="Priv" cname="priv" type="CpgInputFilePrivate*" />
      <property name="Repeat" cname="repeat" type="gboolean" readable="true" writeable="true" />
      <property name="TimeColumn" cname="time-column" type="gint" readable="true" writeable="true" />
      <method name="Ensure" cname="cpg_input_file_ensure">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetColumns" cname="cpg_input_file_get_columns">
        <return-type type="gchar**" null_term_array="" />
      </method>
      <method name="GetFilePath" cname="cpg_input_file_get_file_path">
        <return-type type="gchar*" />
      </method>
      <method name="GetRepeat" cname="cpg_input_file_get_repeat">
        <return-type type="gboolean" />
      </method>
      <method name="GetTimeColumn" cname="cpg_input_file_get_time_column">
        <return-type type="gint" />
        <parameters>
          <parameter type="gboolean*" name="isset" />
        </parameters>
      </method>
      <method name="GetType" cname="cpg_input_file_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_input_file_new_for_path">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter type="const-gchar*" name="filename" />
        </parameters>
      </constructor>
      <method name="SetColumns" cname="cpg_input_file_set_columns">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar**" name="columns" null_term_array="" />
        </parameters>
      </method>
      <method name="SetFilePath" cname="cpg_input_file_set_file_path">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
      <method name="SetRepeat" cname="cpg_input_file_set_repeat">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="repeat" />
        </parameters>
      </method>
      <method name="SetTimeColumn" cname="cpg_input_file_set_time_column">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="column" />
        </parameters>
      </method>
    </object>
    <object name="Instruction" cname="CpgInstruction" parent="CpgMiniObject">
      <field name="Priv" cname="priv" type="CpgInstructionPrivate*" />
      <virtual_method name="ToString" cname="to_string">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CpgInstruction*" name="instruction" />
        </parameters>
      </virtual_method>
      <virtual_method name="Execute" cname="execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgInstruction*" name="instruction" />
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetStackCount" cname="get_stack_count">
        <return-type type="gint" />
        <parameters>
          <parameter type="CpgInstruction*" name="instruction" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetDependencies" cname="get_dependencies">
        <return-type type="GSList*" element_type="CpgProperty*" />
        <parameters>
          <parameter type="CpgInstruction*" name="instruction" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgInstruction*" name="i1" />
          <parameter type="CpgInstruction*" name="i2" />
        </parameters>
      </virtual_method>
      <method name="Equal" cname="cpg_instruction_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgInstruction*" name="i2" />
        </parameters>
      </method>
      <method name="Execute" cname="cpg_instruction_execute">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </method>
      <method name="GetDependencies" cname="cpg_instruction_get_dependencies">
        <return-type type="GSList*" element_type="CpgProperty*" />
      </method>
      <method name="GetStackCount" cname="cpg_instruction_get_stack_count">
        <return-type type="gint" />
      </method>
      <method name="GetType" cname="cpg_instruction_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="ToString" cname="cpg_instruction_to_string">
        <return-type type="gchar*" />
      </method>
    </object>
    <object name="InstructionCustomFunction" cname="CpgInstructionCustomFunction" parent="CpgInstruction">
      <field name="Priv" cname="priv" type="CpgInstructionCustomFunctionPrivate*" />
      <method name="GetArguments" cname="cpg_instruction_custom_function_get_arguments">
        <return-type type="gint" />
      </method>
      <method name="GetFunction" cname="cpg_instruction_custom_function_get_function">
        <return-type type="CpgFunction*" />
      </method>
      <method name="GetType" cname="cpg_instruction_custom_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_instruction_custom_function_new">
        <parameters>
          <parameter type="CpgFunction*" name="function" />
          <parameter type="gint" name="arguments" />
        </parameters>
      </constructor>
      <method name="SetArguments" cname="cpg_instruction_custom_function_set_arguments">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="arguments" />
        </parameters>
      </method>
      <method name="SetFunction" cname="cpg_instruction_custom_function_set_function">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgFunction*" name="func" />
        </parameters>
      </method>
    </object>
    <object name="InstructionCustomOperator" cname="CpgInstructionCustomOperator" parent="CpgInstruction">
      <field name="Priv" cname="priv" type="CpgInstructionCustomOperatorPrivate*" />
      <method name="GetData" cname="cpg_instruction_custom_operator_get_data">
        <return-type type="CpgOperatorData*" />
      </method>
      <method name="GetOperator" cname="cpg_instruction_custom_operator_get_operator">
        <return-type type="CpgOperator*" />
      </method>
      <method name="GetType" cname="cpg_instruction_custom_operator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_instruction_custom_operator_new">
        <parameters>
          <parameter type="CpgOperator*" name="op" />
          <parameter type="const-GSList*" name="expressions" element_type="CpgExpression*" />
        </parameters>
      </constructor>
    </object>
    <object name="InstructionFunction" cname="CpgInstructionFunction" parent="CpgInstruction">
      <field name="Priv" cname="priv" type="CpgInstructionFunctionPrivate*" />
      <method name="GetArguments" cname="cpg_instruction_function_get_arguments">
        <return-type type="gint" />
      </method>
      <method name="GetId" cname="cpg_instruction_function_get_id">
        <return-type type="guint" />
      </method>
      <method name="GetName" cname="cpg_instruction_function_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cpg_instruction_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_instruction_function_new">
        <parameters>
          <parameter type="guint" name="id" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint" name="arguments" />
        </parameters>
      </constructor>
      <method name="SetArguments" cname="cpg_instruction_function_set_arguments">
        <return-type type="void" />
        <parameters>
          <parameter type="gint" name="arguments" />
        </parameters>
      </method>
      <method name="SetId" cname="cpg_instruction_function_set_id">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="id" />
        </parameters>
      </method>
      <method name="SetName" cname="cpg_instruction_function_set_name">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
    </object>
    <object name="InstructionNumber" cname="CpgInstructionNumber" parent="CpgInstruction">
      <field name="Priv" cname="priv" type="CpgInstructionNumberPrivate*" />
      <method name="GetType" cname="cpg_instruction_number_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetValue" cname="cpg_instruction_number_get_value">
        <return-type type="gdouble" />
      </method>
      <constructor cname="cpg_instruction_number_new">
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </constructor>
      <method name="SetValue" cname="cpg_instruction_number_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
    </object>
    <object name="InstructionOperator" cname="CpgInstructionOperator" parent="CpgInstructionFunction">
      <field name="Stub" cname="stub" type="gpointer" />
      <method name="GetType" cname="cpg_instruction_operator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_instruction_operator_new">
        <parameters>
          <parameter type="guint" name="id" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint" name="arguments" />
        </parameters>
      </constructor>
    </object>
    <object name="InstructionProperty" cname="CpgInstructionProperty" parent="CpgInstruction">
      <field name="Priv" cname="priv" type="CpgInstructionPropertyPrivate*" />
      <method name="GetBinding" cname="cpg_instruction_property_get_binding">
        <return-type type="CpgInstructionPropertyBinding" />
      </method>
      <method name="GetProperty" cname="cpg_instruction_property_get_property">
        <return-type type="CpgProperty*" />
      </method>
      <method name="GetType" cname="cpg_instruction_property_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_instruction_property_new">
        <parameters>
          <parameter type="CpgProperty*" name="property" />
          <parameter type="CpgInstructionPropertyBinding" name="binding" />
        </parameters>
      </constructor>
      <method name="SetBinding" cname="cpg_instruction_property_set_binding">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgInstructionPropertyBinding" name="binding" />
        </parameters>
      </method>
      <method name="SetProperty" cname="cpg_instruction_property_set_property">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </method>
    </object>
    <object name="InstructionVariadicFunction" cname="CpgInstructionVariadicFunction" parent="CpgInstructionFunction">
      <field name="Priv" cname="priv" type="CpgInstructionVariadicFunctionPrivate*" />
      <method name="GetType" cname="cpg_instruction_variadic_function_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_instruction_variadic_function_new">
        <parameters>
          <parameter type="guint" name="id" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint" name="arguments" />
        </parameters>
      </constructor>
      <method name="ResetCache" cname="cpg_instruction_variadic_function_reset_cache">
        <return-type type="void" />
      </method>
    </object>
    <object name="Integrator" cname="CpgIntegrator" parent="CpgObject">
      <field name="Priv" cname="priv" type="CpgIntegratorPrivate*" />
      <property name="Object" cname="object" type="CpgObject" readable="true" writeable="true" />
      <property name="Time" cname="time" type="gdouble" readable="true" />
      <signal name="Stepped" cname="step" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CpgIntegrator*" />
          <parameter name="timestep" type="gdouble" />
          <parameter name="time" type="gdouble" />
        </parameters>
      </signal>
      <signal name="Begin" cname="begin" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CpgIntegrator*" />
          <parameter name="from" type="gdouble" />
          <parameter name="step" type="gdouble" />
          <parameter name="to" type="gdouble" />
        </parameters>
      </signal>
      <signal name="End" cname="end" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CpgIntegrator*" />
        </parameters>
      </signal>
      <property name="State" cname="state" type="CpgIntegratorState" readable="true" />
      <virtual_method name="Run" cname="run">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgIntegrator*" name="integrator" />
          <parameter type="gdouble" name="from" />
          <parameter type="gdouble" name="timestep" />
          <parameter type="gdouble" name="to" />
        </parameters>
      </virtual_method>
      <virtual_method name="Step" cname="step">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="CpgIntegrator*" name="integrator" />
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </virtual_method>
      <virtual_method name="StepPrepare" cname="step_prepare">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgIntegrator*" name="integrator" />
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgIntegrator*" name="integrator" />
        </parameters>
      </virtual_method>
      <method name="GetName" cname="cpg_integrator_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetObject" cname="cpg_integrator_get_object">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetState" cname="cpg_integrator_get_state">
        <return-type type="CpgIntegratorState*" />
      </method>
      <method name="GetTime" cname="cpg_integrator_get_time">
        <return-type type="gdouble" />
      </method>
      <method name="GetType" cname="cpg_integrator_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Reset" cname="cpg_integrator_reset">
        <return-type type="void" />
      </method>
      <method name="SetState" cname="cpg_integrator_set_state">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgIntegratorState*" name="state" />
        </parameters>
      </method>
      <method name="StepPrepare" cname="cpg_integrator_step_prepare">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="gdouble" name="t" />
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
    </object>
    <object name="IntegratorEuler" cname="CpgIntegratorEuler" parent="CpgIntegrator">
      <field name="Priv" cname="priv" type="CpgIntegratorEulerPrivate*" />
      <method name="GetType" cname="cpg_integrator_euler_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_integrator_euler_new" />
    </object>
    <object name="IntegratorRungeKutta" cname="CpgIntegratorRungeKutta" parent="CpgIntegrator">
      <field name="Priv" cname="priv" type="CpgIntegratorRungeKuttaPrivate*" />
      <method name="GetType" cname="cpg_integrator_runge_kutta_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_integrator_runge_kutta_new" />
    </object>
    <object name="IntegratorState" cname="CpgIntegratorState" parent="GObject">
      <field name="Priv" cname="priv" type="CpgIntegratorStatePrivate*" />
      <signal name="Updated" cname="updated" when="LAST">
        <return-type type="void" />
        <parameters>
          <parameter name="inst" type="CpgIntegratorState*" />
        </parameters>
      </signal>
      <property name="Object" cname="object" type="CpgObject" readable="true" writeable="true" construct-only="true" />
      <method name="AllProperties" cname="cpg_integrator_state_all_properties">
        <return-type type="const-GSList*" element_type="CpgProperty*" />
      </method>
      <method name="DirectLinkActions" cname="cpg_integrator_state_direct_link_actions">
        <return-type type="const-GSList*" element_type="CpgLinkAction*" />
      </method>
      <method name="DirectProperties" cname="cpg_integrator_state_direct_properties">
        <return-type type="const-GSList*" element_type="CpgProperty*" />
      </method>
      <method name="GetObject" cname="cpg_integrator_state_get_object">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetType" cname="cpg_integrator_state_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Inputs" cname="cpg_integrator_state_inputs">
        <return-type type="const-GSList*" element_type="CpgInput*" />
      </method>
      <method name="IntegratedLinkActions" cname="cpg_integrator_state_integrated_link_actions">
        <return-type type="const-GSList*" element_type="CpgLinkAction*" />
      </method>
      <method name="IntegratedProperties" cname="cpg_integrator_state_integrated_properties">
        <return-type type="const-GSList*" element_type="CpgProperty*" />
      </method>
      <constructor cname="cpg_integrator_state_new">
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </constructor>
      <method name="Update" cname="cpg_integrator_state_update">
        <return-type type="void" />
      </method>
    </object>
    <object name="Link" cname="CpgLink" parent="CpgObject">
      <field name="Priv" cname="priv" type="CpgLinkPrivate*" />
      <signal name="ActionAdded" cname="action-added" when="LAST" field_name="action_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgLink*" name="link" />
          <parameter type="CpgLinkAction*" name="action" />
        </parameters>
      </signal>
      <signal name="ActionRemoved" cname="action-removed" when="LAST" field_name="action_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgLink*" name="link" />
          <parameter type="CpgLinkAction*" name="action" />
        </parameters>
      </signal>
      <property name="From" cname="from" type="CpgObject" readable="true" writeable="true" construct="true" />
      <property name="To" cname="to" type="CpgObject" readable="true" writeable="true" construct="true" />
      <method name="AddAction" cname="cpg_link_add_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgLinkAction*" name="action" />
        </parameters>
      </method>
      <method name="Attach" cname="cpg_link_attach">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="from" />
          <parameter type="CpgObject*" name="to" />
        </parameters>
      </method>
      <method name="GetAction" cname="cpg_link_get_action">
        <return-type type="CpgLinkAction*" />
        <parameters>
          <parameter type="const-gchar*" name="target" />
        </parameters>
      </method>
      <method name="GetActionTemplate" cname="cpg_link_get_action_template">
        <return-type type="CpgLink*" />
        <parameters>
          <parameter type="CpgLinkAction*" name="action" />
          <parameter type="gboolean" name="match_full" />
        </parameters>
      </method>
      <method name="GetActions" cname="cpg_link_get_actions">
        <return-type type="const-GSList*" element_type="CpgLinkAction*" />
      </method>
      <method name="GetFrom" cname="cpg_link_get_from" hidden="true">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetTo" cname="cpg_link_get_to" hidden="true">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetType" cname="cpg_link_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_link_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
          <parameter type="CpgObject*" name="from" />
          <parameter type="CpgObject*" name="to" />
        </parameters>
      </constructor>
      <method name="RemoveAction" cname="cpg_link_remove_action">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgLinkAction*" name="action" />
        </parameters>
      </method>
    </object>
    <object name="LinkAction" cname="CpgLinkAction" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CpgLinkActionPrivate*" />
      <property name="Target" cname="target" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Equation" cname="equation" type="CpgExpression" readable="true" writeable="true" construct="true" />
      <property name="TargetProperty" cname="target-property" type="CpgProperty" readable="true" />
      <implements>
        <interface cname="CpgModifiable" />
      </implements>
      <method name="Copy" cname="cpg_link_action_copy">
        <return-type type="CpgLinkAction*" owned="true" />
      </method>
      <method name="Depends" cname="cpg_link_action_depends">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </method>
      <method name="Equal" cname="cpg_link_action_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgLinkAction*" name="other" />
        </parameters>
      </method>
      <method name="GetEquation" cname="cpg_link_action_get_equation">
        <return-type type="CpgExpression*" />
      </method>
      <method name="GetTarget" cname="cpg_link_action_get_target">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetTargetProperty" cname="cpg_link_action_get_target_property">
        <return-type type="CpgProperty*" />
      </method>
      <method name="GetType" cname="cpg_link_action_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_link_action_new" hidden="true">
        <parameters>
          <parameter type="const-gchar*" name="target" />
          <parameter type="CpgExpression*" name="equation" />
        </parameters>
      </constructor>
      <method name="SetEquation" cname="cpg_link_action_set_equation">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgExpression*" name="equation" />
        </parameters>
      </method>
      <method name="SetTarget" cname="cpg_link_action_set_target">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="target" />
        </parameters>
      </method>
    </object>
    <object name="MiniObject" cname="CpgMiniObject" parent="GTypeInstance">
      <method name="Copy" cname="cpg_mini_object_copy">
        <return-type type="CpgMiniObject*" owned="true" />
      </method>
      <method name="Free" cname="cpg_mini_object_free">
        <return-type type="void" />
      </method>
      <method name="GetType" cname="cpg_mini_object_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_mini_object_new">
        <parameters>
          <parameter type="GType" name="type" />
        </parameters>
      </constructor>
    </object>
    <object name="Monitor" cname="CpgMonitor" parent="GObject">
      <field name="Priv" cname="priv" type="CpgMonitorPrivate*" />
      <property name="Network" cname="network" type="CpgNetwork" readable="true" writeable="true" construct-only="true" />
      <property name="Property" cname="property" type="CpgProperty" readable="true" writeable="true" construct-only="true" />
      <method name="GetProperty" cname="cpg_monitor_get_property">
        <return-type type="CpgProperty*" />
      </method>
      <method name="GetType" cname="cpg_monitor_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_monitor_new">
        <parameters>
          <parameter type="CpgNetwork*" name="network" />
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </constructor>
    </object>
    <object name="Network" cname="CpgNetwork" parent="CpgGroup">
      <field name="Priv" cname="priv" type="CpgNetworkPrivate*" />
      <signal name="CompileError" cname="compile-error" when="LAST" field_name="compile_error">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgNetwork*" name="network" />
          <parameter type="CpgCompileError*" name="error" />
        </parameters>
      </signal>
      <property name="Integrator" cname="integrator" type="CpgIntegrator" readable="true" writeable="true" />
      <property name="Filename" cname="filename" type="gchar*" readable="true" />
      <method name="ErrorQuark" cname="cpg_network_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetFunctionGroup" cname="cpg_network_get_function_group">
        <return-type type="CpgGroup*" />
      </method>
      <method name="GetIntegrator" cname="cpg_network_get_integrator">
        <return-type type="CpgIntegrator*" />
      </method>
      <method name="GetPath" cname="cpg_network_get_path">
        <return-type type="gchar*" />
      </method>
      <method name="GetTemplateGroup" cname="cpg_network_get_template_group">
        <return-type type="CpgGroup*" />
      </method>
      <method name="GetType" cname="cpg_network_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="LoadErrorQuark" cname="cpg_network_load_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="LoadFromPath" cname="cpg_network_load_from_path">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="LoadFromXml" cname="cpg_network_load_from_xml">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="xml" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Merge" cname="cpg_network_merge">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgNetwork*" name="other" />
        </parameters>
      </method>
      <method name="MergeFromPath" cname="cpg_network_merge_from_path">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="MergeFromXml" cname="cpg_network_merge_from_xml">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="xml" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <constructor cname="cpg_network_new" />
      <constructor cname="cpg_network_new_from_path">
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <constructor cname="cpg_network_new_from_xml">
        <parameters>
          <parameter type="const-gchar*" name="xml" />
          <parameter type="GError**" name="error" />
        </parameters>
      </constructor>
      <method name="Run" cname="cpg_network_run">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="from" />
          <parameter type="gdouble" name="timestep" />
          <parameter type="gdouble" name="to" />
        </parameters>
      </method>
      <method name="SetIntegrator" cname="cpg_network_set_integrator">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgIntegrator*" name="integrator" />
        </parameters>
      </method>
      <method name="Step" cname="cpg_network_step">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="timestep" />
        </parameters>
      </method>
      <method name="GetImportFromPath" cname="cpg_network_get_import_from_path">
        <return-type type="CpgImport*" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
        </parameters>
      </method>
    </object>
    <object name="NetworkDeserializer" cname="CpgNetworkDeserializer" parent="GObject">
      <field name="Priv" cname="priv" type="CpgNetworkDeserializerPrivate*" />
      <property name="Network" cname="network" type="CpgNetwork" readable="true" writeable="true" construct-only="true" />
      <property name="Root" cname="root" type="CpgGroup" readable="true" writeable="true" construct-only="true" />
      <method name="DeserializePath" cname="cpg_network_deserializer_deserialize_path">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="GetType" cname="cpg_network_deserializer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_network_deserializer_new">
        <parameters>
          <parameter type="CpgNetwork*" name="network" />
          <parameter type="CpgGroup*" name="root" />
        </parameters>
      </constructor>
    </object>
    <object name="NetworkSerializer" cname="CpgNetworkSerializer" parent="GObject">
      <field name="Priv" cname="priv" type="CpgNetworkSerializerPrivate*" />
      <property name="Network" cname="network" type="CpgNetwork" readable="true" writeable="true" construct-only="true" />
      <property name="Root" cname="root" type="CpgGroup" readable="true" writeable="true" construct-only="true" />
      <method name="GetType" cname="cpg_network_serializer_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_network_serializer_new">
        <parameters>
          <parameter type="CpgNetwork*" name="network" />
          <parameter type="CpgGroup*" name="root" />
        </parameters>
      </constructor>
      <method name="SerializeMemory" cname="cpg_network_serializer_serialize_memory">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="SerializePath" cname="cpg_network_serializer_serialize_path">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="path" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <object name="Object" cname="CpgObject" parent="GObject">
      <field name="Priv" cname="priv" type="CpgObjectPrivate*" />
      <property name="Id" cname="id" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Parent" cname="parent" type="CpgObject" readable="true" />
      <property name="AutoImported" cname="auto-imported" type="gboolean" readable="true" writeable="true" construct="true" />
      <signal name="Tainted" cname="tainted" when="LAST" field_name="tainted">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </signal>
      <signal name="Compiled" cname="compiled" when="LAST" field_name="compiled">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </signal>
      <signal name="Resetted" cname="resetted" when="LAST" field_name="resetted">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </signal>
      <signal name="Copied" cname="copied" when="LAST" field_name="copied">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgObject*" name="copy" />
        </parameters>
      </signal>
      <signal name="VerifyRemoveProperty" cname="verify-remove-property" when="LAST" manual="true" field_name="verify_remove_property" hidden="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </signal>
      <signal name="PropertyAdded" cname="property-added" when="LAST" field_name="property_added">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </signal>
      <signal name="PropertyRemoved" cname="property-removed" when="LAST" field_name="property_removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </signal>
      <signal name="PropertyChanged" cname="property-changed" when="LAST" field_name="property_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </signal>
      <signal name="TemplateApplied" cname="template-applied" when="LAST" field_name="template_applied">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </signal>
      <signal name="TemplateUnapplied" cname="template-unapplied" when="LAST" field_name="template_unapplied">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </signal>
      <virtual_method name="Compile" cname="compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgCompileContext*" name="context" />
          <parameter type="CPG_FORWARD_DECL" name="(CpgCompileError)*" />
        </parameters>
      </virtual_method>
      <virtual_method name="Reset" cname="reset">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="ForeachExpression" cname="foreach_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgForeachExpressionFunc" name="func" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </virtual_method>
      <virtual_method name="ApplyTemplate" cname="apply_template">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </virtual_method>
      <virtual_method name="UnapplyTemplate" cname="unapply_template">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </virtual_method>
      <virtual_method name="Copy" cname="copy">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgObject*" name="source" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetCopyType" cname="get_copy_type">
        <return-type type="GType" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="Taint" cname="taint">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetProperties" cname="get_properties">
        <return-type type="GSList*" element_type="CpgProperty*" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="GetProperty" cname="get_property">
        <return-type type="CpgProperty*" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </virtual_method>
      <virtual_method name="HasProperty" cname="has_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </virtual_method>
      <virtual_method name="AddProperty" cname="add_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="CpgProperty*" name="property" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="RemoveProperty" cname="remove_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </virtual_method>
      <virtual_method name="Clear" cname="clear">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </virtual_method>
      <virtual_method name="Equal" cname="equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="first" />
          <parameter type="CpgObject*" name="last" />
        </parameters>
      </virtual_method>
      <implements>
        <interface cname="CpgUsable" />
      </implements>
      <method name="AddProperty" cname="cpg_object_add_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ApplyTemplate" cname="cpg_object_apply_template">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </method>
      <method name="Clear" cname="cpg_object_clear">
        <return-type type="void" />
      </method>
      <method name="Compile" cname="cpg_object_compile">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgCompileContext*" name="context" />
          <parameter type="CpgCompileError*" name="error" />
        </parameters>
      </method>
      <method name="Copy" cname="cpg_object_copy">
        <return-type type="CpgObject*" owned="true" />
      </method>
      <method name="Equal" cname="cpg_object_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgObject*" name="second" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cpg_object_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="ForeachExpression" cname="cpg_object_foreach_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgForeachExpressionFunc" name="func" scope="call" />
          <parameter type="gpointer" name="userdata" />
        </parameters>
      </method>
      <method name="GetActors" cname="cpg_object_get_actors">
        <return-type type="const-GSList*" element_type="CpgProperty*" />
      </method>
      <method name="GetAppliedTemplates" cname="cpg_object_get_applied_templates">
        <return-type type="const-GSList*" element_type="CpgObject*" />
      </method>
      <method name="GetAutoImported" cname="cpg_object_get_auto_imported">
        <return-type type="gboolean" />
      </method>
      <method name="GetFullId" cname="cpg_object_get_full_id">
        <return-type type="gchar*" />
      </method>
      <method name="GetId" cname="cpg_object_get_id">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetLinks" cname="cpg_object_get_links">
        <return-type type="const-GSList*" element_type="CpgLink*" />
      </method>
      <method name="GetParent" cname="cpg_object_get_parent">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetProperties" cname="cpg_object_get_properties">
        <return-type type="GSList*" element_type="CpgProperty*" />
      </method>
      <method name="Property" cname="cpg_object_get_property">
        <return-type type="CpgProperty*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="GetPropertyTemplate" cname="cpg_object_get_property_template">
        <return-type type="CpgObject*" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
          <parameter type="gboolean" name="match_full" />
        </parameters>
      </method>
      <method name="GetRelativeId" cname="cpg_object_get_relative_id">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CpgObject*" name="parent" />
        </parameters>
      </method>
      <method name="GetType" cname="cpg_object_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="HasProperty" cname="cpg_object_has_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="IsCompiled" cname="cpg_object_is_compiled">
        <return-type type="gboolean" />
      </method>
      <constructor cname="cpg_object_new">
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </constructor>
      <constructor cname="cpg_object_new_from_template" hidden="true">
        <parameters>
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </constructor>
      <method name="RemoveProperty" cname="cpg_object_remove_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="Reset" cname="cpg_object_reset">
        <return-type type="void" />
      </method>
      <method name="SetAutoImported" cname="cpg_object_set_auto_imported">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="auto_imported" />
        </parameters>
      </method>
      <method name="SetId" cname="cpg_object_set_id">
        <return-type type="void" />
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </method>
      <method name="Taint" cname="cpg_object_taint">
        <return-type type="void" />
      </method>
      <method name="UnapplyTemplate" cname="cpg_object_unapply_template">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgObject*" name="templ" />
        </parameters>
      </method>
      <method name="VerifyRemoveProperty" cname="cpg_object_verify_remove_property">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="CopyAsTemplate" cname="cpg_object_new_from_template">
        <return-type type="CpgObject*" owned="true" />
      </method>
    </object>
    <object name="OperatorLastof" cname="CpgOperatorLastof" parent="GObject">
      <field name="Priv" cname="priv" type="CpgOperatorLastofPrivate*" />
      <method name="GetType" cname="cpg_operator_lastof_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <constructor cname="cpg_operator_lastof_new" />
    </object>
    <object name="Property" cname="CpgProperty" parent="GInitiallyUnowned">
      <field name="Priv" cname="priv" type="CpgPropertyPrivate*" />
      <property name="Name" cname="name" type="gchar*" readable="true" writeable="true" construct="true" />
      <property name="Object" cname="object" type="CpgObject" readable="true" writeable="true" construct="true" />
      <property name="Flags" cname="flags" type="CpgPropertyFlags" readable="true" writeable="true" construct="true" />
      <property name="Expression" cname="expression" type="CpgExpression" readable="true" writeable="true" construct="true" />
      <signal name="InvalidateName" cname="invalidate-name" when="LAST" field_name="invalidate_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </signal>
      <signal name="ExpressionChanged" cname="expression-changed" when="LAST" field_name="expression_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
          <parameter type="CpgExpression*" name="expression" />
        </parameters>
      </signal>
      <signal name="FlagsChanged" cname="flags-changed" when="LAST" field_name="flags_changed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgProperty*" name="property" />
          <parameter type="CpgPropertyFlags" name="flags" />
        </parameters>
      </signal>
      <implements>
        <interface cname="CpgUsable" />
        <interface cname="CpgModifiable" />
      </implements>
      <method name="AddFlags" cname="cpg_property_add_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgPropertyFlags" name="flags" />
        </parameters>
      </method>
      <method name="Copy" cname="cpg_property_copy">
        <return-type type="CpgProperty*" owned="true" />
      </method>
      <method name="Equal" cname="cpg_property_equal">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgProperty*" name="other" />
        </parameters>
      </method>
      <method name="FlagsFromString" cname="cpg_property_flags_from_string" shared="true">
        <return-type type="CpgPropertyFlags" />
        <parameters>
          <parameter type="const-gchar*" name="flags" />
        </parameters>
      </method>
      <method name="FlagsToString" cname="cpg_property_flags_to_string" shared="true">
        <return-type type="gchar*" />
        <parameters>
          <parameter type="CpgPropertyFlags" name="flags" />
        </parameters>
      </method>
      <method name="GetExpression" cname="cpg_property_get_expression">
        <return-type type="CpgExpression*" />
      </method>
      <method name="GetFlags" cname="cpg_property_get_flags">
        <return-type type="CpgPropertyFlags" />
      </method>
      <method name="GetFullName" cname="cpg_property_get_full_name">
        <return-type type="gchar*" />
      </method>
      <method name="GetIntegrated" cname="cpg_property_get_integrated">
        <return-type type="gboolean" />
      </method>
      <method name="GetLastValue" cname="cpg_property_get_last_value">
        <return-type type="gdouble" />
      </method>
      <method name="GetName" cname="cpg_property_get_name">
        <return-type type="const-gchar*" />
      </method>
      <method name="GetType" cname="cpg_property_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="GetUpdate" cname="cpg_property_get_update">
        <return-type type="gdouble" />
      </method>
      <method name="GetValue" cname="cpg_property_get_value">
        <return-type type="gdouble" />
      </method>
      <constructor cname="cpg_property_new" hidden="true">
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="const-gchar*" name="expression" />
          <parameter type="CpgPropertyFlags" name="flags" />
        </parameters>
      </constructor>
      <method name="RemoveFlags" cname="cpg_property_remove_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgPropertyFlags" name="flags" />
        </parameters>
      </method>
      <method name="Reset" cname="cpg_property_reset">
        <return-type type="void" />
      </method>
      <method name="SetExpression" cname="cpg_property_set_expression">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgExpression*" name="expression" />
        </parameters>
      </method>
      <method name="SetFlags" cname="cpg_property_set_flags">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgPropertyFlags" name="flags" />
        </parameters>
      </method>
      <method name="SetIntegrated" cname="cpg_property_set_integrated">
        <return-type type="void" />
        <parameters>
          <parameter type="gboolean" name="integrated" />
        </parameters>
      </method>
      <method name="SetName" cname="cpg_property_set_name">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <method name="SetUpdate" cname="cpg_property_set_update">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="SetValue" cname="cpg_property_set_value">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="UpdateLastValue" cname="cpg_property_update_last_value">
        <return-type type="void" />
      </method>
    </object>
    <object name="PropertyInterface" cname="CpgPropertyInterface" parent="GObject">
      <field name="Priv" cname="priv" type="CpgPropertyInterfacePrivate*" />
      <signal name="Added" cname="added" when="LAST" field_name="added">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgPropertyInterface*" name="iface" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </signal>
      <signal name="Removed" cname="removed" when="LAST" field_name="removed">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgPropertyInterface*" name="iface" />
          <parameter type="const-gchar*" name="name" />
          <parameter type="CpgProperty*" name="property" />
        </parameters>
      </signal>
      <property name="Object" cname="object" type="CpgGroup" readable="true" writeable="true" construct-only="true" />
      <method name="Add" cname="cpg_property_interface_add">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="CpgProperty*" name="property" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
      <method name="ErrorQuark" cname="cpg_property_interface_error_quark" shared="true">
        <return-type type="GQuark" />
      </method>
      <method name="GetNames" cname="cpg_property_interface_get_names">
        <return-type type="gchar**" null_term_array="" />
      </method>
      <method name="GetObject" cname="cpg_property_interface_get_object">
        <return-type type="CpgObject*" />
      </method>
      <method name="GetType" cname="cpg_property_interface_get_type" shared="true">
        <return-type type="GType" />
      </method>
      <method name="Lookup" cname="cpg_property_interface_lookup">
        <return-type type="CpgProperty*" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
        </parameters>
      </method>
      <constructor cname="cpg_property_interface_new">
        <parameters>
          <parameter type="CpgObject*" name="object" />
        </parameters>
      </constructor>
      <method name="Remove" cname="cpg_property_interface_remove">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="GError**" name="error" />
        </parameters>
      </method>
    </object>
    <struct name="OperatorData" cname="CpgOperatorData" opaque="true">
      <field name="Expressions" cname="expressions" type="GSList*" access="private" element_type="CpgExpression*" />
      <method name="Destroy" cname="cpg_operator_data_destroy">
        <return-type type="void" />
      </method>
      <method name="Init" cname="cpg_operator_data_init">
        <return-type type="CpgOperatorData*" />
        <parameters>
          <parameter type="const-GSList*" name="expressions" element_type="CpgExpression*" />
        </parameters>
      </method>
    </struct>
    <struct name="Stack" cname="CpgStack" opaque="true">
      <method name="At" cname="cpg_stack_at">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="gint" name="idx" />
        </parameters>
      </method>
      <method name="Count" cname="cpg_stack_count">
        <return-type type="guint" />
      </method>
      <method name="Destroy" cname="cpg_stack_destroy">
        <return-type type="void" />
      </method>
      <method name="Free" cname="cpg_stack_free">
        <return-type type="void" />
      </method>
      <method name="Init" cname="cpg_stack_init">
        <return-type type="void" />
        <parameters>
          <parameter type="guint" name="size" />
        </parameters>
      </method>
      <constructor cname="cpg_stack_new">
        <parameters>
          <parameter type="guint" name="size" />
        </parameters>
      </constructor>
      <method name="Pop" cname="cpg_stack_pop">
        <return-type type="gdouble" />
      </method>
      <method name="Push" cname="cpg_stack_push">
        <return-type type="void" />
        <parameters>
          <parameter type="gdouble" name="value" />
        </parameters>
      </method>
      <method name="Reset" cname="cpg_stack_reset">
        <return-type type="void" />
      </method>
      <method name="Size" cname="cpg_stack_size">
        <return-type type="guint" />
      </method>
    </struct>
    <class name="Integrators" cname="CpgIntegrators_">
      <method name="Create" cname="cpg_integrators_create" shared="true">
        <return-type type="GSList*" element_type="CpgIntegrator*" />
      </method>
      <method name="Find" cname="cpg_integrators_find" shared="true">
        <return-type type="GType" />
        <parameters>
          <parameter type="const-gchar*" name="id" />
        </parameters>
      </method>
      <method name="List" cname="cpg_integrators_list" shared="true">
        <return-type type="const-GSList*" element_type="GType" />
      </method>
      <method name="Register" cname="cpg_integrators_register" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="gtype" />
        </parameters>
      </method>
      <method name="Unregister" cname="cpg_integrators_unregister" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="GType" name="gtype" />
        </parameters>
      </method>
    </class>
    <class name="Math" cname="CpgMath_">
      <method name="ConstantLookup" cname="cpg_math_constant_lookup" shared="true">
        <return-type type="gdouble" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gboolean*" name="found" />
        </parameters>
      </method>
      <method name="FunctionExecute" cname="cpg_math_function_execute" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgMathFunctionType" name="type" />
          <parameter type="gint" name="numargs" />
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </method>
      <method name="FunctionIsCommutative" cname="cpg_math_function_is_commutative" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgMathFunctionType" name="type" />
        </parameters>
      </method>
      <method name="FunctionIsConstant" cname="cpg_math_function_is_constant" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgMathFunctionType" name="type" />
        </parameters>
      </method>
      <method name="FunctionIsVariable" cname="cpg_math_function_is_variable" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgMathFunctionType" name="type" />
        </parameters>
      </method>
      <method name="FunctionLookup" cname="cpg_math_function_lookup" shared="true">
        <return-type type="CpgMathFunctionType" />
        <parameters>
          <parameter type="const-gchar*" name="name" />
          <parameter type="gint*" name="arguments" />
        </parameters>
      </method>
      <method name="FunctionLookupById" cname="cpg_math_function_lookup_by_id" shared="true">
        <return-type type="const-gchar*" />
        <parameters>
          <parameter type="CpgMathFunctionType" name="type" />
          <parameter type="gint*" name="arguments" />
        </parameters>
      </method>
      <method name="OperatorExecute" cname="cpg_math_operator_execute" shared="true">
        <return-type type="void" />
        <parameters>
          <parameter type="CpgMathOperatorType" name="type" />
          <parameter type="gint" name="numargs" />
          <parameter type="CpgStack*" name="stack" />
        </parameters>
      </method>
      <method name="OperatorIsCommutative" cname="cpg_math_operator_is_commutative" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgMathOperatorType" name="type" />
        </parameters>
      </method>
      <method name="OperatorIsConstant" cname="cpg_math_operator_is_constant" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgMathOperatorType" name="type" />
        </parameters>
      </method>
      <method name="OperatorIsVariable" cname="cpg_math_operator_is_variable" shared="true">
        <return-type type="gboolean" />
        <parameters>
          <parameter type="CpgMathOperatorType" name="type" />
        </parameters>
      </method>
      <method name="OperatorLookup" cname="cpg_math_operator_lookup" shared="true">
        <return-type type="CpgMathOperatorType" />
        <parameters>
          <parameter type="CpgMathOperatorType" name="type" />
        </parameters>
      </method>
    </class>
  </namespace>
</api>